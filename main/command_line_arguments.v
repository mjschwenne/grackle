(* autogenerated from command-line-arguments *)
From Perennial.goose_lang Require Import prelude.
From Goose Require ..time.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

(* main.go *)

(* TimeStamp from timestamp.go *)

Definition TimeStamp := struct.decl [
  "hour" :: uint32T;
  "minute" :: uint32T;
  "second" :: uint32T
].

Definition TimeStamp__marshal: val :=
  rec: "TimeStamp__marshal" "t" :=
    let: "enc" := NewSlice byteT #12 in
    let: "off" := ref_to uint32T #(U32 0) in
    UInt32Put (SliceSkip byteT "enc" (![uint32T] "off")) (struct.get TimeStamp "hour" "t");;
    "off" <-[uint32T] ((![uint32T] "off") + #(U32 4));;
    UInt32Put (SliceSkip byteT "enc" (![uint32T] "off")) (struct.get TimeStamp "minute" "t");;
    "off" <-[uint32T] ((![uint32T] "off") + #(U32 4));;
    UInt32Put (SliceSkip byteT "enc" (![uint32T] "off")) (struct.get TimeStamp "second" "t");;
    "enc".

Definition UnmarshalTimeStamp: val :=
  rec: "UnmarshalTimeStamp" "enc" :=
    let: "ts" := ref (zero_val (struct.t TimeStamp)) in
    let: "off" := ref (zero_val uint32T) in
    struct.storeF TimeStamp "hour" "ts" (UInt32Get (SliceSkip byteT "enc" (![uint32T] "off")));;
    "off" <-[uint32T] ((![uint32T] "off") + #(U32 4));;
    struct.storeF TimeStamp "minute" "ts" (UInt32Get (SliceSkip byteT "enc" (![uint32T] "off")));;
    "off" <-[uint32T] ((![uint32T] "off") + #(U32 4));;
    struct.storeF TimeStamp "second" "ts" (UInt32Get (SliceSkip byteT "enc" (![uint32T] "off")));;
    "ts".

Definition main: val :=
  rec: "main" <> :=
    let: (("hours", "minutes"), "seconds") := time.Time__Clock (time.Now #()) in
    (* fmt.Printf("True Time:   %02d:%02d:%02d\n", hours, minutes, seconds) *)
    let: "timeStamp" := struct.mk TimeStamp [
      "hour" ::= to_u32 "hours";
      "minute" ::= to_u32 "minutes";
      "second" ::= to_u32 "seconds"
    ] in
    let: "enc" := TimeStamp__marshal "timeStamp" in
    let: "newTime" := ref (zero_val ptrT) in
    "newTime" <-[ptrT] (UnmarshalTimeStamp "enc");;
    (* fmt.Printf("Struct Time: %02d:%02d:%02d\n", newTime.hour, newTime.minute, newTime.second) *)
    #().

(* timestamp.go *)

End code.
