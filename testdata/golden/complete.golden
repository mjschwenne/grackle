--- Start: testdata/out/go/error_gk/error_gk.go ---
package error

type E uint32

const (
	eOk        E = 0
	eEndOfFile E = 1
	eUnknown   E = 2
)

var Name = map[uint32]string{
	0: "eOk",
	1: "eEndOfFile",
	2: "eUnknown",
}

var Value = map[string]uint32{
	"eOk":        0,
	"eEndOfFile": 1,
	"eUnknown":   2,
}

func (e E) Enum() *E {
	n := new(E)
	*n = e
	return n
}

func (e E) String() string {
	return Name[uint32(e)]
}
--- End: testdata/out/go/error_gk/error_gk.go ---
--- Begin: testdata/out/coq/completeint_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Perennial.goose_lang Require Import lib.slice.pred_slice.

Module completeInt.
Section completeInt.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        one :  u32;
        two :  u32;
        three :  u32;
        four :  u64;
        five :  u64;
        six :  u64;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u32_le args.(one)) ++
              (u32_le args.(two)) ++
              (u32_le args.(three)) ++
              (u64_le args.(four)) ++
              (u64_le args.(five)) ++
              (u64_le args.(six)).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_struct" ∷ ⌜ args__v = (#args__c.(one), (#args__c.(two), (#args__c.(three), (#args__c.(four), (#args__c.(five), (#args__c.(six), #()))))))%V ⌝.


Definition to_val' (c : C) : val :=
  (#c.(one), (#c.(two), (#c.(three), (#c.(four), (#c.(five), (#c.(six), #())))))).

Definition from_val' (v : val) : option C :=
  match v with
  | (#(LitInt32 one), (#(LitInt32 two), (#(LitInt32 three), (#(LitInt four), (#(LitInt five), (#(LitInt six), #()))))))%V =>
    Some (mkC one two three four five six)
  | _ => None
  end.

#[global]
Instance completeInt_into_val : IntoVal C.
Proof.
  refine {|
    to_val := to_val';
    from_val := from_val';
    IntoVal_def := (mkC (W32 0) (W32 0) (W32 0) (W64 0) (W64 0) (W64 0))
  |}.
  intros v. 
  destruct v as [one two three four five six]; done.
Defined.

#[global]
Instance completeInt_into_val_for_type : IntoValForType C (struct.t completeint_gk.S).
Proof. constructor; auto 10. Defined.

Lemma own_to_val (v : val) (c : C) (dq : dfrac) :
  own v c dq -∗ ⌜ v = to_val c ⌝.
Proof.
  iIntros "%Hown_struct".
  
  subst. done.
Qed.


Lemma own_val_ty :
  ∀ (v : val) (x : C) (dq : dfrac), own v x dq -∗ ⌜val_ty v (struct.t completeint_gk.S)⌝.
Proof.
  iIntros (???) "Hown".
  unfold own. iNamed "Hown".
  
  iPureIntro.
  subst.
  repeat constructor.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    completeint_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_load. wp_apply (wp_WriteInt32 with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt32 with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt32 with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    completeint_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__one) "Hone". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__two) "Htwo". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__three) "Hthree". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__four) "Hfour". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__five) "Hfive". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__six) "Hsix". wp_pures.
  
  rewrite Henc. rewrite -?app_assoc.

  wp_load. wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_load. wp_load. wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End completeInt.
End completeInt.

--- End: testdata/out/coq/completeint_proof_gk.v ---
--- Start: testdata/out/go/completeint_gk/completeint_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeint_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	One   uint32
	Two   uint32
	Three uint32
	Four  uint64
	Five  uint64
	Six   uint64
}

func Marshal(c S, prefix []byte) []byte {
	var enc = prefix

	enc = marshal.WriteInt32(enc, c.One)
	enc = marshal.WriteInt32(enc, c.Two)
	enc = marshal.WriteInt32(enc, c.Three)
	enc = marshal.WriteInt(enc, c.Four)
	enc = marshal.WriteInt(enc, c.Five)
	enc = marshal.WriteInt(enc, c.Six)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {
	var enc = s // Needed for goose compatibility
	var one uint32
	var two uint32
	var three uint32
	var four uint64
	var five uint64
	var six uint64

	one, enc = marshal.ReadInt32(enc)
	two, enc = marshal.ReadInt32(enc)
	three, enc = marshal.ReadInt32(enc)
	four, enc = marshal.ReadInt(enc)
	five, enc = marshal.ReadInt(enc)
	six, enc = marshal.ReadInt(enc)

	return S{
		One:   one,
		Two:   two,
		Three: three,
		Four:  four,
		Five:  five,
		Six:   six,
	}, enc
}
--- End: testdata/out/go/completeint_gk/completeint_gk.go ---
--- Begin: testdata/out/coq/completeslice_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Perennial.goose_lang Require Import lib.slice.pred_slice.

Module completeSlice.
Section completeSlice.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        strg :  byte_string;
        strg2 :  byte_string;
        bytes : list u8;
        bytes2 : list u8;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le $ length $ args.(strg)) ++ args.(strg) ++
              (u64_le $ length $ args.(strg2)) ++ args.(strg2) ++
              (u64_le $ length $ args.(bytes)) ++ args.(bytes) ++
              (u64_le $ length $ args.(bytes2)) ++ args.(bytes2).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (bytes_sl bytes2_sl : Slice.t), 
  "%Hown_struct" ∷ ⌜ args__v = (#(str args__c.(strg)), (#(str args__c.(strg2)), (slice_val bytes_sl, (slice_val bytes2_sl, #()))))%V ⌝ ∗
  "Hown_bytes" ∷ own_slice_small bytes_sl byteT dq args__c.(bytes) ∗
  "Hown_bytes2" ∷ own_slice_small bytes2_sl byteT dq args__c.(bytes2).


Lemma own_val_ty :
  ∀ (v : val) (x : C) (dq : dfrac), own v x dq -∗ ⌜val_ty v (struct.t completeslice_gk.S)⌝.
Proof.
  iIntros (???) "Hown".
  unfold own. iNamed "Hown".
  
  iPureIntro.
  subst.
  repeat constructor.
  all: by val_ty.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    completeslice_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_apply wp_StringToBytes. iIntros (?) "Hargs_strg_enc". wp_pures.
  wp_apply (wp_slice_len).
  iDestruct (own_slice_sz with "Hargs_strg_enc") as "%Hargs_strg_sz".
  iApply own_slice_to_small in "Hargs_strg_enc".
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_load. wp_apply (wp_WriteBytes with "[$Hsl $Hargs_strg_enc]").
  iIntros (?) "[Hsl _]". wp_store.

  wp_apply wp_StringToBytes. iIntros (?) "Hargs_strg2_enc". wp_pures.
  wp_apply (wp_slice_len).
  iDestruct (own_slice_sz with "Hargs_strg2_enc") as "%Hargs_strg2_sz".
  iApply own_slice_to_small in "Hargs_strg2_enc".
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_load. wp_apply (wp_WriteBytes with "[$Hsl $Hargs_strg2_enc]").
  iIntros (?) "[Hsl _]". wp_store.

  iDestruct (own_slice_small_sz with "Hown_bytes") as "%Hargs_bytes_sz".
  wp_pures. wp_apply (wp_slice_len). wp_load.
  wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_pures. wp_load.
  wp_apply (wp_WriteBytes with "[$Hsl $Hown_bytes]").
  iIntros (?) "[Hsl Hargs_bytes_sl]". wp_store.

  iDestruct (own_slice_small_sz with "Hown_bytes2") as "%Hargs_bytes2_sz".
  wp_pures. wp_apply (wp_slice_len). wp_load.
  wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_pures. wp_load.
  wp_apply (wp_WriteBytes with "[$Hsl $Hown_bytes2]").
  iIntros (?) "[Hsl Hargs_bytes2_sl]". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  
  rewrite ?string_bytes_length.
  rewrite Hargs_strg_sz.
  rewrite Hargs_strg2_sz.
  rewrite Hargs_bytes_sz.
  rewrite Hargs_bytes2_sz.
  rewrite ?w64_to_nat_id.

  done.
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    completeslice_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__strg) "Hstrg". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__strg2) "Hstrg2". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__bytes) "Hbytes". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__bytes2) "Hbytes2". wp_pures.
  
  rewrite Henc. rewrite -?app_assoc.

  wp_apply wp_ref_of_zero; first done. iIntros (strgLen) "HstrgLen". wp_pures.
  wp_apply wp_ref_of_zero; first done. iIntros (strgBytes) "HstrgBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hstrg_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hstrg_sz. word. }
  iIntros (??) "[Hstrg' Hsl]".

  wp_pures. wp_store. wp_store. wp_load.
  iApply own_slice_to_small in "Hstrg'".
  wp_apply (wp_StringFromBytes with "[$Hstrg']"). iIntros "_".
  wp_store.

  wp_apply wp_ref_of_zero; first done. iIntros (strg2Len) "Hstrg2Len". wp_pures.
  wp_apply wp_ref_of_zero; first done. iIntros (strg2Bytes) "Hstrg2Bytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hstrg2_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hstrg2_sz. word. }
  iIntros (??) "[Hstrg2' Hsl]".

  wp_pures. wp_store. wp_store. wp_load.
  iApply own_slice_to_small in "Hstrg2'".
  wp_apply (wp_StringFromBytes with "[$Hstrg2']"). iIntros "_".
  wp_store.

  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HbytesLen". iApply array_singleton in "HbytesLen". wp_pures.
  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HbytesBytes". iApply array_singleton in "HbytesBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hbytes_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hbytes_sz. word. }
  iIntros (??) "[Hbytes' Hsl]". iApply own_slice_to_small in "Hbytes'".

  wp_pures. wp_store. wp_store. wp_load. wp_store.

  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "Hbytes2Len". iApply array_singleton in "Hbytes2Len". wp_pures.
  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "Hbytes2Bytes". iApply array_singleton in "Hbytes2Bytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hbytes2_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hbytes2_sz. word. }
  iIntros (??) "[Hbytes2' Hsl]". iApply own_slice_to_small in "Hbytes2'".

  wp_pures. wp_store. wp_store. wp_load. wp_store.

  wp_load. wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End completeSlice.
End completeSlice.

--- End: testdata/out/coq/completeslice_proof_gk.v ---
--- Start: testdata/out/go/completeslice_gk/completeslice_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeslice_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	Strg   string
	Strg2  string
	Bytes  []byte
	Bytes2 []byte
}

func Marshal(c S, prefix []byte) []byte {
	var enc = prefix

	strgBytes := []byte(c.Strg)
	enc = marshal.WriteInt(enc, uint64(len(strgBytes)))
	enc = marshal.WriteBytes(enc, strgBytes)
	strg2Bytes := []byte(c.Strg2)
	enc = marshal.WriteInt(enc, uint64(len(strg2Bytes)))
	enc = marshal.WriteBytes(enc, strg2Bytes)
	enc = marshal.WriteInt(enc, uint64(len(c.Bytes)))
	enc = marshal.WriteBytes(enc, c.Bytes)
	enc = marshal.WriteInt(enc, uint64(len(c.Bytes2)))
	enc = marshal.WriteBytes(enc, c.Bytes2)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {
	var enc = s // Needed for goose compatibility
	var strg string
	var strg2 string
	var bytes []byte
	var bytes2 []byte

	var strgLen uint64
	var strgBytes []byte
	strgLen, enc = marshal.ReadInt(enc)
	strgBytes, enc = marshal.ReadBytesCopy(enc, strgLen)
	strg = string(strgBytes)
	var strg2Len uint64
	var strg2Bytes []byte
	strg2Len, enc = marshal.ReadInt(enc)
	strg2Bytes, enc = marshal.ReadBytesCopy(enc, strg2Len)
	strg2 = string(strg2Bytes)
	var bytesLen uint64
	var bytesBytes []byte
	bytesLen, enc = marshal.ReadInt(enc)
	bytesBytes, enc = marshal.ReadBytesCopy(enc, bytesLen)
	bytes = bytesBytes
	var bytes2Len uint64
	var bytes2Bytes []byte
	bytes2Len, enc = marshal.ReadInt(enc)
	bytes2Bytes, enc = marshal.ReadBytesCopy(enc, bytes2Len)
	bytes2 = bytes2Bytes

	return S{
		Strg:   strg,
		Strg2:  strg2,
		Bytes:  bytes,
		Bytes2: bytes2,
	}, enc
}
--- End: testdata/out/go/completeslice_gk/completeslice_gk.go ---
--- Begin: testdata/out/coq/structslice_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From Grackle.test Require Import completeslice_proof_gk.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import completeint_proof_gk.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Perennial.goose_lang Require Import lib.slice.pred_slice.

Module structSlice.
Section structSlice.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        slices : list completeSlice.C;
        ints : list completeInt.C;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (slices_enc ints_enc : list u8), 
  encoded = (u64_le $ length $ args.(slices)) ++ slices_enc ++
              (u64_le $ length $ args.(ints)) ++ ints_enc
  /\ encodes slices_enc args.(slices) completeSlice.has_encoding
  /\ length args.(slices) < 2^64
  /\ encodes ints_enc args.(ints) completeInt.has_encoding
  /\ length args.(ints) < 2^64.

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (slices_sl ints_sl : Slice.t), 
  "%Hown_struct" ∷ ⌜ args__v = (slice_val slices_sl, (slice_val ints_sl, #()))%V ⌝ ∗
  "Hown_slices" ∷ is_pred_slice completeSlice.own slices_sl (struct.t completeslice_gk.S) dq args__c.(slices) ∗
  "Hown_ints" ∷ is_pred_slice completeInt.own ints_sl (struct.t completeint_gk.S) dq args__c.(ints).


Lemma own_val_ty :
  ∀ (v : val) (x : C) (dq : dfrac), own v x dq -∗ ⌜val_ty v (struct.t structslice_gk.S)⌝.
Proof.
  iIntros (???) "Hown".
  unfold own. iNamed "Hown".
  
  unfold completeslice_proof_gk.completeSlice.own.
  unfold completeint_proof_gk.completeInt.own.
  iNamed "Hown_slices".
  iNamed "Hown_ints".
  iPureIntro.
  subst.
  repeat constructor.
  all: by val_ty.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    structslice_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  iDestruct (pred_slice_sz with "Hown_slices") as "%Hargs_slices_sz".
  
  iDestruct (pred_slice_sz with "Hown_ints") as "%Hargs_ints_sz".
  
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(slices) completeSlice.has_encoding completeSlice.own with "[Hown_slices Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (completeSlice.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (slices_enc slices_sl') "(Hpsl_slices & %Henc_slices & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(ints) completeInt.has_encoding completeInt.own with "[Hown_ints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (completeInt.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (ints_enc ints_sl') "(Hpsl_ints & %Henc_ints & Hsl)".
  wp_pures. wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  exists slices_enc, ints_enc. 
  rewrite ?string_bytes_length.
  rewrite Hargs_slices_sz.
  rewrite Hargs_ints_sz.
  rewrite ?w64_to_nat_id.

  repeat split.
  all: word || done.
  
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    structslice_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slices) "Hslices". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__ints) "Hints". wp_pures.
  
  unfold has_encoding in Henc.
  destruct Henc as ( slices_enc & ints_enc & Henc & Henc_slices & Hslices_sz & Henc_ints & Hints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slicesLen) "HslicesLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ completeSlice.has_encoding completeSlice.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply completeSlice.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (completeSlice.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_slices Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__intsLen) "HintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ completeInt.has_encoding completeInt.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply completeInt.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (completeInt.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_ints Hsl]".
  wp_pures. wp_store. wp_store.

  wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End structSlice.
End structSlice.

--- End: testdata/out/coq/structslice_proof_gk.v ---
--- Start: testdata/out/go/structslice_gk/structslice_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package structslice_gk

import (
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/completeint_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk"
)

type S struct {
	Slices []completeslice_gk.S
	Ints   []completeint_gk.S
}

func Marshal(s S, prefix []byte) []byte {
	var enc = prefix

	enc = marshal.WriteInt(enc, uint64(len(s.Slices)))
	enc = marshal.WriteSlice(enc, s.Slices, completeslice_gk.Marshal)

	enc = marshal.WriteInt(enc, uint64(len(s.Ints)))
	enc = marshal.WriteSlice(enc, s.Ints, completeint_gk.Marshal)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {
	var enc = s // Needed for goose compatibility
	var slices []completeslice_gk.S
	var ints []completeint_gk.S

	var slicesLen uint64
	slicesLen, enc = marshal.ReadInt(enc)
	slices, enc = marshal.ReadSlice(enc, slicesLen, completeslice_gk.Unmarshal)
	var intsLen uint64
	intsLen, enc = marshal.ReadInt(enc)
	ints, enc = marshal.ReadSlice(enc, intsLen, completeint_gk.Unmarshal)

	return S{
		Slices: slices,
		Ints:   ints,
	}, enc
}
--- End: testdata/out/go/structslice_gk/structslice_gk.go ---
--- Begin: testdata/out/coq/complete_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From Grackle.test Require Import completeint_proof_gk.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Grackle.test Require Import completeslice_proof_gk.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import structslice_proof_gk.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From Perennial.goose_lang Require Import lib.slice.pred_slice.

Module complete.
Section complete.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        int :  completeInt.C;
        slc :  completeSlice.C;
        success :  bool;
        sslice : list structSlice.C;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (int_enc slc_enc sslice_enc : list u8), 
  encoded = int_enc ++
              slc_enc ++
              [if args.(success) then W8 1 else W8 0] ++
              (u64_le $ length $ args.(sslice)) ++ sslice_enc
  /\ completeInt.has_encoding int_enc args.(int)
  /\ completeSlice.has_encoding slc_enc args.(slc)
  /\ encodes sslice_enc args.(sslice) structSlice.has_encoding
  /\ length args.(sslice) < 2^64.

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃(int__v slc__v : val) (sslice_sl : Slice.t), 
  "%Hown_struct" ∷ ⌜ args__v = (int__v, (slc__v, (#args__c.(success), (slice_val sslice_sl, #()))))%V ⌝ ∗
  "Hown_sslice" ∷ is_pred_slice structSlice.own sslice_sl (struct.t structslice_gk.S) dq args__c.(sslice) ∗
  "Hown_int" ∷ completeInt.own int__v args__c.(int) dq ∗
  "Hown_slc" ∷ completeSlice.own slc__v args__c.(slc) dq.


Lemma own_val_ty :
  ∀ (v : val) (x : C) (dq : dfrac), own v x dq -∗ ⌜val_ty v (struct.t complete_gk.S)⌝.
Proof.
  iIntros (???) "Hown".
  unfold own. iNamed "Hown".
  
  unfold completeint_proof_gk.completeInt.own.
  unfold completeslice_proof_gk.completeSlice.own.
  unfold structslice_proof_gk.structSlice.own.
  iNamed "Hown_int".
  iNamed "Hown_slc".
  iNamed "Hown_sslice".
  iPureIntro.
  subst.
  repeat constructor.
  all: by val_ty.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    complete_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  iDestruct (pred_slice_sz with "Hown_sslice") as "%Hargs_sslice_sz".
  
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_load. wp_pures. wp_apply (completeInt.wp_Encode with "[$Hown_int $Hsl]").
  iIntros (int_enc int_sl) "(%Hargs_int_enc & Hargs_int_own & Hsl)".
  wp_store.

  wp_load. wp_pures. wp_apply (completeSlice.wp_Encode with "[$Hown_slc $Hsl]").
  iIntros (slc_enc slc_sl) "(%Hargs_slc_enc & Hargs_slc_own & Hsl)".
  wp_store.

  wp_load. wp_apply (wp_WriteBool with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(sslice) structSlice.has_encoding structSlice.own with "[Hown_sslice Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (structSlice.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (sslice_enc sslice_sl') "(Hpsl_sslice & %Henc_sslice & Hsl)".
  wp_pures. wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  exists int_enc, slc_enc, sslice_enc. 
  rewrite ?string_bytes_length.
  rewrite Hargs_sslice_sz.
  rewrite ?w64_to_nat_id.

  repeat split.
  all: word || done.
  
  
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    complete_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__int) "Hint". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slc) "Hslc". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__success) "Hsuccess". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__sslice) "Hsslice". wp_pures.
  
  unfold has_encoding in Henc.
  destruct Henc as ( int_enc & slc_enc & sslice_enc & Henc & Henc_int & Henc_slc & Henc_sslice & Hsslice_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_load. wp_apply (completeInt.wp_Decode int_enc with "[$Hsl //]").
  iIntros (int__v ?) "[Hown_int Hsl]".
  iDestruct (completeInt.own_val_ty with "Hown_int") as "%Hval_int".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (completeSlice.wp_Decode slc_enc with "[$Hsl //]").
  iIntros (slc__v ?) "[Hown_slc Hsl]".
  iDestruct (completeSlice.own_val_ty with "Hown_slc") as "%Hval_slc".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadBool with "[Hsl]").
  { simpl. iFrame. }
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args__c.(success)) as Hargs_success.
  { destruct args__c.(success); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success.
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__ssliceLen) "HssliceLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ structSlice.has_encoding structSlice.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply structSlice.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (structSlice.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_sslice Hsl]".
  wp_pures. wp_store. wp_store.

  wp_load. wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End complete.
End complete.

--- End: testdata/out/coq/complete_proof_gk.v ---
--- Start: testdata/out/go/complete_gk/complete_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package complete_gk

import (
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/completeint_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/structslice_gk"
)

type S struct {
	Int     completeint_gk.S
	Slc     completeslice_gk.S
	Success bool
	Sslice  []structslice_gk.S
}

func Marshal(c S, prefix []byte) []byte {
	var enc = prefix

	enc = completeint_gk.Marshal(c.Int, enc)
	enc = completeslice_gk.Marshal(c.Slc, enc)
	enc = marshal.WriteBool(enc, c.Success)

	enc = marshal.WriteInt(enc, uint64(len(c.Sslice)))
	enc = marshal.WriteSlice(enc, c.Sslice, structslice_gk.Marshal)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {
	var enc = s // Needed for goose compatibility
	var int completeint_gk.S
	var slc completeslice_gk.S
	var success bool
	var sslice []structslice_gk.S

	int, enc = completeint_gk.Unmarshal(enc)
	slc, enc = completeslice_gk.Unmarshal(enc)
	success, enc = marshal.ReadBool(enc)
	var ssliceLen uint64
	ssliceLen, enc = marshal.ReadInt(enc)
	sslice, enc = marshal.ReadSlice(enc, ssliceLen, structslice_gk.Unmarshal)

	return S{
		Int:     int,
		Slc:     slc,
		Success: success,
		Sslice:  sslice,
	}, enc
}
--- End: testdata/out/go/complete_gk/complete_gk.go ---
