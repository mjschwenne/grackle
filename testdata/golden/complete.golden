--- Start: testdata/out/go/error_gk/error_gk.go ---
package error

type E uint32

const (
	eOk        E = 0
	eEndOfFile E = 1
	eUnknown   E = 2
)

var Name = map[uint32]string{
	0: "eOk",
	1: "eEndOfFile",
	2: "eUnknown",
}

var Value = map[string]uint32{
	"eOk":        0,
	"eEndOfFile": 1,
	"eUnknown":   2,
}

func (e E) Enum() *E {
	n := new(E)
	*n = e
	return n
}

func (e E) String() string {
	return Name[uint32(e)]
}
--- End: testdata/out/go/error_gk/error_gk.go ---
--- Begin: testdata/out/coq/completeint_proof.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module completeInt.
Section completeInt.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        one : u32;
        two : u32;
        three : u32;
        four : u64;
        five : u64;
        six : u64;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u32_le args.(one)) ++
              (u32_le args.(two)) ++
              (u32_le args.(three)) ++
              (u64_le args.(four)) ++
              (u64_le args.(five)) ++
              (u64_le args.(six)).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_struct" ∷ ⌜ args__v = (#args__c.(one), (#args__c.(two), (#args__c.(three), (#args__c.(four), (#args__c.(five), (#args__c.(six), #()))))))%V ⌝.

Definition to_val' (c : C) : val :=
  (#c.(one), (#c.(two), (#c.(three), (#c.(four), (#c.(five), (#c.(six), #())))))).

Definition from_val' (v : val) : option C :=
  match v with
  | (#(LitInt32 one), (#(LitInt32 two), (#(LitInt32 three), (#(LitInt four), (#(LitInt five), (#(LitInt six), #()))))))%V =>
    Some (mkC one two three four five six)
  | _ => None
  end.

#[global]
Instance completeInt_into_val : IntoVal C.
Proof.
  refine {|
    to_val := to_val';
    from_val := from_val';
    IntoVal_def := (mkC (W32 0) (W32 0) (W32 0) (W64 0) (W64 0) (W64 0))
  |}.
  intros v. 
  destruct v as [one two three four five six]; done.
Defined.

#[global]
Instance completeInt_into_val_for_type : IntoValForType C (struct.t S).
Proof. constructor; auto 10. Defined.

Lemma own_to_val (v : val) (c : C) (dq : dfrac) :
  own v c dq -∗ own v c dq ∗ ⌜ v = to_val c ⌝.
Proof.
  iIntros "%Hown_struct".
  
  iUnfold own.
  iSplitL.
  + iPureIntro. done.
  + iPureIntro. done.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    completeint_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_load. wp_apply (wp_WriteInt32 with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt32 with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt32 with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    completeint_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__one) "Hone". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__two) "Htwo". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__three) "Hthree". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__four) "Hfour". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__five) "Hfive". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__six) "Hsix". wp_pures.
  
  rewrite Henc. rewrite -?app_assoc.

  wp_load. wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl".
  wp_pures. wp_store. wp_store.

  wp_load. wp_load. wp_load. wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End completeInt.
End completeInt.

--- End: testdata/out/coq/completeint_proof.v ---
--- Start: testdata/out/go/completeint_gk/completeint_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeint_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	One   uint32
	Two   uint32
	Three uint32
	Four  uint64
	Five  uint64
	Six   uint64
}

func Marshal(c S, prefix []byte) []byte {
	var enc = prefix

	enc = marshal.WriteInt32(enc, c.One)
	enc = marshal.WriteInt32(enc, c.Two)
	enc = marshal.WriteInt32(enc, c.Three)
	enc = marshal.WriteInt(enc, c.Four)
	enc = marshal.WriteInt(enc, c.Five)
	enc = marshal.WriteInt(enc, c.Six)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {
	var enc = s // Needed for goose compatibility
	var one uint32
	var two uint32
	var three uint32
	var four uint64
	var five uint64
	var six uint64

	one, enc = marshal.ReadInt32(enc)
	two, enc = marshal.ReadInt32(enc)
	three, enc = marshal.ReadInt32(enc)
	four, enc = marshal.ReadInt(enc)
	five, enc = marshal.ReadInt(enc)
	six, enc = marshal.ReadInt(enc)

	return S{
		One:   one,
		Two:   two,
		Three: three,
		Four:  four,
		Five:  five,
		Six:   six,
	}, enc
}
--- End: testdata/out/go/completeint_gk/completeint_gk.go ---
--- Begin: testdata/out/coq/completeslice_proof.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.

Module completeSlice.
Section completeSlice.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        strg : string;
        bytes : list u8;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le $ length $ string_to_bytes args.(strg)) ++ string_to_bytes args.(strg) ++
              (u64_le $ length $ args.(bytes)) ++ args.(bytes).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (bytes_sl : Slice.t), 
  "%Hown_struct" ∷ ⌜ args__v = (#(str args__c.(strg)), (slice_val bytes_sl, #()))%V ⌝ ∗
  "Hown_bytes" ∷ own_slice_small bytes_sl byteT dq args__c.(bytes).

Definition to_val' (c : C) : val :=
  (#(str c.(strg)), (#(slice_val c.(bytes)), #())).

Definition from_val' (v : val) : option C :=
  match v with
  | (#(LitString strg), (#(LitBytes bytes), #()))%V =>
    Some (mkC strg bytes)
  | _ => None
  end.

#[global]
Instance completeSlice_into_val : IntoVal C.
Proof.
  refine {|
    to_val := to_val';
    from_val := from_val';
    IntoVal_def := (mkC "" [])
  |}.
  intros v. 
  destruct v as [strg bytes]; done.
Defined.

#[global]
Instance completeSlice_into_val_for_type : IntoValForType C (struct.t S).
Proof. constructor; auto 10. Defined.

Lemma own_to_val (v : val) (c : C) (dq : dfrac) :
  own v c dq -∗ own v c dq ∗ ⌜ v = to_val c ⌝.
Proof.
  iIntros "%Hown_struct".
  
  iUnfold own.
  iSplitL.
  + iPureIntro. done.
  + iPureIntro. done.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    completeslice_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_apply wp_StringToBytes. iIntros (?) "Hargs_strg_enc". wp_pures.
  wp_apply (wp_slice_len).
  iDestruct (own_slice_sz with "Hargs_strg_enc") as "%Hargs_strg_sz".
  iApply own_slice_to_small in "Hargs_strg_enc".
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_load. wp_apply (wp_WriteBytes with "[$Hsl $Hargs_strg_enc]").
  iIntros (?) "[Hsl _]". wp_store.

  iDestruct (own_slice_small_sz with "Hargs_bytes_sl") as "%Hargs_bytes_sz".
  wp_loadField. wp_apply wp_slice_len. wp_load.
  wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.

  wp_loadField. wp_load.
  wp_apply (wp_WriteBytes with "[$Hsl $Hargs_bytes_sl]").
  iIntros (?) "[Hsl Hargs_bytes_sl]". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  
  rewrite ?string_bytes_length.
  rewrite Hargs_strg_sz.
  rewrite Hargs_bytes_sz.
  rewrite ?w64_to_nat_id. exact.

Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    completeslice_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__strg) "Hstrg". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__bytes) "Hbytes". wp_pures.
  
  rewrite Henc. rewrite -?app_assoc.

  wp_apply wp_ref_of_zero; first done. iIntros (strgLen) "HstrgLen". wp_pures.
  wp_apply wp_ref_of_zero; first done. iIntros (strgBytes) "HstrgBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hstrg_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hstrg_sz. word. }
  iIntros (??) "[Hstrg' Hsl]".

  wp_pures. wp_store. wp_store. wp_load.
  iApply own_slice_to_small in "Hstrg'".
  wp_apply (wp_StringFromBytes with "[$Hstrg']"). iIntros "_".
  wp_store.

  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HbytesLen". iApply array_singleton in "HbytesLen". wp_pures.
  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "Hbytes". iApply array_singleton in "Hbytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hbytes_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hbytes_sz. word. }
  iIntros (??) "[Hbytes' Hsl]". iApply own_slice_to_small in "Hbytes'".

  wp_pures. wp_store. wp_store. wp_load. wp_storeField.

  wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End completeSlice.
End completeSlice.

--- End: testdata/out/coq/completeslice_proof.v ---
--- Start: testdata/out/go/completeslice_gk/completeslice_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeslice_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	Strg  string
	Bytes []byte
}

func Marshal(c S, prefix []byte) []byte {
	var enc = prefix

	strgBytes := []byte(c.Strg)
	enc = marshal.WriteInt(enc, uint64(len(strgBytes)))
	enc = marshal.WriteBytes(enc, strgBytes)
	enc = marshal.WriteBytes(enc, c.Bytes)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {
	var enc = s // Needed for goose compatibility
	var strg string
	var bytes []byte

	var strgLen uint64
	var strgBytes []byte
	strgLen, enc = marshal.ReadInt(enc)
	strgBytes, enc = marshal.ReadBytesCopy(enc, strgLen)
	strg = string(strgBytes)
	var bytesLen uint64
	var bytesBytes []byte
	bytesLen, enc = marshal.ReadInt(enc)
	bytesBytes, enc = marshal.ReadBytesCopy(enc, bytesLen)
	bytes = bytesBytes

	return S{
		Strg:  strg,
		Bytes: bytes,
	}, enc
}
--- End: testdata/out/go/completeslice_gk/completeslice_gk.go ---
--- Begin: testdata/out/coq/complete_proof.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From Grackle.test Require Import completeint_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Grackle.test Require Import completeslice_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.

Module complete.
Section complete.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        int : completeInt.C;
        slc : completeSlice.C;
        success : bool;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (int_enc slc_enc : list u8), 
  encoded = int_enc ++
              slc_enc ++
              [if args.(success) then W8 1 else W8 0]
  /\ completeInt.has_encoding int_enc args.(int)
  /\ completeSlice.has_encoding slc_enc args.(slc).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (int__v slc__v : val) , 
  "%Hown_struct" ∷ ⌜ args__v = (completeInt.to_val' args__c.(int), (completeSlice.to_val' args__c.(slc), (#args__c.(success), #())))%V ⌝ ∗
  "Hown_int" ∷ completeInt.own int__v args__c.(int) dq ∗
  "Hown_slc" ∷ completeSlice.own slc__v args__c.(slc) dq.

Definition to_val' (c : C) : val :=
  (completeInt.to_val' c.(int), (completeSlice.to_val' c.(slc), (#c.(success), #()))).

Definition from_val' (v : val) : option C :=
  match v with
  | (int, (slc, (#(LitBool success), #())))%V =>
    match completeInt.from_val' int with
    | Some int =>
        match completeSlice.from_val' slc with
        | Some slc =>
            Some (mkC int slc success)
        | None => None
        end
    | None => None
    end
  | _ => None
  end.

#[global]
Instance complete_into_val : IntoVal C.
Proof.
  refine {|
    to_val := to_val';
    from_val := from_val';
    IntoVal_def := (mkC (IntoVal_def completeInt.C) (IntoVal_def completeSlice.C) false)
  |}.
  intros v. 
  destruct v as [[int_one int_two int_three int_four int_five int_six] [slc_strg slc_bytes] success]; done.
Defined.

#[global]
Instance complete_into_val_for_type : IntoValForType C (struct.t S).
Proof. constructor; auto 10. Defined.

Lemma own_to_val (v : val) (c : C) (dq : dfrac) :
  own v c dq -∗ own v c dq ∗ ⌜ v = to_val c ⌝.
Proof.
  iIntros "Hown". iNamed "Hown".
  
  iApply (completeInt.own_to_val) in "Hown_int".
  iDestruct "Hown_int" as "[Hown_int %Hval_int]".
  
  iApply (completeSlice.own_to_val) in "Hown_slc".
  iDestruct "Hown_slc" as "[Hown_slc %Hval_slc]".
  
  iUnfold own.
  iSplitL.
  + iExists int__v, slc__v. iFrame.
    iPureIntro. done.
  + rewrite Hown_struct.
    rewrite Hval_int.
    rewrite Hval_slc.
    iPureIntro. done.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    complete_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_load. wp_apply (completeInt.wp_Encode with "[$Hargs_int_enc $Hsl]").
  iIntros (int_enc int_sl) "(%Hargs_int_enc & Hsl & Hargs_int_own)".
  wp_store.

  wp_load. wp_apply (completeSlice.wp_Encode with "[$Hargs_slc_enc $Hsl]").
  iIntros (slc_enc slc_sl) "(%Hargs_slc_enc & Hsl & Hargs_slc_own)".
  wp_store.

  wp_loadField. wp_load. wp_apply (wp_WriteBool with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  exists int_enc, slc_enc. 
  rewrite ?string_bytes_length.
  rewrite ?w64_to_nat_id. exact.
  
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    complete_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__int) "Hint". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slc) "Hslc". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__success) "Hsuccess". wp_pures.
  
  unfold has_encoding in Henc.
  destruct Henc as ( int_sl & slc_sl & Henc & Hencoding_int & Hencoding_slc ).
  rewrite Henc. rewrite -?app_assoc.

  wp_load. wp_apply (completeInt.wp_Decode int_sl with "[$Hsl //]").
  iIntros (int__v ?) "[Hown_int Hsl]".
  iApply (completeInt.own_to_val) in "Hown_int".
  iDestruct "Hown_int" as "[Hown_int %Hval_int]".
  rewrite Hval_int.
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (completeSlice.wp_Decode slc_sl with "[$Hsl //]").
  iIntros (slc__v ?) "[Hown_slc Hsl]".
  iApply (completeSlice.own_to_val) in "Hown_slc".
  iDestruct "Hown_slc" as "[Hown_slc %Hval_slc]".
  rewrite Hval_slc.
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadBool with "[Hsl]").
  { simpl. iFrame. }
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args.(success)) as Hargs_success.
  { destruct args.(success); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success.
  wp_pures. wp_storeField. wp_store.

  wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End complete.
End complete.

--- End: testdata/out/coq/complete_proof.v ---
--- Start: testdata/out/go/complete_gk/complete_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package complete_gk

import (
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/completeint_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk"
)

type S struct {
	Int     completeint_gk.S
	Slc     completeslice_gk.S
	Success bool
}

func Marshal(c S, prefix []byte) []byte {
	var enc = prefix

	enc = completeint_gk.Marshal(c.Int, enc)
	enc = completeslice_gk.Marshal(c.Slc, enc)
	enc = marshal.WriteBool(enc, c.Success)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {
	var enc = s // Needed for goose compatibility
	var int completeint_gk.S
	var slc completeslice_gk.S
	var success bool

	int, enc = completeint_gk.Unmarshal(enc)
	slc, enc = completeslice_gk.Unmarshal(enc)
	success, enc = marshal.ReadBool(enc)

	return S{
		Int:     int,
		Slc:     slc,
		Success: success,
	}, enc
}
--- End: testdata/out/go/complete_gk/complete_gk.go ---
