--- Start: testdata/out/go/error_gk/error_gk.go ---
package error

type E uint32

const (
	eOk        E = 0
	eEndOfFile E = 1
	eUnknown   E = 2
)

var Name = map[uint32]string{
	0: "eOk",
	1: "eEndOfFile",
	2: "eUnknown",
}

var Value = map[string]uint32{
	"eOk":        0,
	"eEndOfFile": 1,
	"eUnknown":   2,
}

func (e E) Enum() *E {
	n := new(E)
	*n = e
	return n
}

func (e E) String() string {
	return Name[uint32(e)]
}
--- End: testdata/out/go/error_gk/error_gk.go ---
--- Begin: testdata/out/coq/completeint_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module completeInt_gk.
Section completeInt_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit completeint_gk :=
  ltac2:(build_pkg_init ()).

Definition has_encoding (encoded:list u8) (args:completeint_gk.S.t) : Prop :=
  encoded = (u32_le args.(completeint_gk.S.One')) ++
              (u32_le args.(completeint_gk.S.Two')) ++
              (u32_le args.(completeint_gk.S.Three')) ++
              (u64_le args.(completeint_gk.S.Four')) ++
              (u64_le args.(completeint_gk.S.Five')) ++
              (u64_le args.(completeint_gk.S.Six')).

Lemma wp_Encode (args__c : completeint_gk.S.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeint_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    completeint_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  wp_start as "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.


  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : completeint_gk.S.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeint_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    completeint_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, #suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  replace {|
    completeint_gk.S.One' := args__c.(completeint_gk.S.One');
    completeint_gk.S.Two' := args__c.(completeint_gk.S.Two');
    completeint_gk.S.Three' := args__c.(completeint_gk.S.Three');
    completeint_gk.S.Four' := args__c.(completeint_gk.S.Four');
    completeint_gk.S.Five' := args__c.(completeint_gk.S.Five');
    completeint_gk.S.Six' := args__c.(completeint_gk.S.Six')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
Qed.

End completeInt_gk.
End completeInt_gk.

--- End: testdata/out/coq/completeint_proof_gk.v ---
--- Start: testdata/out/go/completeint_gk/completeint_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeint_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	One   uint32
	Two   uint32
	Three uint32
	Four  uint64
	Five  uint64
	Six   uint64
}

func Marshal(enc []byte, c S) []byte {
	enc = marshal.WriteInt32(enc, c.One)
	enc = marshal.WriteInt32(enc, c.Two)
	enc = marshal.WriteInt32(enc, c.Three)
	enc = marshal.WriteInt(enc, c.Four)
	enc = marshal.WriteInt(enc, c.Five)
	enc = marshal.WriteInt(enc, c.Six)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	one, s := marshal.ReadInt32(s)
	two, s := marshal.ReadInt32(s)
	three, s := marshal.ReadInt32(s)
	four, s := marshal.ReadInt(s)
	five, s := marshal.ReadInt(s)
	six, s := marshal.ReadInt(s)

	return S{
		One:   one,
		Two:   two,
		Three: three,
		Four:  four,
		Five:  five,
		Six:   six,
	}, s
}
--- End: testdata/out/go/completeint_gk/completeint_gk.go ---
--- Begin: testdata/out/coq/completeslice_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.

Module completeSlice_gk.
Section completeSlice_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit completeslice_gk :=
  ltac2:(build_pkg_init ()).

Definition has_encoding (encoded:list u8) (args:completeslice_gk.S.t) : Prop :=
  encoded = (u64_le $ length $ args.(completeslice_gk.S.Strg')) ++ args.(completeslice_gk.S.Strg') ++
              (u64_le $ length $ args.(completeslice_gk.S.Strg2')) ++ args.(completeslice_gk.S.Strg2') ++
              (u64_le $ length $ args.(completeslice_gk.S.Bytes')) ++ args.(completeslice_gk.S.Bytes') ++
              (u64_le $ length $ args.(completeslice_gk.S.Bytes2')) ++ args.(completeslice_gk.S.Bytes2')
  /\ length args.(completeslice_gk.S.Strg') < 2^64
  /\ length args.(completeslice_gk.S.Strg2') < 2^64
  /\ length args.(completeslice_gk.S.Bytes') < 2^64
  /\ length args.(completeslice_gk.S.Bytes2') < 2^64.

Lemma wp_Encode (args__c : completeslice_gk.S.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  length args__c.(completeslice_gk.S.Strg') < 2^64 ->
  length args__c.(completeslice_gk.S.Strg2') < 2^64 ->
  length args__c.(completeslice_gk.S.Bytes') < 2^64 ->
  length args__c.(completeslice_gk.S.Bytes2') < 2^64 ->
  {{{
        is_pkg_init completeslice_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    completeslice_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  intros HstrglenHstrg2lenHbyteslenHbytes2len.
  wp_start as "[Hsl Hcap]". wp_auto.

  wp_apply wp_StringToBytes. iIntros (?) "HstrgBytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $HstrgBytes]").
  iIntros (?) "(Hsl & Hcap & HstrgBytes)". wp_auto.

  wp_apply wp_StringToBytes. iIntros (?) "Hstrg2Bytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $Hstrg2Bytes]").
  iIntros (?) "(Hsl & Hcap & Hstrg2Bytes)". wp_auto.

  iDestruct (own_slice_small_sz with "Hown_bytes") as "%Hargs_bytes_sz".
  wp_pures. wp_apply (wp_slice_len). wp_load.
  wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_pures. wp_load.
  wp_apply (wp_WriteBytes with "[$Hsl $Hown_bytes]").
  iIntros (?) "[Hsl Hargs_bytes_sl]". wp_store.

  iDestruct (own_slice_small_sz with "Hown_bytes2") as "%Hargs_bytes2_sz".
  wp_pures. wp_apply (wp_slice_len). wp_load.
  wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_pures. wp_load.
  wp_apply (wp_WriteBytes with "[$Hsl $Hown_bytes2]").
  iIntros (?) "[Hsl Hargs_bytes2_sl]". wp_store.


  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  
  rewrite ?string_bytes_length.
  rewrite Hargs_strg_sz.
  rewrite Hargs_strg2_sz.
  rewrite Hargs_bytes_sz.
  rewrite Hargs_bytes2_sz.
  rewrite ?w64_to_nat_id.

  done.
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : completeslice_gk.S.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeslice_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    completeslice_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, #suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (& Henc & Hlen_strg & Hlen_strg2 ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hstrg_byt Hsl]". wp_auto.
  wp_apply (wp_StringFromBytes with "[$Hstrg_byt]").
  iIntros "Hstrg_byt". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hstrg2_byt Hsl]". wp_auto.
  wp_apply (wp_StringFromBytes with "[$Hstrg2_byt]").
  iIntros "Hstrg2_byt". wp_auto.

  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HbytesLen". iApply array_singleton in "HbytesLen". wp_pures.
  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HbytesBytes". iApply array_singleton in "HbytesBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hbytes_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hbytes_sz. word. }
  iIntros (??) "[Hbytes' Hsl]". iApply own_slice_to_small in "Hbytes'".

  wp_pures. wp_store. wp_store. wp_load. wp_store.

  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "Hbytes2Len". iApply array_singleton in "Hbytes2Len". wp_pures.
  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "Hbytes2Bytes". iApply array_singleton in "Hbytes2Bytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hbytes2_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hbytes2_sz. word. }
  iIntros (??) "[Hbytes2' Hsl]". iApply own_slice_to_small in "Hbytes2'".

  wp_pures. wp_store. wp_store. wp_load. wp_store.

  replace {|
    completeslice_gk.S.Strg' := args__c.(completeslice_gk.S.Strg');
    completeslice_gk.S.Strg2' := args__c.(completeslice_gk.S.Strg2');
    completeslice_gk.S.Bytes' := args__c.(completeslice_gk.S.Bytes');
    completeslice_gk.S.Bytes2' := args__c.(completeslice_gk.S.Bytes2')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
Qed.

End completeSlice_gk.
End completeSlice_gk.

--- End: testdata/out/coq/completeslice_proof_gk.v ---
--- Start: testdata/out/go/completeslice_gk/completeslice_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeslice_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	Strg   string
	Strg2  string
	Bytes  []byte
	Bytes2 []byte
}

func Marshal(enc []byte, c S) []byte {
	enc = marshal.WriteLenPrefixedBytes(enc, []byte(c.Strg))
	enc = marshal.WriteLenPrefixedBytes(enc, []byte(c.Strg2))
	enc = marshal.WriteInt(enc, uint64(len(c.Bytes)))
	enc = marshal.WriteBytes(enc, c.Bytes)
	enc = marshal.WriteInt(enc, uint64(len(c.Bytes2)))
	enc = marshal.WriteBytes(enc, c.Bytes2)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	strgBytes, s := marshal.ReadLenPrefixedBytes(s)
	strg := string(strgBytes)
	strg2Bytes, s := marshal.ReadLenPrefixedBytes(s)
	strg2 := string(strg2Bytes)
	bytesBytes, s := marshal.ReadLenPrefixedBytes(s)
	bytes := bytesBytes
	bytes2Bytes, s := marshal.ReadLenPrefixedBytes(s)
	bytes2 := bytes2Bytes

	return S{
		Strg:   strg,
		Strg2:  strg2,
		Bytes:  bytes,
		Bytes2: bytes2,
	}, s
}
--- End: testdata/out/go/completeslice_gk/completeslice_gk.go ---
--- Begin: testdata/out/coq/structslice_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module structSlice_gk.
Section structSlice_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit structslice_gk :=
  ltac2:(build_pkg_init ()).

Definition has_encoding (encoded:list u8) (args:structslice_gk.S.t) : Prop :=
  ∃ (slices_enc ints_enc : list u8), 
  encoded = (u64_le $ length $ args.(structslice_gk.S.Slices')) ++ slices_enc ++
              (u64_le $ length $ args.(structslice_gk.S.Ints')) ++ ints_enc
  /\ completeSlice_gk.has_encoding slices_enc args.(structslice_gk.S.Slices')
  /\ completeInt_gk.has_encoding ints_enc args.(structslice_gk.S.Ints').

Lemma wp_Encode (args__c : structslice_gk.S.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    structslice_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  wp_start as "[Hsl Hcap]". wp_auto.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(slices) completeSlice.has_encoding completeSlice.own with "[Hown_slices Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (completeSlice.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (slices_enc slices_sl') "(Hpsl_slices & %Henc_slices & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(ints) completeInt.has_encoding completeInt.own with "[Hown_ints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (completeInt.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (ints_enc ints_sl') "(Hpsl_ints & %Henc_ints & Hsl)".
  wp_pures. wp_store.


  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  exists slices_enc, ints_enc. 
  split; first reflexivity.
  repeat split.
  all: word || done.
  
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : structslice_gk.S.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    structslice_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, #suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as ( slices_enc & ints_enc & Henc & Henc_slices & Hslices_sz & Henc_ints & Hints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slicesLen) "HslicesLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ completeSlice.has_encoding completeSlice.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply completeSlice.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (completeSlice.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_slices Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__intsLen) "HintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ completeInt.has_encoding completeInt.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply completeInt.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (completeInt.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_ints Hsl]".
  wp_pures. wp_store. wp_store.

  replace {|
    structslice_gk.S.Slices' := args__c.(structslice_gk.S.Slices');
    structslice_gk.S.Ints' := args__c.(structslice_gk.S.Ints')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
Qed.

End structSlice_gk.
End structSlice_gk.

--- End: testdata/out/coq/structslice_proof_gk.v ---
--- Start: testdata/out/go/structslice_gk/structslice_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package structslice_gk

import (
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/completeint_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk"
)

type S struct {
	Slices []completeslice_gk.S
	Ints   []completeint_gk.S
}

func Marshal(enc []byte, s S) []byte {

	enc = marshal.WriteInt(enc, uint64(len(s.Slices)))
	enc = marshal.WriteSlice[completeslice_gk.S](enc, s.Slices, completeslice_gk.Marshal)

	enc = marshal.WriteInt(enc, uint64(len(s.Ints)))
	enc = marshal.WriteSlice[completeint_gk.S](enc, s.Ints, completeint_gk.Marshal)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	slicesLen, s := marshal.ReadInt(s)
	slices, s := marshal.ReadSlice[completeslice_gk.S](s, slicesLen, completeslice_gk.Unmarshal)
	intsLen, s := marshal.ReadInt(s)
	ints, s := marshal.ReadSlice[completeint_gk.S](s, intsLen, completeint_gk.Unmarshal)

	return S{
		Slices: slices,
		Ints:   ints,
	}, s
}
--- End: testdata/out/go/structslice_gk/structslice_gk.go ---
--- Begin: testdata/out/coq/complete_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import structslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.

Module complete_gk.
Section complete_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit complete_gk :=
  ltac2:(build_pkg_init ()).

Definition has_encoding (encoded:list u8) (args:complete_gk.S.t) : Prop :=
  ∃ (int_enc slc_enc sslice_enc iints_enc sints_enc : list u8), 
  encoded = int_enc ++
              slc_enc ++
              [if args.(complete_gk.S.Success') then W8 1 else W8 0] ++
              (u64_le $ length $ args.(complete_gk.S.Sslice')) ++ sslice_enc ++
              (u64_le $ length $ args.(complete_gk.S.Iints')) ++ iints_enc ++
              (u64_le $ length $ args.(complete_gk.S.Sints')) ++ sints_enc
  /\ completeInt_gk.has_encoding int_enc args.(complete_gk.S.Int')
  /\ completeSlice_gk.has_encoding slc_enc args.(complete_gk.S.Slc')
  /\ structSlice_gk.has_encoding sslice_enc args.(complete_gk.S.Sslice').

Lemma wp_Encode (args__c : complete_gk.S.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    complete_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  wp_start as "[Hsl Hcap]". wp_auto.

  wp_apply (completeInt_gk.wp_Encode with "[$Hsl $Hcap]"); first trivial.
  iIntros (int_enc ?) "(%Hargs_int_enc & Hsl & Hcap)". wp_auto.

  wp_apply (completeSlice_gk.wp_Encode with "[$Hsl $Hcap]"); first trivial.
  iIntros (slc_enc ?) "(%Hargs_slc_enc & Hsl & Hcap)". wp_auto.

  wp_load. wp_apply (wp_WriteBool with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(sslice) structSlice.has_encoding structSlice.own with "[Hown_sslice Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (structSlice.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (sslice_enc sslice_sl') "(Hpsl_sslice & %Henc_sslice & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(iints) uint64_has_encoding own_val with "[Hown_iints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (iints_enc iints_sl') "(Hpsl_iints & %Henc_iints & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(sints) uint32_has_encoding own_val with "[Hown_sints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt32 with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (sints_enc sints_sl') "(Hpsl_sints & %Henc_sints & Hsl)".
  wp_pures. wp_store.


  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  exists int_enc, slc_enc, sslice_enc, iints_enc, sints_enc. 
  split; first reflexivity.
  repeat split.
  all: word || done.
  
  
  
  
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : complete_gk.S.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    complete_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, #suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as ( int_enc & slc_enc & sslice_enc & iints_enc & sints_enc & Henc & Henc_int & Henc_slc & Henc_sslice & Hsslice_sz & Henc_iints & Hiints_sz & Henc_sints & Hsints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (completeInt_gk.wp_Decode int_enc with "[$Hsl]"); first done.
  iIntros (int__v) "Hsl". wp_auto.

  wp_apply (completeSlice_gk.wp_Decode slc_enc with "[$Hsl]"); first done.
  iIntros (slc__v) "Hsl". wp_auto.

  wp_load. wp_apply (wp_ReadBool with "[Hsl]").
  { simpl. iFrame. }
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args__c.(success)) as Hargs_success.
  { destruct args__c.(success); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success.
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__ssliceLen) "HssliceLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ structSlice.has_encoding structSlice.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply structSlice.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (structSlice.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_sslice Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__iintsLen) "HiintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ uint64_has_encoding own_val with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x. iPureIntro. by val_ty.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    iUnfold uint64_has_encoding in "Henc'".
    iDestruct "Henc'" as "%Henc_x".
    rewrite Henc_x.
    wp_apply (wp_ReadInt with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (??) "[Hpsl_iints Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__sintsLen) "HsintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ uint32_has_encoding own_val with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x. iPureIntro. by val_ty.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    iUnfold uint32_has_encoding in "Henc'".
    iDestruct "Henc'" as "%Henc_x".
    rewrite Henc_x.
    wp_apply (wp_ReadInt32 with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (??) "[Hpsl_sints Hsl]".
  wp_pures. wp_store. wp_store.

  replace {|
    complete_gk.S.Int' := args__c.(complete_gk.S.Int');
    complete_gk.S.Slc' := args__c.(complete_gk.S.Slc');
    complete_gk.S.Success' := args__c.(complete_gk.S.Success');
    complete_gk.S.Sslice' := args__c.(complete_gk.S.Sslice');
    complete_gk.S.Iints' := args__c.(complete_gk.S.Iints');
    complete_gk.S.Sints' := args__c.(complete_gk.S.Sints')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
Qed.

End complete_gk.
End complete_gk.

--- End: testdata/out/coq/complete_proof_gk.v ---
--- Start: testdata/out/go/complete_gk/complete_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package complete_gk

import (
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/completeint_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/structslice_gk"
)

type S struct {
	Int     completeint_gk.S
	Slc     completeslice_gk.S
	Success bool
	Sslice  []structslice_gk.S
	Iints   []uint64
	Sints   []uint32
}

func Marshal(enc []byte, c S) []byte {
	enc = completeint_gk.Marshal(enc, c.Int)
	enc = completeslice_gk.Marshal(enc, c.Slc)
	enc = marshal.WriteBool(enc, c.Success)

	enc = marshal.WriteInt(enc, uint64(len(c.Sslice)))
	enc = marshal.WriteSlice[structslice_gk.S](enc, c.Sslice, structslice_gk.Marshal)

	enc = marshal.WriteInt(enc, uint64(len(c.Iints)))
	enc = marshal.WriteSlice[uint64](enc, c.Iints, marshal.WriteInt)

	enc = marshal.WriteInt(enc, uint64(len(c.Sints)))
	enc = marshal.WriteSlice[uint32](enc, c.Sints, marshal.WriteInt32)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	int, s := completeint_gk.Unmarshal(s)
	slc, s := completeslice_gk.Unmarshal(s)
	success, s := marshal.ReadBool(s)
	ssliceLen, s := marshal.ReadInt(s)
	sslice, s := marshal.ReadSlice[structslice_gk.S](s, ssliceLen, structslice_gk.Unmarshal)
	iintsLen, s := marshal.ReadInt(s)
	iints, s := marshal.ReadSlice[uint64](s, iintsLen, marshal.ReadInt)
	sintsLen, s := marshal.ReadInt(s)
	sints, s := marshal.ReadSlice[uint32](s, sintsLen, marshal.ReadInt32)

	return S{
		Int:     int,
		Slc:     slc,
		Success: success,
		Sslice:  sslice,
		Iints:   iints,
		Sints:   sints,
	}, s
}
--- End: testdata/out/go/complete_gk/complete_gk.go ---
