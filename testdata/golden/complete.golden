--- Begin: testdata/out/coq/error_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.error_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.error_gk.

Module error_gk.
Section error_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition name_map : gmap w32 go_string := list_to_map [
                                                ((W32 0), "eOk"%go);
                                                ((W32 1), "eEndOfFile"%go);
                                                ((W32 2), "eUnknown"%go)
                                              ].
Definition value_map : gmap go_string w32 := list_to_map [
                                                 ("eOk"%go, (W32 0));
                                                 ("eEndOfFile"%go, (W32 1));
                                                 ("eUnknown"%go, (W32 2))
                                               ].

Definition own_initialized `{!error_gk.GlobalAddrs} : iProp Σ :=
  "HglobalName" ∷ error_gk.Name ↦${DfracDiscarded} name_map ∗
  "HglobalValue" ∷ error_gk.Value ↦${DfracDiscarded} value_map.

Inductive I :=
| eOk
| eEndOfFile
| eUnknown.

Definition to_tag i : w32 :=
  match i with
  | eOk => W32 0
  | eEndOfFile => W32 1
  | eUnknown => W32 2
  end.

End error_gk.
End error_gk.
--- End: testdata/out/coq/error_proof_gk.v ---
--- Start: testdata/out/go/error_gk/error_gk.go ---
package error_gk

type E uint32

const (
	EOk        E = 0
	EEndOfFile E = 1
	EUnknown   E = 2
)

var Name = map[uint32]string{
	0: "eOk",
	1: "eEndOfFile",
	2: "eUnknown",
}

var Value = map[string]uint32{
	"eOk":        0,
	"eEndOfFile": 1,
	"eUnknown":   2,
}

func (e E) String() string {
	return Name[uint32(e)]
}
--- End: testdata/out/go/error_gk/error_gk.go ---
--- Begin: testdata/out/coq/completeint_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module completeInt_gk.
Section completeInt_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit completeint_gk :=
  ltac2:(build_pkg_init ()).

Definition C := completeint_gk.S.t.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u32_le args.(completeint_gk.S.One')) ++
              (u32_le args.(completeint_gk.S.Two')) ++
              (u32_le args.(completeint_gk.S.Three')) ++
              (u64_le args.(completeint_gk.S.Four')) ++
              (u64_le args.(completeint_gk.S.Five')) ++
              (u64_le args.(completeint_gk.S.Six')).

Definition own (args__v: completeint_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_one" ∷ ⌜ args__v.(completeint_gk.S.One') = args__c.(completeint_gk.S.One') ⌝ ∗
  "%Hown_two" ∷ ⌜ args__v.(completeint_gk.S.Two') = args__c.(completeint_gk.S.Two') ⌝ ∗
  "%Hown_three" ∷ ⌜ args__v.(completeint_gk.S.Three') = args__c.(completeint_gk.S.Three') ⌝ ∗
  "%Hown_four" ∷ ⌜ args__v.(completeint_gk.S.Four') = args__c.(completeint_gk.S.Four') ⌝ ∗
  "%Hown_five" ∷ ⌜ args__v.(completeint_gk.S.Five') = args__c.(completeint_gk.S.Five') ⌝ ∗
  "%Hown_six" ∷ ⌜ args__v.(completeint_gk.S.Six') = args__c.(completeint_gk.S.Six') ⌝.

Lemma wp_Encode (args__t : completeint_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeint_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    completeint_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  
  congruence. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeint_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    completeint_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  iApply "HΦ". iFrame.
  done.
Qed.

End completeInt_gk.
End completeInt_gk.

--- End: testdata/out/coq/completeint_proof_gk.v ---
--- Start: testdata/out/go/completeint_gk/completeint_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeint_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	One   uint32
	Two   uint32
	Three uint32
	Four  uint64
	Five  uint64
	Six   uint64
}

func Marshal(enc []byte, c S) []byte {
	enc = marshal.WriteInt32(enc, c.One)
	enc = marshal.WriteInt32(enc, c.Two)
	enc = marshal.WriteInt32(enc, c.Three)
	enc = marshal.WriteInt(enc, c.Four)
	enc = marshal.WriteInt(enc, c.Five)
	enc = marshal.WriteInt(enc, c.Six)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	one, s := marshal.ReadInt32(s)
	two, s := marshal.ReadInt32(s)
	three, s := marshal.ReadInt32(s)
	four, s := marshal.ReadInt(s)
	five, s := marshal.ReadInt(s)
	six, s := marshal.ReadInt(s)

	return S{
		One:   one,
		Two:   two,
		Three: three,
		Four:  four,
		Five:  five,
		Six:   six,
	}, s
}
--- End: testdata/out/go/completeint_gk/completeint_gk.go ---
--- Begin: testdata/out/coq/completeslice_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.primitive.
From New.proof Require Import github_com.goose_lang.std.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.

Module completeSlice_gk.
Section completeSlice_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit completeslice_gk :=
  ltac2:(build_pkg_init ()).

Record C :=
    mkC {
        strg' :  go_string;
        strg2' :  go_string;
        bytes' : list u8;
        bytes2' : list u8;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le $ length $ args.(strg')) ++ args.(strg') ++
              (u64_le $ length $ args.(strg2')) ++ args.(strg2') ++
              (u64_le $ length $ args.(bytes')) ++ args.(bytes') ++
              (u64_le $ length $ args.(bytes2')) ++ args.(bytes2')
  /\ length args.(strg') < 2^64
  /\ length args.(strg2') < 2^64
  /\ length args.(bytes') < 2^64
  /\ length args.(bytes2') < 2^64.

Definition own (args__v: completeslice_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_strg" ∷ ⌜ args__v.(completeslice_gk.S.Strg') = args__c.(strg') ⌝ ∗
  "%Hown_strg_len" ∷ ⌜ length args__c.(strg') < 2^64 ⌝ ∗
  "%Hown_strg2" ∷ ⌜ args__v.(completeslice_gk.S.Strg2') = args__c.(strg2') ⌝ ∗
  "%Hown_strg2_len" ∷ ⌜ length args__c.(strg2') < 2^64 ⌝ ∗
  "Hown_bytes" ∷ own_slice args__v.(completeslice_gk.S.Bytes') dq args__c.(bytes') ∗
  "%Hown_bytes_len" ∷ ⌜ length args__c.(bytes') < 2^64 ⌝ ∗
  "Hown_bytes2" ∷ own_slice args__v.(completeslice_gk.S.Bytes2') dq args__c.(bytes2') ∗
  "%Hown_bytes2_len" ∷ ⌜ length args__c.(bytes2') < 2^64 ⌝.

Lemma wp_Encode (args__t : completeslice_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeslice_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    completeslice_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%HstrgLen". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "HstrgBytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $HstrgBytes]").
  iIntros (?) "(Hsl & Hcap & HstrgBytes)". wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%Hstrg2Len". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "Hstrg2Bytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $Hstrg2Bytes]").
  iIntros (?) "(Hsl & Hcap & Hstrg2Bytes)". wp_auto.

  iDestruct (own_slice_len with "Hown_bytes") as "%Hown_bytes_sz".
  wp_apply (wp_WriteInt with "[$Hsl $Hcap]"). iIntros (?) "[Hsl Hcap]". wp_auto.
  wp_apply (wp_WriteBytes with "[$Hsl $Hcap $Hown_bytes]").
  iIntros (?) "(Hsl & Hcap & Hown_bytes)". wp_auto.

  iDestruct (own_slice_len with "Hown_bytes2") as "%Hown_bytes2_sz".
  wp_apply (wp_WriteInt with "[$Hsl $Hcap]"). iIntros (?) "[Hsl Hcap]". wp_auto.
  wp_apply (wp_WriteBytes with "[$Hsl $Hcap $Hown_bytes2]").
  iIntros (?) "(Hsl & Hcap & Hown_bytes2)". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  
  split.
  {
     rewrite Hown_bytes_sz.
     rewrite Hown_bytes2_sz.
     rewrite ?w64_to_nat_id.
     congruence.
  }
  done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeslice_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    completeslice_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (Henc & Hlen_strg & Hlen_strg2 & Hlen_bytes & Hlen_bytes2 ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hstrg_byt Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hstrg_byt]").
  iIntros (?) "[Hstrg_byt Hstrg_byt_cap]".
  wp_apply (wp_StringFromBytes with "[$Hstrg_byt]").
  iIntros "Hstrg_byt". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hstrg2_byt Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hstrg2_byt]").
  iIntros (?) "[Hstrg2_byt Hstrg2_byt_cap]".
  wp_apply (wp_StringFromBytes with "[$Hstrg2_byt]").
  iIntros "Hstrg2_byt". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hown_bytes Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hown_bytes]").
  iIntros (?) "[Hown_bytes Hown_bytes_cap]". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hown_bytes2 Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hown_bytes2]").
  iIntros (?) "[Hown_bytes2 Hown_bytes2_cap]". wp_auto.

  iApply "HΦ". iFrame.
  done.
Qed.

End completeSlice_gk.
End completeSlice_gk.

--- End: testdata/out/coq/completeslice_proof_gk.v ---
--- Start: testdata/out/go/completeslice_gk/completeslice_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package completeslice_gk

import (
	"github.com/goose-lang/primitive"
	"github.com/goose-lang/std"
	"github.com/tchajed/marshal"
)

type S struct {
	Strg   string
	Strg2  string
	Bytes  []byte
	Bytes2 []byte
}

func Marshal(enc []byte, c S) []byte {
	primitive.AssumeNoStringOverflow(c.Strg)
	enc = marshal.WriteLenPrefixedBytes(enc, []byte(c.Strg))
	primitive.AssumeNoStringOverflow(c.Strg2)
	enc = marshal.WriteLenPrefixedBytes(enc, []byte(c.Strg2))
	enc = marshal.WriteInt(enc, uint64(len(c.Bytes)))
	enc = marshal.WriteBytes(enc, c.Bytes)
	enc = marshal.WriteInt(enc, uint64(len(c.Bytes2)))
	enc = marshal.WriteBytes(enc, c.Bytes2)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	strgBytes, s := marshal.ReadLenPrefixedBytes(s)
	strg := string(std.BytesClone(strgBytes))
	strg2Bytes, s := marshal.ReadLenPrefixedBytes(s)
	strg2 := string(std.BytesClone(strg2Bytes))
	bytesBytes, s := marshal.ReadLenPrefixedBytes(s)
	bytes := std.BytesClone(bytesBytes)
	bytes2Bytes, s := marshal.ReadLenPrefixedBytes(s)
	bytes2 := std.BytesClone(bytes2Bytes)

	return S{
		Strg:   strg,
		Strg2:  strg2,
		Bytes:  bytes,
		Bytes2: bytes2,
	}, s
}
--- End: testdata/out/go/completeslice_gk/completeslice_gk.go ---
--- Begin: testdata/out/coq/structslice_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module structSlice_gk.
Section structSlice_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit structslice_gk :=
  ltac2:(build_pkg_init ()).

Record C :=
    mkC {
        slices' : list completeSlice_gk.C;
        ints' : list completeInt_gk.C;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (slices_enc ints_enc : list u8), 
  encoded = (u64_le $ length $ args.(slices')) ++ slices_enc ++
              (u64_le $ length $ args.(ints')) ++ ints_enc
  /\ encodes slices_enc args.(slices') completeSlice_gk.has_encoding
  /\ length args.(slices') < 2^64
  /\ encodes ints_enc args.(ints') completeInt_gk.has_encoding
  /\ length args.(ints') < 2^64.

Definition own (args__v: structslice_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (l__slices : list completeslice_gk.S.t)(l__ints : list completeint_gk.S.t), 
  "Hown_slices_sl" ∷ own_slice args__v.(structslice_gk.S.Slices') dq l__slices ∗
  "Hown_slices_own" ∷ ([∗ list] x;c ∈ l__slices;args__c.(slices'), completeSlice_gk.own x c dq) ∗
  "%Hown_slices_len" ∷ ⌜ length l__slices < 2^64 ⌝ ∗
  "Hown_ints_sl" ∷ own_slice args__v.(structslice_gk.S.Ints') dq l__ints ∗
  "Hown_ints_own" ∷ ([∗ list] x;c ∈ l__ints;args__c.(ints'), completeInt_gk.own x c dq) ∗
  "%Hown_ints_len" ∷ ⌜ length l__ints < 2^64 ⌝.

Lemma wp_Encode (args__t : structslice_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    structslice_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_slices_sl") as "%Hown_slices_sz".
  iDestruct (big_sepL2_length with "Hown_slices_own") as "%Hown_slices_sz'".
  rewrite Hown_slices_sz' in Hown_slices_sz.
  wp_apply (wp_WriteSlice with "[$Hsl $Hcap $Hown_slices_sl $Hown_slices_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    wp_apply (completeSlice_gk.wp_Encode with "[$Hown $Hsl $Hcap]").
    iApply "HΦ".
  }
  iIntros (slices_enc slices_sl') "(Hown_slices & Hown_slices_own & %Henc_slices & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_ints_sl") as "%Hown_ints_sz".
  iDestruct (big_sepL2_length with "Hown_ints_own") as "%Hown_ints_sz'".
  rewrite Hown_ints_sz' in Hown_ints_sz.
  wp_apply (wp_WriteSlice with "[$Hsl $Hcap $Hown_ints_sl $Hown_ints_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    wp_apply (completeInt_gk.wp_Encode with "[$Hown $Hsl $Hcap]").
    iApply "HΦ".
  }
  iIntros (ints_enc ints_sl') "(Hown_ints & Hown_ints_own & %Henc_ints & Hsl & Hcap)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists slices_enc, ints_enc.
  split.
  {
     rewrite Hown_slices_sz.
     rewrite Hown_ints_sz.
     rewrite ?w64_to_nat_id.
     congruence.
  }
  rewrite <- Hown_slices_sz'.
  rewrite <- Hown_ints_sz'.
  done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    structslice_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (slices_enc & ints_enc & Henc & Henc_slices & Hslices_sz & Henc_ints & Hints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    wp_apply (completeSlice_gk.wp_Decode with "[$Hsl $Henc]").
    iApply "HΦ".
  }
  iIntros (???) "(Hown_slices_sl & Hown_slices_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_slices_own") as "%Hown_slices_sz".
  rewrite <- Hown_slices_sz in Hslices_sz.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    wp_apply (completeInt_gk.wp_Decode with "[$Hsl $Henc]").
    iApply "HΦ".
  }
  iIntros (???) "(Hown_ints_sl & Hown_ints_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_ints_own") as "%Hown_ints_sz".
  rewrite <- Hown_ints_sz in Hints_sz.

  iApply "HΦ". iFrame.
  done.
Qed.

End structSlice_gk.
End structSlice_gk.

--- End: testdata/out/coq/structslice_proof_gk.v ---
--- Start: testdata/out/go/structslice_gk/structslice_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package structslice_gk

import (
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/completeint_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk"
)

type S struct {
	Slices []completeslice_gk.S
	Ints   []completeint_gk.S
}

func Marshal(enc []byte, s S) []byte {

	enc = marshal.WriteInt(enc, uint64(len(s.Slices)))
	enc = marshal.WriteSlice[completeslice_gk.S](enc, s.Slices, completeslice_gk.Marshal)

	enc = marshal.WriteInt(enc, uint64(len(s.Ints)))
	enc = marshal.WriteSlice[completeint_gk.S](enc, s.Ints, completeint_gk.Marshal)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	slicesLen, s := marshal.ReadInt(s)
	slices, s := marshal.ReadSlice[completeslice_gk.S](s, slicesLen, completeslice_gk.Unmarshal)
	intsLen, s := marshal.ReadInt(s)
	ints, s := marshal.ReadSlice[completeint_gk.S](s, intsLen, completeint_gk.Unmarshal)

	return S{
		Slices: slices,
		Ints:   ints,
	}, s
}
--- End: testdata/out/go/structslice_gk/structslice_gk.go ---
--- Begin: testdata/out/coq/enum_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.primitive.
From New.proof Require Import github_com.goose_lang.std.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.enum_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.enum_gk.
From Grackle.test Require Import error_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.error_gk.

Module enum_gk.
Section enum_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit enum_gk :=
  ltac2:(build_pkg_init ()).

Record C :=
    mkC {
        op' :  go_string;
        err' :  error_gk.I;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le $ length $ args.(op')) ++ args.(op') ++
              (u32_le $ error_gk.to_tag args.(err'))
  /\ length args.(op') < 2^64.

Definition own (args__v: enum_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_op" ∷ ⌜ args__v.(enum_gk.S.Op') = args__c.(op') ⌝ ∗
  "%Hown_op_len" ∷ ⌜ length args__c.(op') < 2^64 ⌝ ∗
  "%Hown_err" ∷ ⌜ args__v.(enum_gk.S.Err') = error_gk.to_tag args__c.(err') ⌝.

Lemma wp_Encode (args__t : enum_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init enum_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    enum_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%HopLen". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "HopBytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $HopBytes]").
  iIntros (?) "(Hsl & Hcap & HopBytes)". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  
  split. all: congruence || done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init enum_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    enum_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (Henc & Hlen_op ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hop_byt Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hop_byt]").
  iIntros (?) "[Hop_byt Hop_byt_cap]".
  wp_apply (wp_StringFromBytes with "[$Hop_byt]").
  iIntros "Hop_byt". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  iApply "HΦ". iFrame.
  done.
Qed.

End enum_gk.
End enum_gk.

--- End: testdata/out/coq/enum_proof_gk.v ---
--- Start: testdata/out/go/enum_gk/enum_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package enum_gk

import (
	"github.com/goose-lang/primitive"
	"github.com/goose-lang/std"
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/error_gk"
)

type S struct {
	Op  string
	Err error_gk.E
}

func Marshal(enc []byte, e S) []byte {
	primitive.AssumeNoStringOverflow(e.Op)
	enc = marshal.WriteLenPrefixedBytes(enc, []byte(e.Op))
	enc = marshal.WriteInt32(enc, uint32(e.Err))

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	opBytes, s := marshal.ReadLenPrefixedBytes(s)
	op := string(std.BytesClone(opBytes))
	err_int, s := marshal.ReadInt32(s)
	err := error_gk.E(err_int)

	return S{
		Op:  op,
		Err: err,
	}, s
}
--- End: testdata/out/go/enum_gk/enum_gk.go ---
--- Begin: testdata/out/coq/complete_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import structslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.

Module complete_gk.
Section complete_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit complete_gk :=
  ltac2:(build_pkg_init ()).

Record C :=
    mkC {
        int' :  completeInt_gk.C;
        slc' :  completeSlice_gk.C;
        success' :  bool;
        sslice' : list structSlice_gk.C;
        iints' : list u64;
        sints' : list u32;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (int_enc slc_enc sslice_enc iints_enc sints_enc : list u8), 
  encoded = int_enc ++
              slc_enc ++
              [if args.(success') then W8 1 else W8 0] ++
              (u64_le $ length $ args.(sslice')) ++ sslice_enc ++
              (u64_le $ length $ args.(iints')) ++ iints_enc ++
              (u64_le $ length $ args.(sints')) ++ sints_enc
  /\ completeInt_gk.has_encoding int_enc args.(int')
  /\ completeSlice_gk.has_encoding slc_enc args.(slc')
  /\ encodes sslice_enc args.(sslice') structSlice_gk.has_encoding
  /\ length args.(sslice') < 2^64
  /\ encodes iints_enc args.(iints') uint64_has_encoding
  /\ length args.(iints') < 2^64
  /\ encodes sints_enc args.(sints') uint32_has_encoding
  /\ length args.(sints') < 2^64.

Definition own (args__v: complete_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (l__sslice : list structslice_gk.S.t)(l__iints : list u64)(l__sints : list u32), 
  "Hown_int" ∷ completeInt_gk.own args__v.(complete_gk.S.Int') args__c.(int') dq ∗
  "Hown_slc" ∷ completeSlice_gk.own args__v.(complete_gk.S.Slc') args__c.(slc') dq ∗
  "%Hown_success" ∷ ⌜ args__v.(complete_gk.S.Success') = args__c.(success') ⌝ ∗
  "Hown_sslice_sl" ∷ own_slice args__v.(complete_gk.S.Sslice') dq l__sslice ∗
  "Hown_sslice_own" ∷ ([∗ list] x;c ∈ l__sslice;args__c.(sslice'), structSlice_gk.own x c dq) ∗
  "%Hown_sslice_len" ∷ ⌜ length l__sslice < 2^64 ⌝ ∗
  "Hown_iints_sl" ∷ own_slice args__v.(complete_gk.S.Iints') dq l__iints ∗
  "Hown_iints_own" ∷ ([∗ list] x;c ∈ l__iints;args__c.(iints'), own_prim x c dq) ∗
  "%Hown_iints_len" ∷ ⌜ length l__iints < 2^64 ⌝ ∗
  "Hown_sints_sl" ∷ own_slice args__v.(complete_gk.S.Sints') dq l__sints ∗
  "Hown_sints_own" ∷ ([∗ list] x;c ∈ l__sints;args__c.(sints'), own_prim x c dq) ∗
  "%Hown_sints_len" ∷ ⌜ length l__sints < 2^64 ⌝.

Lemma wp_Encode (args__t : complete_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    complete_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply (completeInt_gk.wp_Encode with "[$Hsl $Hcap $Hown_int]").
  iIntros (int_enc ?) "(%Hargs_int_enc & Hown_int & Hsl & Hcap)".
  wp_auto.

  wp_apply (completeSlice_gk.wp_Encode with "[$Hsl $Hcap $Hown_slc]").
  iIntros (slc_enc ?) "(%Hargs_slc_enc & Hown_slc & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteBool with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_sslice_sl") as "%Hown_sslice_sz".
  iDestruct (big_sepL2_length with "Hown_sslice_own") as "%Hown_sslice_sz'".
  rewrite Hown_sslice_sz' in Hown_sslice_sz.
  wp_apply (wp_WriteSlice with "[$Hsl $Hcap $Hown_sslice_sl $Hown_sslice_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    wp_apply (structSlice_gk.wp_Encode with "[$Hown $Hsl $Hcap]").
    iApply "HΦ".
  }
  iIntros (sslice_enc sslice_sl') "(Hown_sslice & Hown_sslice_own & %Henc_sslice & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_iints_sl") as "%Hown_iints_sz".
  iDestruct (big_sepL2_length with "Hown_iints_own") as "%Hown_iints_sz'".
  rewrite Hown_iints_sz' in Hown_iints_sz.
  wp_apply (wp_WriteSlice _ _ _ _ _ uint64_has_encoding with "[$Hsl $Hcap $Hown_iints_sl $Hown_iints_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    iDestruct (own_prim_eq with "Hown") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (iints_enc iints_sl') "(Hown_iints & Hown_iints_own & %Henc_iints & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_sints_sl") as "%Hown_sints_sz".
  iDestruct (big_sepL2_length with "Hown_sints_own") as "%Hown_sints_sz'".
  rewrite Hown_sints_sz' in Hown_sints_sz.
  wp_apply (wp_WriteSlice _ _ _ _ _ uint32_has_encoding with "[$Hsl $Hcap $Hown_sints_sl $Hown_sints_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    iDestruct (own_prim_eq with "Hown") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (sints_enc sints_sl') "(Hown_sints & Hown_sints_own & %Henc_sints & Hsl & Hcap)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists int_enc, slc_enc, sslice_enc, iints_enc, sints_enc.
  split.
  {
     rewrite Hown_success.
     rewrite Hown_sslice_sz.
     rewrite Hown_iints_sz.
     rewrite Hown_sints_sz.
     rewrite ?w64_to_nat_id.
     congruence.
  }
  rewrite <- Hown_sslice_sz'.
  rewrite <- Hown_iints_sz'.
  rewrite <- Hown_sints_sz'.
  done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    complete_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (int_enc & slc_enc & sslice_enc & iints_enc & sints_enc & Henc & Henc_int & Henc_slc & Henc_sslice & Hsslice_sz & Henc_iints & Hiints_sz & Henc_sints & Hsints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (completeInt_gk.wp_Decode int_enc with "[$Hsl]"); first done.
  iIntros (int__v ?) "[Hown_int Hsl]". wp_auto.

  wp_apply (completeSlice_gk.wp_Decode slc_enc with "[$Hsl]"); first done.
  iIntros (slc__v ?) "[Hown_slc Hsl]". wp_auto.

  wp_apply (wp_ReadBool with "[$Hsl]").
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args__c.(success')) as Hargs_success.
  { destruct args__c.(success'); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success. wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    wp_apply (structSlice_gk.wp_Decode with "[$Hsl $Henc]").
    iApply "HΦ".
  }
  iIntros (???) "(Hown_sslice_sl & Hown_sslice_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_sslice_own") as "%Hown_sslice_sz".
  rewrite <- Hown_sslice_sz in Hsslice_sz.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice _ _ _ _ _ own_prim  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    iDestruct "Henc" as "%Hown_x".
    unfold uint64_has_encoding in Hown_x.
    rewrite Hown_x.
    wp_apply (wp_ReadInt with "[$Hsl]").
    iIntros (?) "Hsl".
    iApply "HΦ". iFrame.
    done.
  }
  iIntros (???) "(Hown_iints_sl & Hown_iints_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_iints_own") as "%Hown_iints_sz".
  rewrite <- Hown_iints_sz in Hiints_sz.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice _ _ _ _ _ own_prim  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    iDestruct "Henc" as "%Hown_x".
    unfold uint32_has_encoding in Hown_x.
    rewrite Hown_x.
    wp_apply (wp_ReadInt32 with "[$Hsl]").
    iIntros (?) "Hsl".
    iApply "HΦ". iFrame.
    done.
  }
  iIntros (???) "(Hown_sints_sl & Hown_sints_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_sints_own") as "%Hown_sints_sz".
  rewrite <- Hown_sints_sz in Hsints_sz.

  iApply "HΦ". iFrame.
  done.
Qed.

End complete_gk.
End complete_gk.

--- End: testdata/out/coq/complete_proof_gk.v ---
--- Start: testdata/out/go/complete_gk/complete_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package complete_gk

import (
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/completeint_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk"
	"github.com/mjschwenne/grackle/testdata/out/go/structslice_gk"
)

type S struct {
	Int     completeint_gk.S
	Slc     completeslice_gk.S
	Success bool
	Sslice  []structslice_gk.S
	Iints   []uint64
	Sints   []uint32
}

func Marshal(enc []byte, c S) []byte {
	enc = completeint_gk.Marshal(enc, c.Int)
	enc = completeslice_gk.Marshal(enc, c.Slc)
	enc = marshal.WriteBool(enc, c.Success)

	enc = marshal.WriteInt(enc, uint64(len(c.Sslice)))
	enc = marshal.WriteSlice[structslice_gk.S](enc, c.Sslice, structslice_gk.Marshal)

	enc = marshal.WriteInt(enc, uint64(len(c.Iints)))
	enc = marshal.WriteSlice[uint64](enc, c.Iints, marshal.WriteInt)

	enc = marshal.WriteInt(enc, uint64(len(c.Sints)))
	enc = marshal.WriteSlice[uint32](enc, c.Sints, marshal.WriteInt32)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	int, s := completeint_gk.Unmarshal(s)
	slc, s := completeslice_gk.Unmarshal(s)
	success, s := marshal.ReadBool(s)
	ssliceLen, s := marshal.ReadInt(s)
	sslice, s := marshal.ReadSlice[structslice_gk.S](s, ssliceLen, structslice_gk.Unmarshal)
	iintsLen, s := marshal.ReadInt(s)
	iints, s := marshal.ReadSlice[uint64](s, iintsLen, marshal.ReadInt)
	sintsLen, s := marshal.ReadInt(s)
	sints, s := marshal.ReadSlice[uint32](s, sintsLen, marshal.ReadInt32)

	return S{
		Int:     int,
		Slc:     slc,
		Success: success,
		Sslice:  sslice,
		Iints:   iints,
		Sints:   sints,
	}, s
}
--- End: testdata/out/go/complete_gk/complete_gk.go ---
