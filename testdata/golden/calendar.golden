--- Begin: testdata/out/coq/timestamp_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.timestamp_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.timestamp_gk.

Module TimeStamp_gk.
Section TimeStamp_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit timestamp_gk := define_is_pkg_init True%I.

Definition C := timestamp_gk.S.t.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u32_le args.(timestamp_gk.S.Hour')) ++
              (u32_le args.(timestamp_gk.S.Minute')) ++
              (u64_le args.(timestamp_gk.S.Second')).

Definition own (args__v: timestamp_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_hour" ∷ ⌜ args__v.(timestamp_gk.S.Hour') = args__c.(timestamp_gk.S.Hour') ⌝ ∗
  "%Hown_minute" ∷ ⌜ args__v.(timestamp_gk.S.Minute') = args__c.(timestamp_gk.S.Minute') ⌝ ∗
  "%Hown_second" ∷ ⌜ args__v.(timestamp_gk.S.Second') = args__c.(timestamp_gk.S.Second') ⌝.

Lemma wp_Encode (args__t : timestamp_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init timestamp_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! timestamp_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  
  congruence. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init timestamp_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! timestamp_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  iApply "HΦ". iFrame.
  done.
Qed.

End TimeStamp_gk.
End TimeStamp_gk.

--- End: testdata/out/coq/timestamp_proof_gk.v ---
--- Start: testdata/out/go/timestamp_gk/timestamp_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package timestamp_gk

import (
	"github.com/tchajed/marshal"
)

type S struct {
	Hour   uint32
	Minute uint32
	Second uint64
}

func Marshal(enc []byte, t S) []byte {
	enc = marshal.WriteInt32(enc, t.Hour)
	enc = marshal.WriteInt32(enc, t.Minute)
	enc = marshal.WriteInt(enc, t.Second)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	hour, s := marshal.ReadInt32(s)
	minute, s := marshal.ReadInt32(s)
	second, s := marshal.ReadInt(s)

	return S{
		Hour:   hour,
		Minute: minute,
		Second: second,
	}, s
}
--- End: testdata/out/go/timestamp_gk/timestamp_gk.go ---
--- Begin: testdata/out/coq/event_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.primitive.
From New.proof Require Import github_com.goose_lang.std.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.event_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.event_gk.
From Grackle.test Require Import timestamp_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.timestamp_gk.

Module Event_gk.
Section Event_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit event_gk := define_is_pkg_init True%I.

Definition C := event_gk.S.t.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (startTime_enc endTime_enc : list u8), 
  encoded = (u32_le args.(event_gk.S.Id')) ++
              (u64_le $ length $ args.(event_gk.S.Name')) ++ args.(event_gk.S.Name') ++
              startTime_enc ++
              endTime_enc
  /\ length args.(event_gk.S.Name') < 2^64
  /\ TimeStamp_gk.has_encoding startTime_enc args.(event_gk.S.StartTime')
  /\ TimeStamp_gk.has_encoding endTime_enc args.(event_gk.S.EndTime').

Definition own (args__v: event_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_id" ∷ ⌜ args__v.(event_gk.S.Id') = args__c.(event_gk.S.Id') ⌝ ∗
  "%Hown_name" ∷ ⌜ args__v.(event_gk.S.Name') = args__c.(event_gk.S.Name') ⌝ ∗
  "%Hown_name_len" ∷ ⌜ length args__c.(event_gk.S.Name') < 2^64 ⌝ ∗
  "Hown_startTime" ∷ TimeStamp_gk.own args__v.(event_gk.S.StartTime') args__c.(event_gk.S.StartTime') dq ∗
  "Hown_endTime" ∷ TimeStamp_gk.own args__v.(event_gk.S.EndTime') args__c.(event_gk.S.EndTime') dq.

Lemma wp_Encode (args__t : event_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init event_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! event_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%HnameLen". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "HnameBytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $HnameBytes]").
  iIntros (?) "(Hsl & Hcap & HnameBytes)". wp_auto.

  wp_apply (TimeStamp_gk.wp_Encode with "[$Hsl $Hcap $Hown_startTime]").
  iIntros (startTime_enc ?) "(%Hargs_startTime_enc & Hown_startTime & Hsl & Hcap)".
  wp_auto.

  wp_apply (TimeStamp_gk.wp_Encode with "[$Hsl $Hcap $Hown_endTime]").
  iIntros (endTime_enc ?) "(%Hargs_endTime_enc & Hown_endTime & Hsl & Hcap)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists startTime_enc, endTime_enc.
  split. all: congruence || done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init event_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! event_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (startTime_enc & endTime_enc & Henc & Hlen_name & Henc_startTime & Henc_endTime ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hname_byt Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hname_byt]").
  iIntros (?) "[Hname_byt Hname_byt_cap]".
  wp_apply (wp_StringFromBytes with "[$Hname_byt]").
  iIntros "Hname_byt". wp_auto.

  wp_apply (TimeStamp_gk.wp_Decode startTime_enc with "[$Hsl]"); first done.
  iIntros (startTime__v ?) "[Hown_startTime Hsl]". wp_auto.

  wp_apply (TimeStamp_gk.wp_Decode endTime_enc with "[$Hsl]"); first done.
  iIntros (endTime__v ?) "[Hown_endTime Hsl]". wp_auto.

  iApply "HΦ". iFrame.
  done.
Qed.

End Event_gk.
End Event_gk.

--- End: testdata/out/coq/event_proof_gk.v ---
--- Start: testdata/out/go/event_gk/event_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package event_gk

import (
	"github.com/goose-lang/primitive"
	"github.com/goose-lang/std"
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/timestamp_gk"
)

type S struct {
	Id        uint32
	Name      string
	StartTime timestamp_gk.S
	EndTime   timestamp_gk.S
}

func Marshal(enc []byte, e S) []byte {
	enc = marshal.WriteInt32(enc, e.Id)
	primitive.AssumeNoStringOverflow(e.Name)
	enc = marshal.WriteLenPrefixedBytes(enc, []byte(e.Name))
	enc = timestamp_gk.Marshal(enc, e.StartTime)
	enc = timestamp_gk.Marshal(enc, e.EndTime)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	id, s := marshal.ReadInt32(s)
	nameBytes, s := marshal.ReadLenPrefixedBytes(s)
	name := string(std.BytesClone(nameBytes))
	startTime, s := timestamp_gk.Unmarshal(s)
	endTime, s := timestamp_gk.Unmarshal(s)

	return S{
		Id:        id,
		Name:      name,
		StartTime: startTime,
		EndTime:   endTime,
	}, s
}
--- End: testdata/out/go/event_gk/event_gk.go ---
--- Begin: testdata/out/coq/calendar_proof_gk.v ---
(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.std.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.calendar_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.calendar_gk.
From Grackle.test Require Import event_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.event_gk.

Module calendar_gk.
Section calendar_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ} {go_ctx : GoContext}.

#[global] Instance : IsPkgInit calendar_gk := define_is_pkg_init True%I.

Record C :=
    mkC {
        hash' : list u8;
        events' : list Event_gk.C;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (events_enc : list u8), 
  encoded = (u64_le $ length $ args.(hash')) ++ args.(hash') ++
              (u64_le $ length $ args.(events')) ++ events_enc
  /\ length args.(hash') < 2^64
  /\ encodes events_enc args.(events') Event_gk.has_encoding
  /\ length args.(events') < 2^64.

Definition own (args__v: calendar_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (l__events : list event_gk.S.t), 
  "Hown_hash" ∷ own_slice args__v.(calendar_gk.S.Hash') dq args__c.(hash') ∗
  "%Hown_hash_len" ∷ ⌜ length args__c.(hash') < 2^64 ⌝ ∗
  "Hown_events_sl" ∷ own_slice args__v.(calendar_gk.S.Events') dq l__events ∗
  "Hown_events_own" ∷ ([∗ list] x;c ∈ l__events;args__c.(events'), Event_gk.own x c dq) ∗
  "%Hown_events_len" ∷ ⌜ length l__events < 2^64 ⌝.

Lemma wp_Encode (args__t : calendar_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init calendar_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    @! calendar_gk.Marshal #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  iDestruct (own_slice_len with "Hown_hash") as "%Hown_hash_sz".
  wp_apply (wp_WriteInt with "[$Hsl $Hcap]"). iIntros (?) "[Hsl Hcap]". wp_auto.
  wp_apply (wp_WriteBytes with "[$Hsl $Hcap $Hown_hash]").
  iIntros (?) "(Hsl & Hcap & Hown_hash)". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_events_sl") as "[%Hown_events_sz %Hown_events_sz_nonneg]".
  iDestruct (big_sepL2_length with "Hown_events_own") as "%Hown_events_sz'".
  rewrite Hown_events_sz' in Hown_events_sz.
  wp_apply (wp_WriteSlice with "[$Hsl $Hcap $Hown_events_sl $Hown_events_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    wp_apply (Event_gk.wp_Encode with "[$Hown $Hsl $Hcap]").
    iApply "HΦ".
  }
  iIntros (events_enc events_sl') "(Hown_events & Hown_events_own & %Henc_events & Hsl & Hcap)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists events_enc.
  split; first repeat (f_equal; try word).
  all: try done.
  rewrite <- Hown_events_sz'.
  done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init calendar_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    @! calendar_gk.Unmarshal #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (events_enc & Henc & Hlen_hash & Henc_events & Hevents_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hown_hash Hsl]". wp_auto.
  wp_apply (wp_BytesClone with "[$Hown_hash]").
  iIntros (?) "[Hown_hash Hown_hash_cap]". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    wp_apply (Event_gk.wp_Decode with "[$Hsl $Henc]").
    iApply "HΦ".
  }
  iIntros (???) "(Hown_events_sl & Hown_events_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_events_own") as "%Hown_events_sz".
  rewrite <- Hown_events_sz in Hevents_sz.

  iApply "HΦ". iFrame.
  done.
Qed.

End calendar_gk.
End calendar_gk.

--- End: testdata/out/coq/calendar_proof_gk.v ---
--- Start: testdata/out/go/calendar_gk/calendar_gk.go ---
//--------------------------------------
// This file is autogenerated by grackle
// DO NOT MANUALLY EDIT THIS FILE
//--------------------------------------

package calendar_gk

import (
	"github.com/goose-lang/std"
	"github.com/tchajed/marshal"

	"github.com/mjschwenne/grackle/testdata/out/go/event_gk"
)

type S struct {
	Hash   []byte
	Events []event_gk.S
}

func Marshal(enc []byte, c S) []byte {
	enc = marshal.WriteInt(enc, uint64(len(c.Hash)))
	enc = marshal.WriteBytes(enc, c.Hash)

	enc = marshal.WriteInt(enc, uint64(len(c.Events)))
	enc = marshal.WriteSlice[event_gk.S](enc, c.Events, event_gk.Marshal)

	return enc
}

func Unmarshal(s []byte) (S, []byte) {

	hashBytes, s := marshal.ReadLenPrefixedBytes(s)
	hash := std.BytesClone(hashBytes)
	eventsLen, s := marshal.ReadInt(s)
	events, s := marshal.ReadSlice[event_gk.S](s, eventsLen, event_gk.Unmarshal)

	return S{
		Hash:   hash,
		Events: events,
	}, s
}
--- End: testdata/out/go/calendar_gk/calendar_gk.go ---
