(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.generatedproof.github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
Require Export New.generatedproof.github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
Require Export New.golang.theory.

Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.

Set Default Proof Using "Type".

Module structslice_gk.

(* type structslice_gk.S *)
Module S.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Slices' : slice.t;
  Ints' : slice.t;
}.
End def.
End S.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_S : Settable S.t :=
  settable! S.mk < S.Slices'; S.Ints' >.
Global Instance into_val_S : IntoVal S.t :=
  {| to_val_def v :=
    struct.val_aux structslice_gk.S [
    "Slices" ::= #(S.Slices' v);
    "Ints" ::= #(S.Ints' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_S : IntoValTyped S.t structslice_gk.S :=
{|
  default_val := S.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_S_Slices : IntoValStructField "Slices" structslice_gk.S S.Slices'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Ints : IntoValStructField "Ints" structslice_gk.S S.Ints'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_S Slices' Ints':
  PureWp True
    (struct.make #structslice_gk.S (alist_val [
      "Slices" ::= #Slices';
      "Ints" ::= #Ints'
    ]))%struct
    #(S.mk Slices' Ints').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance S_struct_fields_split dq l (v : S.t) :
  StructFieldsSplit dq l v (
    "HSlices" ∷ l ↦s[structslice_gk.S :: "Slices"]{dq} v.(S.Slices') ∗
    "HInts" ∷ l ↦s[structslice_gk.S :: "Ints"]{dq} v.(S.Ints')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (S.Slices' v)) structslice_gk.S "Slices"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined structslice_gk :=
{|
  is_pkg_defined := is_global_definitions structslice_gk var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_Marshal :
  WpFuncCall structslice_gk "Marshal" _ (is_pkg_defined structslice_gk) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Unmarshal :
  WpFuncCall structslice_gk "Unmarshal" _ (is_pkg_defined structslice_gk) :=
  ltac:(apply wp_func_call'; reflexivity).

End names.
End structslice_gk.
