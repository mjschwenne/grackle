(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Set Default Proof Using "Type".

Module completeint_gk.

(* type completeint_gk.S *)
Module S.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  One' : w32;
  Two' : w32;
  Three' : w32;
  Four' : w64;
  Five' : w64;
  Six' : w64;
}.
End def.
End S.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_S : Settable S.t :=
  settable! S.mk < S.One'; S.Two'; S.Three'; S.Four'; S.Five'; S.Six' >.
Global Instance into_val_S : IntoVal S.t :=
  {| to_val_def v :=
    struct.val_aux completeint_gk.S [
    "One" ::= #(S.One' v);
    "Two" ::= #(S.Two' v);
    "Three" ::= #(S.Three' v);
    "Four" ::= #(S.Four' v);
    "Five" ::= #(S.Five' v);
    "Six" ::= #(S.Six' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_S : IntoValTyped S.t completeint_gk.S :=
{|
  default_val := S.mk (default_val _) (default_val _) (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_S_One : IntoValStructField "One" completeint_gk.S S.One'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Two : IntoValStructField "Two" completeint_gk.S S.Two'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Three : IntoValStructField "Three" completeint_gk.S S.Three'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Four : IntoValStructField "Four" completeint_gk.S S.Four'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Five : IntoValStructField "Five" completeint_gk.S S.Five'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Six : IntoValStructField "Six" completeint_gk.S S.Six'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_S One' Two' Three' Four' Five' Six':
  PureWp True
    (struct.make #completeint_gk.S (alist_val [
      "One" ::= #One';
      "Two" ::= #Two';
      "Three" ::= #Three';
      "Four" ::= #Four';
      "Five" ::= #Five';
      "Six" ::= #Six'
    ]))%struct
    #(S.mk One' Two' Three' Four' Five' Six').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance S_struct_fields_split dq l (v : S.t) :
  StructFieldsSplit dq l v (
    "HOne" ∷ l ↦s[completeint_gk.S :: "One"]{dq} v.(S.One') ∗
    "HTwo" ∷ l ↦s[completeint_gk.S :: "Two"]{dq} v.(S.Two') ∗
    "HThree" ∷ l ↦s[completeint_gk.S :: "Three"]{dq} v.(S.Three') ∗
    "HFour" ∷ l ↦s[completeint_gk.S :: "Four"]{dq} v.(S.Four') ∗
    "HFive" ∷ l ↦s[completeint_gk.S :: "Five"]{dq} v.(S.Five') ∗
    "HSix" ∷ l ↦s[completeint_gk.S :: "Six"]{dq} v.(S.Six')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (S.One' v)) (completeint_gk.S) "One"%go.
  simpl_one_flatten_struct (# (S.Two' v)) (completeint_gk.S) "Two"%go.
  simpl_one_flatten_struct (# (S.Three' v)) (completeint_gk.S) "Three"%go.
  simpl_one_flatten_struct (# (S.Four' v)) (completeint_gk.S) "Four"%go.
  simpl_one_flatten_struct (# (S.Five' v)) (completeint_gk.S) "Five"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context `{!GoContext}.

Global Instance wp_func_call_Marshal :
  WpFuncCall completeint_gk.Marshal _ (is_pkg_defined completeint_gk) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_Unmarshal :
  WpFuncCall completeint_gk.Unmarshal _ (is_pkg_defined completeint_gk) :=
  ltac:(apply wp_func_call'; reflexivity).

End names.
End completeint_gk.
