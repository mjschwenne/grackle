(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.

Set Default Proof Using "Type".

Module completeslice_gk.

(* type completeslice_gk.S *)
Module S.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Strg' : go_string;
  Strg2' : go_string;
  Bytes' : slice.t;
  Bytes2' : slice.t;
}.
End def.
End S.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_S : Settable S.t :=
  settable! S.mk < S.Strg'; S.Strg2'; S.Bytes'; S.Bytes2' >.
Global Instance into_val_S : IntoVal S.t :=
  {| to_val_def v :=
    struct.val_aux completeslice_gk.S [
    "Strg" ::= #(S.Strg' v);
    "Strg2" ::= #(S.Strg2' v);
    "Bytes" ::= #(S.Bytes' v);
    "Bytes2" ::= #(S.Bytes2' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_S : IntoValTyped S.t completeslice_gk.S :=
{|
  default_val := S.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_S_Strg : IntoValStructField "Strg" completeslice_gk.S S.Strg'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Strg2 : IntoValStructField "Strg2" completeslice_gk.S S.Strg2'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Bytes : IntoValStructField "Bytes" completeslice_gk.S S.Bytes'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_S_Bytes2 : IntoValStructField "Bytes2" completeslice_gk.S S.Bytes2'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_S Strg' Strg2' Bytes' Bytes2':
  PureWp True
    (struct.make #completeslice_gk.S (alist_val [
      "Strg" ::= #Strg';
      "Strg2" ::= #Strg2';
      "Bytes" ::= #Bytes';
      "Bytes2" ::= #Bytes2'
    ]))%struct
    #(S.mk Strg' Strg2' Bytes' Bytes2').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance S_struct_fields_split dq l (v : S.t) :
  StructFieldsSplit dq l v (
    "HStrg" ∷ l ↦s[completeslice_gk.S :: "Strg"]{dq} v.(S.Strg') ∗
    "HStrg2" ∷ l ↦s[completeslice_gk.S :: "Strg2"]{dq} v.(S.Strg2') ∗
    "HBytes" ∷ l ↦s[completeslice_gk.S :: "Bytes"]{dq} v.(S.Bytes') ∗
    "HBytes2" ∷ l ↦s[completeslice_gk.S :: "Bytes2"]{dq} v.(S.Bytes2')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (S.Strg' v)) (completeslice_gk.S) "Strg"%go.
  simpl_one_flatten_struct (# (S.Strg2' v)) (completeslice_gk.S) "Strg2"%go.
  simpl_one_flatten_struct (# (S.Bytes' v)) (completeslice_gk.S) "Bytes"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context {go_ctx : GoContext}.
#[local] Transparent is_pkg_defined is_pkg_defined_pure.

Global Instance is_pkg_defined_pure_completeslice_gk : IsPkgDefinedPure completeslice_gk :=
  {|
    is_pkg_defined_pure_def go_ctx :=
      is_pkg_defined_pure_single completeslice_gk ∧
      is_pkg_defined_pure code.github_com.goose_lang.primitive.primitive ∧
      is_pkg_defined_pure code.github_com.goose_lang.std.std ∧
      is_pkg_defined_pure code.github_com.tchajed.marshal.marshal;
  |}.

#[local] Transparent is_pkg_defined_single is_pkg_defined_pure_single.
Global Program Instance is_pkg_defined_completeslice_gk : IsPkgDefined completeslice_gk :=
  {|
    is_pkg_defined_def go_ctx :=
      (is_pkg_defined_single completeslice_gk ∗
       is_pkg_defined code.github_com.goose_lang.primitive.primitive ∗
       is_pkg_defined code.github_com.goose_lang.std.std ∗
       is_pkg_defined code.github_com.tchajed.marshal.marshal)%I
  |}.
Final Obligation. iIntros. iFrame "#%". Qed.
#[local] Opaque is_pkg_defined_single is_pkg_defined_pure_single.

Global Instance wp_func_call_Marshal :
  WpFuncCall completeslice_gk.Marshal _ (is_pkg_defined completeslice_gk) :=
  ltac:(solve_wp_func_call).

Global Instance wp_func_call_Unmarshal :
  WpFuncCall completeslice_gk.Unmarshal _ (is_pkg_defined completeslice_gk) :=
  ltac:(solve_wp_func_call).

End names.
End completeslice_gk.
