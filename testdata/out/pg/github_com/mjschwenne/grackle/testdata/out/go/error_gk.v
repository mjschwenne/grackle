(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.golang.theory.

Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.error_gk.

Set Default Proof Using "Type".

Module error_gk.

(* type error_gk.E *)
Module E.
Section def.
Context `{ffi_syntax}.
Definition t := w32.
End def.
End E.

Section names.

Class GlobalAddrs :=
{
  Name : loc;
  Value : loc;
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
    ("Name"%go, Name);
    ("Value"%go, Value)
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined error_gk :=
{|
  is_pkg_defined := is_global_definitions error_gk var_addrs;
|}.

Definition own_allocated : iProp Σ :=
  "HName" ∷ Name ↦ (default_val loc) ∗
  "HValue" ∷ Value ↦ (default_val loc).

Global Instance wp_globals_get_Name : 
  WpGlobalsGet error_gk "Name" Name (is_pkg_defined error_gk).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_globals_get_Value : 
  WpGlobalsGet error_gk "Value" Value (is_pkg_defined error_gk).
Proof. apply wp_globals_get'. reflexivity. Qed.

Global Instance wp_method_call_E_String :
  WpMethodCall error_gk "E" "String" _ (is_pkg_defined error_gk) :=
  ltac:(apply wp_method_call'; reflexivity).

Global Instance wp_method_call_E'ptr_String :
  WpMethodCall error_gk "E'ptr" "String" _ (is_pkg_defined error_gk) :=
  ltac:(apply wp_method_call'; reflexivity).

End names.
End error_gk.
