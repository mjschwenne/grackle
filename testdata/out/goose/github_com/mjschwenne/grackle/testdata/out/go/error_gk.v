(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/error_gk *)
From New.golang Require Import defn.

Definition error_gk : go_string := "github.com/mjschwenne/grackle/testdata/out/go/error_gk".

Module error_gk.
Section code.
Context `{ffi_syntax}.


Definition E : go_type := uint32T.

Definition EOk : expr := #(W32 0).

Definition EEndOfFile : expr := #(W32 1).

Definition EUnknown : expr := #(W32 2).

(* go: error_gk.go:23:12 *)
Definition E__String : val :=
  rec: "E__String" "e" <> :=
    exception_do (let: "e" := (mem.alloc "e") in
    return: (Fst (map.get (![type.mapT #uint32T #stringT] (globals.get #error_gk.error_gk #"Name"%go)) (![#E] "e")))).

Definition vars' : list (go_string * go_type) := [("Name"%go, mapT uint32T stringT); ("Value"%go, mapT stringT uint32T)].

Definition functions' : list (go_string * val) := [].

Definition msets' : list (go_string * (list (go_string * val))) := [("E"%go, [("String"%go, E__String)]); ("E'ptr"%go, [("String"%go, (λ: "$recvAddr",
                 method_call #error_gk.error_gk #"E" #"String" (![#E] "$recvAddr")
                 )%V)])].

#[global] Instance info' : PkgInfo error_gk.error_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init error_gk.error_gk (λ: <>,
      exception_do (let: "$r0" := ((let: "$v0" := #"eOk"%go in
      let: "$k0" := #(W32 0) in
      let: "$v1" := #"eEndOfFile"%go in
      let: "$k1" := #(W32 1) in
      let: "$v2" := #"eUnknown"%go in
      let: "$k2" := #(W32 2) in
      map.literal #uint32T #stringT [("$k0", "$v0"); ("$k1", "$v1"); ("$k2", "$v2")])) in
      do:  ((globals.get #error_gk.error_gk #"Name"%go) <-[type.mapT #uint32T #stringT] "$r0");;;
      let: "$r0" := ((let: "$v0" := #(W32 0) in
      let: "$k0" := #"eOk"%go in
      let: "$v1" := #(W32 1) in
      let: "$k1" := #"eEndOfFile"%go in
      let: "$v2" := #(W32 2) in
      let: "$k2" := #"eUnknown"%go in
      map.literal #stringT #uint32T [("$k0", "$v0"); ("$k1", "$v1"); ("$k2", "$v2")])) in
      do:  ((globals.get #error_gk.error_gk #"Value"%go) <-[type.mapT #stringT #uint32T] "$r0"))
      ).

End code.
End error_gk.
