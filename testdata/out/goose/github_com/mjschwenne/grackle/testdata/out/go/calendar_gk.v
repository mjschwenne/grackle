(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/calendar_gk *)
From New.golang Require Import defn.
Require Export New.code.github_com.goose_lang.std.
Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.event_gk.
Require Export New.code.github_com.tchajed.marshal.

Definition calendar_gk : go_string := "github.com/mjschwenne/grackle/testdata/out/go/calendar_gk".

Module calendar_gk.
Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Hash" :: sliceT;
  "Events" :: sliceT
].

(* go: calendar_gk.go:20:6 *)
Definition Marshal : val :=
  rec: "Marshal" "enc" "c" :=
    exception_do (let: "c" := (mem.alloc "c") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Hash"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.marshal #"WriteInt"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Hash"%go "c")) in
    (func_call #marshal.marshal #"WriteBytes"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Events"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.marshal #"WriteInt"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Events"%go "c")) in
    let: "$a2" := (func_call #event_gk.event_gk #"Marshal"%go) in
    (func_call #marshal.marshal #"WriteSlice"%go #event_gk.S) "$a0" "$a1" "$a2") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

(* go: calendar_gk.go:30:6 *)
Definition Unmarshal : val :=
  rec: "Unmarshal" "s" :=
    exception_do (let: "s" := (mem.alloc "s") in
    let: "hashBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadLenPrefixedBytes"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("hashBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "hash" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (let: "$a0" := (![#sliceT] "hashBytes") in
    (func_call #std.std #"BytesClone"%go) "$a0") in
    do:  ("hash" <-[#sliceT] "$r0");;;
    let: "eventsLen" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadInt"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("eventsLen" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "events" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    let: "$a1" := (![#uint64T] "eventsLen") in
    let: "$a2" := (func_call #event_gk.event_gk #"Unmarshal"%go) in
    (func_call #marshal.marshal #"ReadSlice"%go #event_gk.S) "$a0" "$a1" "$a2") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("events" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Hash" := (![#sliceT] "hash") in
     let: "$Events" := (![#sliceT] "events") in
     struct.make #S [{
       "Hash" ::= "$Hash";
       "Events" ::= "$Events"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("Marshal"%go, Marshal); ("Unmarshal"%go, Unmarshal)].

Definition msets' : list (go_string * (list (go_string * val))) := [("S"%go, []); ("S'ptr"%go, [])].

#[global] Instance info' : PkgInfo calendar_gk.calendar_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [std.std; marshal.marshal; event_gk.event_gk];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init calendar_gk.calendar_gk (Î»: <>,
      exception_do (do:  event_gk.initialize';;;
      do:  marshal.initialize';;;
      do:  std.initialize')
      ).

End code.
End calendar_gk.
