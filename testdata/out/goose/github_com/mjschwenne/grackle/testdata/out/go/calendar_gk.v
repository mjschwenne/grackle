(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/calendar_gk *)
From New.golang Require Import defn.
Require Export New.code.github_com.goose_lang.std.
Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.event_gk.
Require Export New.code.github_com.tchajed.marshal.

Definition calendar_gk : go_string := "github.com/mjschwenne/grackle/testdata/out/go/calendar_gk".

Module calendar_gk.
Section code.
Context `{ffi_syntax}.


Definition Sⁱᵈ : go_string := "github.com/mjschwenne/grackle/testdata/out/go/calendar_gk.S"%go.

Definition S : go_type := structT [
  "Hash" :: sliceT;
  "Events" :: sliceT
].

Definition Marshal : go_string := "github.com/mjschwenne/grackle/testdata/out/go/calendar_gk.Marshal"%go.

(* go: calendar_gk.go:20:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "c",
    exception_do (let: "c" := (mem.alloc "c") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Hash"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Hash"%go "c")) in
    (func_call #marshal.WriteBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Events"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Events"%go "c")) in
    let: "$a2" := (func_call #event_gk.Marshal) in
    (func_call #marshal.WriteSlice #event_gk.S) "$a0" "$a1" "$a2") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mjschwenne/grackle/testdata/out/go/calendar_gk.Unmarshal"%go.

(* go: calendar_gk.go:30:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "hashBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("hashBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "hash" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (let: "$a0" := (![#sliceT] "hashBytes") in
    (func_call #std.BytesClone) "$a0") in
    do:  ("hash" <-[#sliceT] "$r0");;;
    let: "eventsLen" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("eventsLen" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "events" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    let: "$a1" := (![#uint64T] "eventsLen") in
    let: "$a2" := (func_call #event_gk.Unmarshal) in
    (func_call #marshal.ReadSlice #event_gk.S) "$a0" "$a1" "$a2") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("events" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Hash" := (![#sliceT] "hash") in
     let: "$Events" := (![#sliceT] "events") in
     struct.make #S [{
       "Hash" ::= "$Hash";
       "Events" ::= "$Events"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(Sⁱᵈ, []); (ptrTⁱᵈ Sⁱᵈ, [])].

#[global] Instance info' : PkgInfo calendar_gk.calendar_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [std.std; marshal.marshal; event_gk.event_gk];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #calendar_gk.calendar_gk (λ: <>,
      exception_do (do:  (event_gk.initialize' #());;;
      do:  (marshal.initialize' #());;;
      do:  (std.initialize' #());;;
      do:  (package.alloc calendar_gk.calendar_gk #()))
      ).

End code.
End calendar_gk.
