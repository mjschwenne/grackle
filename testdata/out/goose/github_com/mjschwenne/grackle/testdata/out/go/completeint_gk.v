(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/completeint_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "One" :: uint32T;
  "Two" :: uint32T;
  "Three" :: uint32T;
  "Four" :: uint64T;
  "Five" :: uint64T;
  "Six" :: uint64T
].

Definition Marshal: val :=
  rec: "Marshal" "prefix" "c" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.get S "One" "c"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.get S "Two" "c"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.get S "Three" "c"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (struct.get S "Four" "c"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (struct.get S "Five" "c"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (struct.get S "Six" "c"));;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: "one" := ref (zero_val uint32T) in
    let: "two" := ref (zero_val uint32T) in
    let: "three" := ref (zero_val uint32T) in
    let: "four" := ref (zero_val uint64T) in
    let: "five" := ref (zero_val uint64T) in
    let: "six" := ref (zero_val uint64T) in
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    "one" <-[uint32T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    "two" <-[uint32T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    "three" <-[uint32T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "four" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "five" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "six" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    (struct.mk S [
       "One" ::= ![uint32T] "one";
       "Two" ::= ![uint32T] "two";
       "Three" ::= ![uint32T] "three";
       "Four" ::= ![uint64T] "four";
       "Five" ::= ![uint64T] "five";
       "Six" ::= ![uint64T] "six"
     ], ![slice.T byteT] "enc").

End code.
