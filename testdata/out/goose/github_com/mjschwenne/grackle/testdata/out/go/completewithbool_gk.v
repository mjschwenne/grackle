(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/completewithbool_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mjschwenne.grackle.testdata.out.go.completemessage_gk.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "Msg" :: ptrT;
  "Success" :: boolT
].

Definition S__approxSize: val :=
  rec: "S__approxSize" "c" :=
    #0.

Definition Marshal: val :=
  rec: "Marshal" "c" "prefix" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    control.impl.Assume ((struct.loadF S "Msg" "c") â‰  #null);;
    "enc" <-[slice.T byteT] (completemessage_gk.Marshal (struct.loadF S "Msg" "c") (![slice.T byteT] "enc"));;
    "enc" <-[slice.T byteT] (marshal.WriteBool (![slice.T byteT] "enc") (struct.loadF S "Success" "c"));;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "c" := struct.alloc S (zero_val (struct.t S)) in
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: ("0_ret", "1_ret") := completemessage_gk.Unmarshal (![slice.T byteT] "enc") in
    struct.storeF S "Msg" "c" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBool (![slice.T byteT] "enc") in
    struct.storeF S "Success" "c" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    ("c", ![slice.T byteT] "enc").

End code.
