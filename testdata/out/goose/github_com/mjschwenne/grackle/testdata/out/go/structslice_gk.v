(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/structslice_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Goose Require github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "Slices" :: slice.T (struct.t completeslice_gk.S);
  "Ints" :: slice.T (struct.t completeint_gk.S)
].

Definition Marshal: val :=
  rec: "Marshal" "prefix" "s" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len (struct.get S "Slices" "s")));;
    "enc" <-[slice.T byteT] (marshal.WriteSlice (struct.t completeslice_gk.S) (![slice.T byteT] "enc") (struct.get S "Slices" "s") completeslice_gk.Marshal);;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len (struct.get S "Ints" "s")));;
    "enc" <-[slice.T byteT] (marshal.WriteSlice (struct.t completeint_gk.S) (![slice.T byteT] "enc") (struct.get S "Ints" "s") completeint_gk.Marshal);;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: "slices" := ref (zero_val (slice.T (struct.t completeslice_gk.S))) in
    let: "ints" := ref (zero_val (slice.T (struct.t completeint_gk.S))) in
    let: "slicesLen" := ref (zero_val uint64T) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "slicesLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadSlice (struct.t completeslice_gk.S) (![slice.T byteT] "enc") (![uint64T] "slicesLen") completeslice_gk.Unmarshal in
    "slices" <-[slice.T (struct.t completeslice_gk.S)] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: "intsLen" := ref (zero_val uint64T) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "intsLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadSlice (struct.t completeint_gk.S) (![slice.T byteT] "enc") (![uint64T] "intsLen") completeint_gk.Unmarshal in
    "ints" <-[slice.T (struct.t completeint_gk.S)] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    (struct.mk S [
       "Slices" ::= ![slice.T (struct.t completeslice_gk.S)] "slices";
       "Ints" ::= ![slice.T (struct.t completeint_gk.S)] "ints"
     ], ![slice.T byteT] "enc").

End code.
