(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/event_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mjschwenne.grackle.testdata.out.go.timestamp_gk.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "Id" :: uint32T;
  "Name" :: ptrT;
  "StartTime" :: ptrT;
  "EndTime" :: ptrT
].

Definition S__approxSize: val :=
  rec: "S__approxSize" "e" :=
    #0.

Definition Marshal: val :=
  rec: "Marshal" "e" "prefix" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF S "Id" "e"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (StringLength (![stringT] (struct.loadF S "Name" "e"))));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") (StringToBytes (![stringT] (struct.loadF S "Name" "e"))));;
    "enc" <-[slice.T byteT] (timestamp_gk.Marshal (struct.loadF S "StartTime" "e") (![slice.T byteT] "enc"));;
    "enc" <-[slice.T byteT] (timestamp_gk.Marshal (struct.loadF S "EndTime" "e") (![slice.T byteT] "enc"));;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "e" := struct.alloc S (zero_val (struct.t S)) in
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF S "Id" "e" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: "nameLen" := ref (zero_val uint64T) in
    let: "nameBytes" := ref (zero_val (slice.T byteT)) in
    let: "nameStr" := ref (zero_val stringT) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "nameLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "nameLen") in
    "nameBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "nameStr" <-[stringT] (StringFromBytes (![slice.T byteT] "nameBytes"));;
    struct.storeF S "Name" "e" "nameStr";;
    let: ("0_ret", "1_ret") := timestamp_gk.Unmarshal (![slice.T byteT] "enc") in
    struct.storeF S "StartTime" "e" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := timestamp_gk.Unmarshal (![slice.T byteT] "enc") in
    struct.storeF S "EndTime" "e" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    ("e", ![slice.T byteT] "enc").

End code.
