(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/event_gk *)
From New.golang Require Import defn.
Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.timestamp_gk.
Require Export New.code.github_com.tchajed.marshal.

Definition event_gk : go_string := "github.com/mjschwenne/grackle/testdata/out/go/event_gk".

Module event_gk.
Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Id" :: uint32T;
  "Name" :: stringT;
  "StartTime" :: timestamp_gk.S;
  "EndTime" :: timestamp_gk.S
].

(* go: event_gk.go:21:6 *)
Definition Marshal : val :=
  rec: "Marshal" "enc" "e" :=
    exception_do (let: "e" := (mem.alloc "e") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #S #"Id"%go "e")) in
    (func_call #marshal.marshal #"WriteInt32"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (string.to_bytes (![#stringT] (struct.field_ref #S #"Name"%go "e"))) in
    (func_call #marshal.marshal #"WriteLenPrefixedBytes"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#timestamp_gk.S] (struct.field_ref #S #"StartTime"%go "e")) in
    (func_call #timestamp_gk.timestamp_gk #"Marshal"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#timestamp_gk.S] (struct.field_ref #S #"EndTime"%go "e")) in
    (func_call #timestamp_gk.timestamp_gk #"Marshal"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

(* go: event_gk.go:30:6 *)
Definition Unmarshal : val :=
  rec: "Unmarshal" "s" :=
    exception_do (let: "s" := (mem.alloc "s") in
    let: "id" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadInt32"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("id" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "nameLen" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadInt"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("nameLen" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "nameBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    let: "$a1" := (![#uint64T] "nameLen") in
    (func_call #marshal.marshal #"ReadBytesCopy"%go) "$a0" "$a1") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("nameBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "name" := (mem.alloc (type.zero_val #stringT)) in
    let: "$r0" := (string.from_bytes (![#sliceT] "nameBytes")) in
    do:  ("name" <-[#stringT] "$r0");;;
    let: "startTime" := (mem.alloc (type.zero_val #timestamp_gk.S)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #timestamp_gk.timestamp_gk #"Unmarshal"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("startTime" <-[#timestamp_gk.S] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "endTime" := (mem.alloc (type.zero_val #timestamp_gk.S)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #timestamp_gk.timestamp_gk #"Unmarshal"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("endTime" <-[#timestamp_gk.S] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Id" := (![#uint32T] "id") in
     let: "$Name" := (![#stringT] "name") in
     let: "$StartTime" := (![#timestamp_gk.S] "startTime") in
     let: "$EndTime" := (![#timestamp_gk.S] "endTime") in
     struct.make #S [{
       "Id" ::= "$Id";
       "Name" ::= "$Name";
       "StartTime" ::= "$StartTime";
       "EndTime" ::= "$EndTime"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("Marshal"%go, Marshal); ("Unmarshal"%go, Unmarshal)].

Definition msets' : list (go_string * (list (go_string * val))) := [("S"%go, []); ("S'ptr"%go, [])].

#[global] Instance info' : PkgInfo event_gk.event_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [marshal.marshal; timestamp_gk.timestamp_gk];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init event_gk.event_gk (Î»: <>,
      exception_do (do:  timestamp_gk.initialize';;;
      do:  marshal.initialize')
      ).

End code.
End event_gk.
