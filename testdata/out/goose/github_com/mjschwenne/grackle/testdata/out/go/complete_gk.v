(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/complete_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "Int" :: struct.t completeint_gk.S;
  "Success" :: boolT
].

Definition Marshal: val :=
  rec: "Marshal" "c" "prefix" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    "enc" <-[slice.T byteT] (completeint_gk.Marshal (struct.get S "Int" "c") (![slice.T byteT] "enc"));;
    "enc" <-[slice.T byteT] (marshal.WriteBool (![slice.T byteT] "enc") (struct.get S "Success" "c"));;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: "int" := ref (zero_val (struct.t completeint_gk.S)) in
    let: "success" := ref (zero_val boolT) in
    let: ("0_ret", "1_ret") := completeint_gk.Unmarshal (![slice.T byteT] "enc") in
    "int" <-[struct.t completeint_gk.S] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBool (![slice.T byteT] "enc") in
    "success" <-[boolT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    (struct.mk S [
       "Int" ::= ![struct.t completeint_gk.S] "int";
       "Success" ::= ![boolT] "success"
     ], ![slice.T byteT] "enc").

End code.
