(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "Strg" :: stringT;
  "Strg2" :: stringT;
  "Bytes" :: slice.T byteT;
  "Bytes2" :: slice.T byteT
].

Definition Marshal: val :=
  rec: "Marshal" "c" "prefix" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    let: "strgBytes" := StringToBytes (struct.get S "Strg" "c") in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "strgBytes"));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "strgBytes");;
    let: "strg2Bytes" := StringToBytes (struct.get S "Strg2" "c") in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "strg2Bytes"));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "strg2Bytes");;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len (struct.get S "Bytes" "c")));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") (struct.get S "Bytes" "c"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len (struct.get S "Bytes2" "c")));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") (struct.get S "Bytes2" "c"));;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: "strg" := ref (zero_val stringT) in
    let: "strg2" := ref (zero_val stringT) in
    let: "bytes" := ref (zero_val (slice.T byteT)) in
    let: "bytes2" := ref (zero_val (slice.T byteT)) in
    let: "strgLen" := ref (zero_val uint64T) in
    let: "strgBytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "strgLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "strgLen") in
    "strgBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "strg" <-[stringT] (StringFromBytes (![slice.T byteT] "strgBytes"));;
    let: "strg2Len" := ref (zero_val uint64T) in
    let: "strg2Bytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "strg2Len" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "strg2Len") in
    "strg2Bytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "strg2" <-[stringT] (StringFromBytes (![slice.T byteT] "strg2Bytes"));;
    let: "bytesLen" := ref (zero_val uint64T) in
    let: "bytesBytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "bytesLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "bytesLen") in
    "bytesBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "bytes" <-[slice.T byteT] (![slice.T byteT] "bytesBytes");;
    let: "bytes2Len" := ref (zero_val uint64T) in
    let: "bytes2Bytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "bytes2Len" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "bytes2Len") in
    "bytes2Bytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "bytes2" <-[slice.T byteT] (![slice.T byteT] "bytes2Bytes");;
    (struct.mk S [
       "Strg" ::= ![stringT] "strg";
       "Strg2" ::= ![stringT] "strg2";
       "Bytes" ::= ![slice.T byteT] "bytes";
       "Bytes2" ::= ![slice.T byteT] "bytes2"
     ], ![slice.T byteT] "enc").

End code.
