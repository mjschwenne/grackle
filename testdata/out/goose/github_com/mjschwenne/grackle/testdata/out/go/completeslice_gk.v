(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk *)
From New.golang Require Import defn.
Require Export New.code.github_com.goose_lang.primitive.
Require Export New.code.github_com.tchajed.marshal.

Definition completeslice_gk : go_string := "github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk".

Module completeslice_gk.
Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Strg" :: stringT;
  "Strg2" :: stringT;
  "Bytes" :: sliceT;
  "Bytes2" :: sliceT
].

(* go: completeslice_gk.go:20:6 *)
Definition Marshal : val :=
  rec: "Marshal" "enc" "c" :=
    exception_do (let: "c" := (mem.alloc "c") in
    let: "enc" := (mem.alloc "enc") in
    do:  (let: "$a0" := (![#stringT] (struct.field_ref #S #"Strg"%go "c")) in
    (func_call #primitive.primitive #"AssumeNoStringOverflow"%go) "$a0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (string.to_bytes (![#stringT] (struct.field_ref #S #"Strg"%go "c"))) in
    (func_call #marshal.marshal #"WriteLenPrefixedBytes"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    do:  (let: "$a0" := (![#stringT] (struct.field_ref #S #"Strg2"%go "c")) in
    (func_call #primitive.primitive #"AssumeNoStringOverflow"%go) "$a0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (string.to_bytes (![#stringT] (struct.field_ref #S #"Strg2"%go "c"))) in
    (func_call #marshal.marshal #"WriteLenPrefixedBytes"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Bytes"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.marshal #"WriteInt"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Bytes"%go "c")) in
    (func_call #marshal.marshal #"WriteBytes"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Bytes2"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.marshal #"WriteInt"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Bytes2"%go "c")) in
    (func_call #marshal.marshal #"WriteBytes"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

(* go: completeslice_gk.go:33:6 *)
Definition Unmarshal : val :=
  rec: "Unmarshal" "s" :=
    exception_do (let: "s" := (mem.alloc "s") in
    let: "strgBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadLenPrefixedBytes"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("strgBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "strg" := (mem.alloc (type.zero_val #stringT)) in
    let: "$r0" := (string.from_bytes (![#sliceT] "strgBytes")) in
    do:  ("strg" <-[#stringT] "$r0");;;
    let: "strg2Bytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadLenPrefixedBytes"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("strg2Bytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "strg2" := (mem.alloc (type.zero_val #stringT)) in
    let: "$r0" := (string.from_bytes (![#sliceT] "strg2Bytes")) in
    do:  ("strg2" <-[#stringT] "$r0");;;
    let: "bytesBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadLenPrefixedBytes"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("bytesBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "bytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (![#sliceT] "bytesBytes") in
    do:  ("bytes" <-[#sliceT] "$r0");;;
    let: "bytes2Bytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadLenPrefixedBytes"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("bytes2Bytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "bytes2" := (mem.alloc (type.zero_val #sliceT)) in
    let: "$r0" := (![#sliceT] "bytes2Bytes") in
    do:  ("bytes2" <-[#sliceT] "$r0");;;
    return: (let: "$Strg" := (![#stringT] "strg") in
     let: "$Strg2" := (![#stringT] "strg2") in
     let: "$Bytes" := (![#sliceT] "bytes") in
     let: "$Bytes2" := (![#sliceT] "bytes2") in
     struct.make #S [{
       "Strg" ::= "$Strg";
       "Strg2" ::= "$Strg2";
       "Bytes" ::= "$Bytes";
       "Bytes2" ::= "$Bytes2"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("Marshal"%go, Marshal); ("Unmarshal"%go, Unmarshal)].

Definition msets' : list (go_string * (list (go_string * val))) := [("S"%go, []); ("S'ptr"%go, [])].

#[global] Instance info' : PkgInfo completeslice_gk.completeslice_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [primitive.primitive; marshal.marshal];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init completeslice_gk.completeslice_gk (Î»: <>,
      exception_do (do:  marshal.initialize';;;
      do:  primitive.initialize')
      ).

End code.
End completeslice_gk.
