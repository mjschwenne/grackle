(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/completeslice_gk *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

Definition S := struct.decl [
  "Strg" :: stringT;
  "Byte" :: slice.T byteT
].

Definition S__approxSize: val :=
  rec: "S__approxSize" "c" :=
    #0.

Definition Marshal: val :=
  rec: "Marshal" "c" "prefix" :=
    let: "enc" := ref_to (slice.T byteT) "prefix" in
    let: "strgBytes" := StringToBytes (struct.loadF S "Strg" "c") in
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len "strgBytes"));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") "strgBytes");;
    "enc" <-[slice.T byteT] (marshal.WriteInt (![slice.T byteT] "enc") (slice.len (struct.loadF S "Byte" "c")));;
    "enc" <-[slice.T byteT] (marshal.WriteBytes (![slice.T byteT] "enc") (struct.loadF S "Byte" "c"));;
    ![slice.T byteT] "enc".

Definition Unmarshal: val :=
  rec: "Unmarshal" "s" :=
    let: "c" := struct.alloc S (zero_val (struct.t S)) in
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: "strgLen" := ref (zero_val uint64T) in
    let: "strgBytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "strgLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "strgLen") in
    "strgBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    struct.storeF S "Strg" "c" (StringFromBytes (![slice.T byteT] "strgBytes"));;
    let: "byteLen" := ref (zero_val uint64T) in
    let: "byteBytes" := ref (zero_val (slice.T byteT)) in
    let: ("0_ret", "1_ret") := marshal.ReadInt (![slice.T byteT] "enc") in
    "byteLen" <-[uint64T] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadBytesCopy (![slice.T byteT] "enc") (![uint64T] "byteLen") in
    "byteBytes" <-[slice.T byteT] "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    struct.storeF S "Byte" "c" (![slice.T byteT] "byteBytes");;
    ("c", ![slice.T byteT] "enc").

End code.
