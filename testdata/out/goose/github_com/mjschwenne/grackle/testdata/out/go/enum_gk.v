(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/enum_gk *)
From New.golang Require Import defn.
Require Export New.code.github_com.goose_lang.primitive.
Require Export New.code.github_com.goose_lang.std.
Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.error_gk.
Require Export New.code.github_com.tchajed.marshal.

Definition enum_gk : go_string := "github.com/mjschwenne/grackle/testdata/out/go/enum_gk".

Module enum_gk.
Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Op" :: stringT;
  "Err" :: error_gk.E
].

(* go: enum_gk.go:21:6 *)
Definition Marshal : val :=
  rec: "Marshal" "enc" "e" :=
    exception_do (let: "e" := (mem.alloc "e") in
    let: "enc" := (mem.alloc "enc") in
    do:  (let: "$a0" := (![#stringT] (struct.field_ref #S #"Op"%go "e")) in
    (func_call #primitive.primitive #"AssumeNoStringOverflow"%go) "$a0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (string.to_bytes (![#stringT] (struct.field_ref #S #"Op"%go "e"))) in
    (func_call #marshal.marshal #"WriteLenPrefixedBytes"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#error_gk.E] (struct.field_ref #S #"Err"%go "e")) in
    (func_call #marshal.marshal #"WriteInt32"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

(* go: enum_gk.go:29:6 *)
Definition Unmarshal : val :=
  rec: "Unmarshal" "s" :=
    exception_do (let: "s" := (mem.alloc "s") in
    let: "opBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadLenPrefixedBytes"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("opBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "op" := (mem.alloc (type.zero_val #stringT)) in
    let: "$r0" := (string.from_bytes (let: "$a0" := (![#sliceT] "opBytes") in
    (func_call #std.std #"BytesClone"%go) "$a0")) in
    do:  ("op" <-[#stringT] "$r0");;;
    let: "err_int" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadInt32"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("err_int" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "err" := (mem.alloc (type.zero_val #error_gk.E)) in
    let: "$r0" := (![#uint32T] "err_int") in
    do:  ("err" <-[#error_gk.E] "$r0");;;
    return: (let: "$Op" := (![#stringT] "op") in
     let: "$Err" := (![#error_gk.E] "err") in
     struct.make #S [{
       "Op" ::= "$Op";
       "Err" ::= "$Err"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("Marshal"%go, Marshal); ("Unmarshal"%go, Unmarshal)].

Definition msets' : list (go_string * (list (go_string * val))) := [("S"%go, []); ("S'ptr"%go, [])].

#[global] Instance info' : PkgInfo enum_gk.enum_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [primitive.primitive; std.std; marshal.marshal; error_gk.error_gk];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init enum_gk.enum_gk (Î»: <>,
      exception_do (do:  error_gk.initialize';;;
      do:  marshal.initialize';;;
      do:  std.initialize';;;
      do:  primitive.initialize')
      ).

End code.
End enum_gk.
