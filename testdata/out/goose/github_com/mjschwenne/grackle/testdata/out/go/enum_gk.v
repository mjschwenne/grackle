(* autogenerated from github.com/mjschwenne/grackle/testdata/out/go/enum_gk *)
Require Export New.code.github_com.goose_lang.primitive.
Require Export New.code.github_com.goose_lang.std.
Require Export New.code.github_com.mjschwenne.grackle.testdata.out.go.error_gk.
Require Export New.code.github_com.tchajed.marshal.

From New.golang Require Import defn.
Definition enum_gk : go_string := "github.com/mjschwenne/grackle/testdata/out/go/enum_gk".

Module enum_gk.

Module S. Definition id : go_string := "github.com/mjschwenne/grackle/testdata/out/go/enum_gk.S"%go. End S.

Section code.
Context `{ffi_syntax}.


Definition S : go_type := structT [
  "Op" :: stringT;
  "Err" :: error_gk.E;
  "Errs" :: sliceT
].

Definition Marshal : go_string := "github.com/mjschwenne/grackle/testdata/out/go/enum_gk.Marshal"%go.

(* go: enum_gk.go:22:6 *)
Definition Marshalⁱᵐᵖˡ : val :=
  λ: "enc" "e",
    exception_do (let: "e" := (mem.alloc "e") in
    let: "enc" := (mem.alloc "enc") in
    do:  (let: "$a0" := (![#stringT] (struct.field_ref #S #"Op"%go "e")) in
    (func_call #primitive.AssumeNoStringOverflow) "$a0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (string.to_bytes (![#stringT] (struct.field_ref #S #"Op"%go "e"))) in
    (func_call #marshal.WriteLenPrefixedBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#error_gk.E] (struct.field_ref #S #"Err"%go "e")) in
    (func_call #error_gk.Marshal) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #S #"Errs"%go "e")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #S #"Errs"%go "e")) in
    let: "$a2" := (func_call #error_gk.Marshal) in
    (func_call #marshal.WriteSlice #error_gk.E) "$a0" "$a1" "$a2") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition Unmarshal : go_string := "github.com/mjschwenne/grackle/testdata/out/go/enum_gk.Unmarshal"%go.

(* go: enum_gk.go:33:6 *)
Definition Unmarshalⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "opBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("opBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "op" := (mem.alloc (type.zero_val #stringT)) in
    let: "$r0" := (string.from_bytes (let: "$a0" := (![#sliceT] "opBytes") in
    (func_call #std.BytesClone) "$a0")) in
    do:  ("op" <-[#stringT] "$r0");;;
    let: "err" := (mem.alloc (type.zero_val #error_gk.E)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #error_gk.Unmarshal) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("err" <-[#error_gk.E] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "errsLen" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("errsLen" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "errs" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    let: "$a1" := (![#uint64T] "errsLen") in
    let: "$a2" := (func_call #error_gk.Unmarshal) in
    (func_call #marshal.ReadSlice #error_gk.E) "$a0" "$a1" "$a2") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("errs" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$Op" := (![#stringT] "op") in
     let: "$Err" := (![#error_gk.E] "err") in
     let: "$Errs" := (![#sliceT] "errs") in
     struct.make #S [{
       "Op" ::= "$Op";
       "Err" ::= "$Err";
       "Errs" ::= "$Errs"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(Marshal, Marshalⁱᵐᵖˡ); (Unmarshal, Unmarshalⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(S.id, []); (ptrT.id S.id, [])].

#[global] Instance info' : PkgInfo enum_gk.enum_gk :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [primitive.primitive; std.std; marshal.marshal; error_gk.error_gk];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #enum_gk.enum_gk (λ: <>,
      exception_do (do:  (error_gk.initialize' #());;;
      do:  (marshal.initialize' #());;;
      do:  (std.initialize' #());;;
      do:  (primitive.initialize' #());;;
      do:  (package.alloc enum_gk.enum_gk #()))
      ).

End code.
End enum_gk.
