(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From Perennial.goose_lang.lib.list Require Import list.
From Perennial.program_proof Require Import grove_prelude.
From Perennial.program_proof Require Import marshal_stateless_proof.
From Goose Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.

Module completeSlice.
Section completeSlice.

Typeclasses Opaque app.

Context `{!heapGS Σ}.

Record C :=
    mkC {
        strg : string;
        bytes : list u8;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le $ length $ string_to_bytes args.(strg)) ++ string_to_bytes args.(strg) ++
              (u64_le $ length $ args.(bytes)) ++ args.(bytes).

Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (bytes_sl : Slice.t), 
  "%Hown_struct" ∷ ⌜ args__v = (#(str args__c.(strg)), (slice_val bytes_sl, #()))%V ⌝ ∗
  "Hown_bytes" ∷ own_slice_small bytes_sl byteT dq args__c.(bytes).

Definition to_val' (c : C) : val :=
  (#(str c.(strg)), (val_of_list ((λ u : u8, #u) <$> c.(bytes)), #())).

Fixpoint opt_list {A:Type} (l : list (option A)) : option (list A) :=
  match l with
  | nil => Some nil
  | Some v :: l' => match opt_list l' with
                   | Some l'' => Some (v :: l'')
                   | None => None
                   end
  | None :: l' => None
  end.

Definition from_val' (v : val) : option C :=
  match v with
  | (#(LitString strg), (bytes, #()))%V =>
      match list_from_val bytes with
       | Some bytes =>
           match opt_list ((fun v : val => match v with
            | #(LitByte b) => Some b
            | _ => None
           end) <$> bytes) with
                      | Some bytes => Some (mkC strg bytes)
                      | None => None
                      end
       | None => None
      end
  | _ => None
  end.

#[global]
Instance completeSlice_into_val : IntoVal C.
Proof.
  refine {|
    to_val := to_val';
    from_val := from_val';
    IntoVal_def := (mkC "" [])
  |}.
  intros v. 
  destruct v as [strg bytes]; done.
Defined.

#[global]
Instance completeSlice_into_val_for_type : IntoValForType C (struct.t S).
Proof. constructor; auto 10. Defined.

Lemma own_to_val (v : val) (c : C) (dq : dfrac) :
  own v c dq -∗ own v c dq ∗ ⌜ v = to_val c ⌝.
Proof.
  iIntros "%Hown_struct".
  
  iUnfold own.
  iSplitL.
  + iPureIntro. done.
  + iPureIntro. done.
Qed.

Lemma wp_Encode (args__v : val) (args__c : C) (pre_sl : Slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        own args__v args__c dq ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    completeslice_gk.Marshal args__v (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__v args__c dq ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_apply wp_StringToBytes. iIntros (?) "Hargs_strg_enc". wp_pures.
  wp_apply (wp_slice_len).
  iDestruct (own_slice_sz with "Hargs_strg_enc") as "%Hargs_strg_sz".
  iApply own_slice_to_small in "Hargs_strg_enc".
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.
  wp_load. wp_apply (wp_WriteBytes with "[$Hsl $Hargs_strg_enc]").
  iIntros (?) "[Hsl _]". wp_store.

  iDestruct (own_slice_small_sz with "Hargs_bytes_sl") as "%Hargs_bytes_sz".
  wp_loadField. wp_apply wp_slice_len. wp_load.
  wp_apply (wp_WriteInt with "[$Hsl]"). iIntros (?) "Hsl". wp_store.

  wp_loadField. wp_load.
  wp_apply (wp_WriteBytes with "[$Hsl $Hargs_bytes_sl]").
  iIntros (?) "[Hsl Hargs_bytes_sl]". wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  
  rewrite ?string_bytes_length.
  rewrite Hargs_strg_sz.
  rewrite Hargs_bytes_sz.
  rewrite ?w64_to_nat_id. exact.

Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : Slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice_small enc_sl byteT dq (enc ++ suffix)
  }}}
    completeslice_gk.Unmarshal (slice_val enc_sl)
  {{{
        args__v suff_sl, RET (args__v, suff_sl);
        own args__v args__c (DfracOwn 1) ∗
        own_slice_small suff_sl byteT dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__strg) "Hstrg". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__bytes) "Hbytes". wp_pures.
  
  rewrite Henc. rewrite -?app_assoc.

  wp_apply wp_ref_of_zero; first done. iIntros (strgLen) "HstrgLen". wp_pures.
  wp_apply wp_ref_of_zero; first done. iIntros (strgBytes) "HstrgBytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hstrg_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hstrg_sz. word. }
  iIntros (??) "[Hstrg' Hsl]".

  wp_pures. wp_store. wp_store. wp_load.
  iApply own_slice_to_small in "Hstrg'".
  wp_apply (wp_StringFromBytes with "[$Hstrg']"). iIntros "_".
  wp_store.

  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "HbytesLen". iApply array_singleton in "HbytesLen". wp_pures.
  wp_apply wp_allocN; first done; first by val_ty.
  iIntros (?) "Hbytes". iApply array_singleton in "Hbytes". wp_pures.
  wp_load. wp_apply (wp_ReadInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store. wp_load. wp_load.

  iDestruct (own_slice_small_sz with "Hsl") as %Hbytes_sz.
  wp_apply (wp_ReadBytesCopy with "[$]").
  { rewrite length_app in Hbytes_sz. word. }
  iIntros (??) "[Hbytes' Hsl]". iApply own_slice_to_small in "Hbytes'".

  wp_pures. wp_store. wp_store. wp_load. wp_storeField.

  wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End completeSlice.
End completeSlice.

