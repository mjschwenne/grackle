(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module completeInt_gk.
Section completeInt_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit completeint_gk :=
  ltac2:(build_pkg_init ()).

Definition has_encoding (encoded:list u8) (args:completeint_gk.S.t) : Prop :=
  encoded = (u32_le args.(completeint_gk.S.One')) ++
              (u32_le args.(completeint_gk.S.Two')) ++
              (u32_le args.(completeint_gk.S.Three')) ++
              (u64_le args.(completeint_gk.S.Four')) ++
              (u64_le args.(completeint_gk.S.Five')) ++
              (u64_le args.(completeint_gk.S.Six')).

Lemma wp_Encode (args__c : completeint_gk.S.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeint_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    completeint_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  wp_start as "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.


  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : completeint_gk.S.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeint_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    completeint_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, #suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt32 with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.

  replace {|
    completeint_gk.S.One' := args__c.(completeint_gk.S.One');
    completeint_gk.S.Two' := args__c.(completeint_gk.S.Two');
    completeint_gk.S.Three' := args__c.(completeint_gk.S.Three');
    completeint_gk.S.Four' := args__c.(completeint_gk.S.Four');
    completeint_gk.S.Five' := args__c.(completeint_gk.S.Five');
    completeint_gk.S.Six' := args__c.(completeint_gk.S.Six')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
Qed.

End completeInt_gk.
End completeInt_gk.

