(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.proof Require Import github_com.goose_lang.primitive.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.

Module completeSlice_gk.
Section completeSlice_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit completeslice_gk :=
  ltac2:(build_pkg_init ()).

Definition C := completeslice_gk.S.t.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  encoded = (u64_le $ length $ args.(completeslice_gk.S.Strg')) ++ args.(completeslice_gk.S.Strg') ++
              (u64_le $ length $ args.(completeslice_gk.S.Strg2')) ++ args.(completeslice_gk.S.Strg2') ++
              (u64_le $ length $ args.(completeslice_gk.S.Bytes')) ++ args.(completeslice_gk.S.Bytes') ++
              (u64_le $ length $ args.(completeslice_gk.S.Bytes2')) ++ args.(completeslice_gk.S.Bytes2')
  /\ length args.(completeslice_gk.S.Strg') < 2^64
  /\ length args.(completeslice_gk.S.Strg2') < 2^64
  /\ length args.(completeslice_gk.S.Bytes') < 2^64
  /\ length args.(completeslice_gk.S.Bytes2') < 2^64.

Definition own (args__v: completeslice_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  "%Hown_strg" ∷ ⌜ args__v.(completeslice_gk.S.Strg') = args__c.(completeslice_gk.S.Strg') ⌝ ∗
  "%Hown_strg_len" ∷ ⌜ length args__c.(completeslice_gk.S.Strg') < 2^64 ⌝ ∗
  "%Hown_strg2" ∷ ⌜ args__v.(completeslice_gk.S.Strg2') = args__c.(completeslice_gk.S.Strg2') ⌝ ∗
  "%Hown_strg2_len" ∷ ⌜ length args__c.(completeslice_gk.S.Strg2') < 2^64 ⌝ ∗
  "Hown_bytes" ∷ own_slice args__v.(completeslice_gk.S.Bytes') dq args__c.(completeslice_gk.S.Bytes') ∗
  "%Hown_bytes_len" ∷ ⌜ length args__c.(completeslice_gk.S.Bytes') < 2^64 ⌝ ∗
  "Hown_bytes2" ∷ own_slice args__v.(completeslice_gk.S.Bytes2') dq args__c.(completeslice_gk.S.Bytes2') ∗
  "%Hown_bytes2_len" ∷ ⌜ length args__c.(completeslice_gk.S.Bytes2') < 2^64 ⌝.

Lemma wp_Encode (args__t : completeslice_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeslice_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    completeslice_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%HstrgLen". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "HstrgBytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $HstrgBytes]").
  iIntros (?) "(Hsl & Hcap & HstrgBytes)". wp_auto.

  wp_apply wp_AssumeNoStringOverflow. iIntros "%Hstrg2Len". wp_auto.
  wp_apply wp_StringToBytes. iIntros (?) "Hstrg2Bytes". wp_auto.
  wp_apply (wp_WriteLenPrefixedBytes with "[$Hsl $Hcap $Hstrg2Bytes]").
  iIntros (?) "(Hsl & Hcap & Hstrg2Bytes)". wp_auto.

  iDestruct (own_slice_len with "Hown_bytes") as "%Hown_bytes_sz".
  wp_apply (wp_WriteInt with "[$Hsl $Hcap]"). iIntros (?) "[Hsl Hcap]". wp_auto.
  wp_apply (wp_WriteBytes with "[$Hsl $Hcap $Hown_bytes]").
  iIntros (?) "(Hsl & Hcap & Hown_bytes)". wp_auto.

  iDestruct (own_slice_len with "Hown_bytes2") as "%Hown_bytes2_sz".
  wp_apply (wp_WriteInt with "[$Hsl $Hcap]"). iIntros (?) "[Hsl Hcap]". wp_auto.
  wp_apply (wp_WriteBytes with "[$Hsl $Hcap $Hown_bytes2]").
  iIntros (?) "(Hsl & Hcap & Hown_bytes2)". wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  
  congruence. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init completeslice_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    completeslice_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (& Henc & Hlen_strg & Hlen_strg2 & Hlen_bytes & Hlen_bytes2 ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hstrg_byt Hsl]". wp_auto.
  wp_apply (wp_StringFromBytes with "[$Hstrg_byt]").
  iIntros "Hstrg_byt". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hstrg2_byt Hsl]". wp_auto.
  wp_apply (wp_StringFromBytes with "[$Hstrg2_byt]").
  iIntros "Hstrg2_byt". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hown_hash Hsl]". wp_auto.

  wp_apply (wp_ReadLenPrefixedBytes with "[$Hsl]"); first word.
  iIntros (??) "[Hown_hash Hsl]". wp_auto.

  replace {|
    completeslice_gk.S.Strg' := args__c.(completeslice_gk.S.Strg');
    completeslice_gk.S.Strg2' := args__c.(completeslice_gk.S.Strg2');
    completeslice_gk.S.Bytes' := args__c.(completeslice_gk.S.Bytes');
    completeslice_gk.S.Bytes2' := args__c.(completeslice_gk.S.Bytes2')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
  done.
Qed.

End completeSlice_gk.
End completeSlice_gk.

