(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import structslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.

Module complete_gk.
Section complete_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit complete_gk :=
  ltac2:(build_pkg_init ()).

Record C :=
    mkC {
        int' :  completeInt_gk.C;
        slc' :  completeSlice_gk.C;
        success' :  bool;
        sslice' : list structSlice_gk.C;
        iints' : list u64;
        sints' : list u32;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (int_enc slc_enc sslice_enc iints_enc sints_enc : list u8), 
  encoded = int_enc ++
              slc_enc ++
              [if args.(success') then W8 1 else W8 0] ++
              (u64_le $ length $ args.(sslice')) ++ sslice_enc ++
              (u64_le $ length $ args.(iints')) ++ iints_enc ++
              (u64_le $ length $ args.(sints')) ++ sints_enc
  /\ completeInt_gk.has_encoding int_enc args.(int')
  /\ completeSlice_gk.has_encoding slc_enc args.(slc')
  /\ length args.(sslice') < 2^64
  /\ length args.(iints') < 2^64
  /\ length args.(sints') < 2^64.

Definition own (args__v: complete_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (l__sslice : list structslice_gk.S.t)(l__iints : list uint64.t)(l__sints : list uint32.t), 
  "Hown_int" ∷ completeInt_gk.own args__v.(complete_gk.S.Int') args__c.(int') dq ∗
  "Hown_slc" ∷ completeSlice_gk.own args__v.(complete_gk.S.Slc') args__c.(slc') dq ∗
  "Hown_success" ∷ ⌜ args__v.(complete_gk.S.Success') = args__c.(success') ⌝ ∗
  "Hown_sslice_sl" ∷ own_slice args__v.(complete_gk.S.Sslice') dq args__c.(sslice') ∗
  "Hown_sslice_own" ∷ ([∗ list] x;c ∈ l__sslice;args__c.(sslice'), structSlice_gk.own x c dq) ∗
  "Hown_iints_sl" ∷ own_slice args__v.(complete_gk.S.Iints') dq args__c.(iints') ∗
  "Hown_iints_own" ∷ ([∗ list] x;c ∈ l__iints;args__c.(iints'), <nil>_gk.own x c dq) ∗
  "Hown_sints_sl" ∷ own_slice args__v.(complete_gk.S.Sints') dq args__c.(sints') ∗
  "Hown_sints_own" ∷ ([∗ list] x;c ∈ l__sints;args__c.(sints'), <nil>_gk.own x c dq).

Lemma wp_Encode (args__c : complete_gk.S.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    complete_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  wp_start as "[Hsl Hcap]". wp_auto.

  wp_apply (completeInt_gk.wp_Encode with "[$Hsl $Hcap]"); first trivial.
  iIntros (int_enc ?) "(%Hargs_int_enc & Hsl & Hcap)". wp_auto.

  wp_apply (completeSlice_gk.wp_Encode with "[$Hsl $Hcap]"); first trivial.
  iIntros (slc_enc ?) "(%Hargs_slc_enc & Hsl & Hcap)". wp_auto.

  wp_load. wp_apply (wp_WriteBool with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(sslice) structSlice.has_encoding structSlice.own with "[Hown_sslice Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (structSlice.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (sslice_enc sslice_sl') "(Hpsl_sslice & %Henc_sslice & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(iints) uint64_has_encoding own_val with "[Hown_iints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (iints_enc iints_sl') "(Hpsl_iints & %Henc_iints & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(sints) uint32_has_encoding own_val with "[Hown_sints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt32 with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (sints_enc sints_sl') "(Hpsl_sints & %Henc_sints & Hsl)".
  wp_pures. wp_store.


  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  exists int_enc, slc_enc, sslice_enc, iints_enc, sints_enc. 
  split; first reflexivity.
  repeat split.
  all: word || done.
  
  
  
  
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : complete_gk.S.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    complete_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, #suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as ( int_enc & slc_enc & sslice_enc & iints_enc & sints_enc & Henc & Henc_int & Henc_slc & Henc_sslice & Hsslice_sz & Henc_iints & Hiints_sz & Henc_sints & Hsints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (completeInt_gk.wp_Decode int_enc with "[$Hsl]"); first done.
  iIntros (int__v) "Hsl". wp_auto.

  wp_apply (completeSlice_gk.wp_Decode slc_enc with "[$Hsl]"); first done.
  iIntros (slc__v) "Hsl". wp_auto.

  wp_load. wp_apply (wp_ReadBool with "[Hsl]").
  { simpl. iFrame. }
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args__c.(success)) as Hargs_success.
  { destruct args__c.(success); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success.
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__ssliceLen) "HssliceLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ structSlice.has_encoding structSlice.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply structSlice.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (structSlice.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_sslice Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__iintsLen) "HiintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ uint64_has_encoding own_val with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x. iPureIntro. by val_ty.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    iUnfold uint64_has_encoding in "Henc'".
    iDestruct "Henc'" as "%Henc_x".
    rewrite Henc_x.
    wp_apply (wp_ReadInt with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (??) "[Hpsl_iints Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__sintsLen) "HsintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ uint32_has_encoding own_val with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x. iPureIntro. by val_ty.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    iUnfold uint32_has_encoding in "Henc'".
    iDestruct "Henc'" as "%Henc_x".
    rewrite Henc_x.
    wp_apply (wp_ReadInt32 with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (??) "[Hpsl_sints Hsl]".
  wp_pures. wp_store. wp_store.

  replace {|
    complete_gk.S.Int' := args__c.(complete_gk.S.Int');
    complete_gk.S.Slc' := args__c.(complete_gk.S.Slc');
    complete_gk.S.Success' := args__c.(complete_gk.S.Success');
    complete_gk.S.Sslice' := args__c.(complete_gk.S.Sslice');
    complete_gk.S.Iints' := args__c.(complete_gk.S.Iints');
    complete_gk.S.Sints' := args__c.(complete_gk.S.Sints')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
Qed.

End complete_gk.
End complete_gk.

