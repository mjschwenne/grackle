(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import structslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.

Module complete_gk.
Section complete_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit complete_gk :=
  ltac2:(build_pkg_init ()).

Definition has_encoding (encoded:list u8) (args:complete_gk.complete.t) : Prop :=
  ∃ (int_enc slc_enc sslice_enc iints_enc sints_enc : list u8), 
  encoded = int_enc ++
              slc_enc ++
              [if args.(complete_gk.complete.success') then W8 1 else W8 0] ++
              (u64_le $ length $ args.(complete_gk.complete.sslice')) ++ sslice_enc ++
              (u64_le $ length $ args.(complete_gk.complete.iints')) ++ iints_enc ++
              (u64_le $ length $ args.(complete_gk.complete.sints')) ++ sints_enc
  /\ completeInt_gk.has_encoding int_enc args.(int)
  /\ completeSlice_gk.has_encoding slc_enc args.(slc)
  /\ encodes sslice_enc args.(complete_gk.complete.sslice) structSlice_gk.has_encoding
  /\ length args.(complete_gk.complete.sslice) < 2^64
  /\ encodes iints_enc args.(complete_gk.complete.iints) uint64_has_encoding
  /\ length args.(complete_gk.complete.iints) < 2^64
  /\ encodes sints_enc args.(complete_gk.complete.sints) uint32_has_encoding
  /\ length args.(complete_gk.complete.sints) < 2^64.

Lemma wp_Encode (args__c : complete_gk.complete.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    complete_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  iDestruct (pred_slice_sz with "Hown_sslice") as "%Hargs_sslice_sz".
  iDestruct (pred_slice_sz with "Hown_iints") as "%Hargs_iints_sz".
  iDestruct (pred_slice_sz with "Hown_sints") as "%Hargs_sints_sz".
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_load. wp_pures. wp_apply (completeInt.wp_Encode with "[$Hown_int $Hsl]").
  iIntros (int_enc int_sl) "(%Hargs_int_enc & Hargs_int_own & Hsl)".
  wp_store.

  wp_load. wp_pures. wp_apply (completeSlice.wp_Encode with "[$Hown_slc $Hsl]").
  iIntros (slc_enc slc_sl) "(%Hargs_slc_enc & Hargs_slc_own & Hsl)".
  wp_store.

  wp_load. wp_apply (wp_WriteBool with "[$Hsl]").
  iIntros (?) "Hsl". wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(sslice) structSlice.has_encoding structSlice.own with "[Hown_sslice Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (structSlice.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (sslice_enc sslice_sl') "(Hpsl_sslice & %Henc_sslice & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(iints) uint64_has_encoding own_val with "[Hown_iints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (iints_enc iints_sl') "(Hpsl_iints & %Henc_iints & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(sints) uint32_has_encoding own_val with "[Hown_sints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt32 with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (sints_enc sints_sl') "(Hpsl_sints & %Henc_sints & Hsl)".
  wp_pures. wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  exists int_enc, slc_enc, sslice_enc, iints_enc, sints_enc. 
  rewrite ?string_bytes_length.
  rewrite Hargs_sslice_sz.
  rewrite Hargs_iints_sz.
  rewrite Hargs_sints_sz.
  rewrite ?w64_to_nat_id.

  repeat split.
  all: word || done.
  
  
  
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : complete_gk.complete.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    complete_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__int) "Hint". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slc) "Hslc". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__success) "Hsuccess". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__sslice) "Hsslice". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__iints) "Hiints". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__sints) "Hsints". wp_pures.
  
  unfold has_encoding in Henc.
  destruct Henc as ( int_enc & slc_enc & sslice_enc & iints_enc & sints_enc & Henc & Henc_int & Henc_slc & Henc_sslice & Hsslice_sz & Henc_iints & Hiints_sz & Henc_sints & Hsints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_load. wp_apply (completeInt.wp_Decode int_enc with "[$Hsl //]").
  iIntros (int__v ?) "[Hown_int Hsl]".
  iDestruct (completeInt.own_val_ty with "Hown_int") as "%Hval_int".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (completeSlice.wp_Decode slc_enc with "[$Hsl //]").
  iIntros (slc__v ?) "[Hown_slc Hsl]".
  iDestruct (completeSlice.own_val_ty with "Hown_slc") as "%Hval_slc".
  wp_pures. wp_store. wp_store.

  wp_load. wp_apply (wp_ReadBool with "[Hsl]").
  { simpl. iFrame. }
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args__c.(success)) as Hargs_success.
  { destruct args__c.(success); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success.
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__ssliceLen) "HssliceLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ structSlice.has_encoding structSlice.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply structSlice.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (structSlice.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_sslice Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__iintsLen) "HiintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ uint64_has_encoding own_val with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x. iPureIntro. by val_ty.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    iUnfold uint64_has_encoding in "Henc'".
    iDestruct "Henc'" as "%Henc_x".
    rewrite Henc_x.
    wp_apply (wp_ReadInt with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (??) "[Hpsl_iints Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__sintsLen) "HsintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ uint32_has_encoding own_val with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iDestruct (own_val_to_val with "Hown'") as "%Hown_x".
    rewrite Hown_x. iPureIntro. by val_ty.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    iUnfold uint32_has_encoding in "Henc'".
    iDestruct "Henc'" as "%Henc_x".
    rewrite Henc_x.
    wp_apply (wp_ReadInt32 with "[$Hsl']").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (??) "[Hpsl_sints Hsl]".
  wp_pures. wp_store. wp_store.

  wp_load. wp_load. wp_load. wp_load. wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End complete_gk.
End complete_gk.

