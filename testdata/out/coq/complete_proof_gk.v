(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From Perennial.Helpers Require Import NamedProps.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.complete_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import structslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.

Module complete_gk.
Section complete_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit complete_gk :=
  ltac2:(build_pkg_init ()).

Record C :=
    mkC {
        int' :  completeInt_gk.C;
        slc' :  completeSlice_gk.C;
        success' :  bool;
        sslice' : list structSlice_gk.C;
        iints' : list u64;
        sints' : list u32;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (int_enc slc_enc sslice_enc iints_enc sints_enc : list u8), 
  encoded = int_enc ++
              slc_enc ++
              [if args.(success') then W8 1 else W8 0] ++
              (u64_le $ length $ args.(sslice')) ++ sslice_enc ++
              (u64_le $ length $ args.(iints')) ++ iints_enc ++
              (u64_le $ length $ args.(sints')) ++ sints_enc
  /\ completeInt_gk.has_encoding int_enc args.(int')
  /\ completeSlice_gk.has_encoding slc_enc args.(slc')
  /\ encodes sslice_enc args.(sslice') structSlice_gk.has_encoding
  /\ length args.(sslice') < 2^64
  /\ encodes iints_enc args.(iints') uint64_has_encoding
  /\ length args.(iints') < 2^64
  /\ encodes sints_enc args.(sints') uint32_has_encoding
  /\ length args.(sints') < 2^64.

Definition own (args__v: complete_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (l__sslice : list structslice_gk.S.t)(l__iints : list u64)(l__sints : list u32), 
  "Hown_int" ∷ completeInt_gk.own args__v.(complete_gk.S.Int') args__c.(int') dq ∗
  "Hown_slc" ∷ completeSlice_gk.own args__v.(complete_gk.S.Slc') args__c.(slc') dq ∗
  "%Hown_success" ∷ ⌜ args__v.(complete_gk.S.Success') = args__c.(success') ⌝ ∗
  "Hown_sslice_sl" ∷ own_slice args__v.(complete_gk.S.Sslice') dq l__sslice ∗
  "Hown_sslice_own" ∷ ([∗ list] x;c ∈ l__sslice;args__c.(sslice'), structSlice_gk.own x c dq) ∗
  "%Hown_sslice_len" ∷ ⌜ length l__sslice < 2^64 ⌝ ∗
  "Hown_iints_sl" ∷ own_slice args__v.(complete_gk.S.Iints') dq l__iints ∗
  "Hown_iints_own" ∷ ([∗ list] x;c ∈ l__iints;args__c.(iints'), own_prim x c dq) ∗
  "%Hown_iints_len" ∷ ⌜ length l__iints < 2^64 ⌝ ∗
  "Hown_sints_sl" ∷ own_slice args__v.(complete_gk.S.Sints') dq l__sints ∗
  "Hown_sints_own" ∷ ([∗ list] x;c ∈ l__sints;args__c.(sints'), own_prim x c dq) ∗
  "%Hown_sints_len" ∷ ⌜ length l__sints < 2^64 ⌝.

Lemma wp_Encode (args__t : complete_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl (DfracOwn 1)
  }}}
    complete_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl (DfracOwn 1)
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply (completeInt_gk.wp_Encode with "[$Hsl $Hcap $Hown_int]").
  iIntros (int_enc ?) "(%Hargs_int_enc & Hown_int & Hsl & Hcap)".
  wp_auto.

  wp_apply (completeSlice_gk.wp_Encode with "[$Hsl $Hcap $Hown_slc]").
  iIntros (slc_enc ?) "(%Hargs_slc_enc & Hown_slc & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteBool with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_sslice_sl") as "%Hown_sslice_sz".
  iDestruct (big_sepL2_length with "Hown_sslice_own") as "%Hown_sslice_sz'".
  rewrite Hown_sslice_sz' in Hown_sslice_sz.
  wp_apply (wp_WriteSlice with "[$Hsl $Hcap $Hown_sslice_sl $Hown_sslice_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    wp_apply (structSlice_gk.wp_Encode with "[$Hown $Hsl $Hcap]").
    iApply "HΦ".
  }
  iIntros (sslice_enc sslice_sl') "(Hown_sslice & Hown_sslice_own & %Henc_sslice & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_iints_sl") as "%Hown_iints_sz".
  iDestruct (big_sepL2_length with "Hown_iints_own") as "%Hown_iints_sz'".
  rewrite Hown_iints_sz' in Hown_iints_sz.
  wp_apply (wp_WriteSlice _ _ _ _ _ uint64_has_encoding with "[$Hsl $Hcap $Hown_iints_sl $Hown_iints_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    iDestruct (own_prim_eq with "Hown") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (iints_enc iints_sl') "(Hown_iints & Hown_iints_own & %Henc_iints & Hsl & Hcap)".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_sints_sl") as "%Hown_sints_sz".
  iDestruct (big_sepL2_length with "Hown_sints_own") as "%Hown_sints_sz'".
  rewrite Hown_sints_sz' in Hown_sints_sz.
  wp_apply (wp_WriteSlice _ _ _ _ _ uint32_has_encoding with "[$Hsl $Hcap $Hown_sints_sl $Hown_sints_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    iDestruct (own_prim_eq with "Hown") as "%Hown_x".
    rewrite Hown_x.
    wp_apply (wp_WriteInt32 with "[$Hsl $Hcap]").
    iIntros (?) "Hsl".
    iApply "HΦ".
    iFrame.
    done.
  }
  iIntros (sints_enc sints_sl') "(Hown_sints & Hown_sints_own & %Henc_sints & Hsl & Hcap)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists int_enc, slc_enc, sslice_enc, iints_enc, sints_enc.
  split.
  {
     rewrite Hown_success.
     rewrite Hown_sslice_sz.
     rewrite Hown_iints_sz.
     rewrite Hown_sints_sz.
     rewrite ?w64_to_nat_id.
     congruence.
  }
  rewrite <- Hown_sslice_sz'.
  rewrite <- Hown_iints_sz'.
  rewrite <- Hown_sints_sz'.
  done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init complete_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    complete_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as (int_enc & slc_enc & sslice_enc & iints_enc & sints_enc & Henc & Henc_int & Henc_slc & Henc_sslice & Hsslice_sz & Henc_iints & Hiints_sz & Henc_sints & Hsints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (completeInt_gk.wp_Decode int_enc with "[$Hsl]"); first done.
  iIntros (int__v ?) "[Hown_int Hsl]". wp_auto.

  wp_apply (completeSlice_gk.wp_Decode slc_enc with "[$Hsl]"); first done.
  iIntros (slc__v ?) "[Hown_slc Hsl]". wp_auto.

  wp_apply (wp_ReadBool with "[$Hsl]").
  iIntros (success_b ?) "[%Hsuccess Hsl]".
  assert (success_b = args__c.(success')) as Hargs_success.
  { destruct args__c.(success'); rewrite Hsuccess; reflexivity. }
  rewrite Hargs_success. wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    wp_apply (structSlice_gk.wp_Decode with "[$Hsl $Henc]").
    iApply "HΦ".
  }
  iIntros (???) "(Hown_sslice_sl & Hown_sslice_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_sslice_own") as "%Hown_sslice_sz".
  rewrite <- Hown_sslice_sz in Hsslice_sz.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice _ _ _ _ _ own_prim  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    iDestruct "Henc" as "%Hown_x".
    unfold uint64_has_encoding in Hown_x.
    rewrite Hown_x.
    wp_apply (wp_ReadInt with "[$Hsl]").
    iIntros (?) "Hsl".
    iApply "HΦ". iFrame.
    done.
  }
  iIntros (???) "(Hown_iints_sl & Hown_iints_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_iints_own") as "%Hown_iints_sz".
  rewrite <- Hown_iints_sz in Hiints_sz.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice _ _ _ _ _ own_prim  with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    iDestruct "Henc" as "%Hown_x".
    unfold uint32_has_encoding in Hown_x.
    rewrite Hown_x.
    wp_apply (wp_ReadInt32 with "[$Hsl]").
    iIntros (?) "Hsl".
    iApply "HΦ". iFrame.
    done.
  }
  iIntros (???) "(Hown_sints_sl & Hown_sints_own & Hsl)". wp_auto.
  iDestruct (big_sepL2_length with "Hown_sints_own") as "%Hown_sints_sz".
  rewrite <- Hown_sints_sz in Hsints_sz.

  iApply "HΦ". iFrame.
  done.
Qed.

End complete_gk.
End complete_gk.

