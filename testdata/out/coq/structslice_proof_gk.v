(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module structSlice_gk.
Section structSlice_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit structslice_gk :=
  ltac2:(build_pkg_init ()).

Definition has_encoding (encoded:list u8) (args:structslice_gk.structSlice.t) : Prop :=
  ∃ (slices_enc ints_enc : list u8), 
  encoded = (u64_le $ length $ args.(structslice_gk.structSlice.slices')) ++ slices_enc ++
              (u64_le $ length $ args.(structslice_gk.structSlice.ints')) ++ ints_enc
  /\ encodes slices_enc args.(structslice_gk.structSlice.slices) completeSlice_gk.has_encoding
  /\ length args.(structslice_gk.structSlice.slices) < 2^64
  /\ encodes ints_enc args.(structslice_gk.structSlice.ints) completeInt_gk.has_encoding
  /\ length args.(structslice_gk.structSlice.ints) < 2^64.

Lemma wp_Encode (args__c : structslice_gk.structSlice.t) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    structslice_gk @ "Marshal" #pre_sl #args__c
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  iIntros (?) "[Hown Hsl] HΦ".
  wp_rec. wp_pures.
  iUnfold own in "Hown". iNamed "Hown". rewrite Hown_struct.
  iDestruct (pred_slice_sz with "Hown_slices") as "%Hargs_slices_sz".
  iDestruct (pred_slice_sz with "Hown_ints") as "%Hargs_ints_sz".
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr". wp_pures.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(slices) completeSlice.has_encoding completeSlice.own with "[Hown_slices Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (completeSlice.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (slices_enc slices_sl') "(Hpsl_slices & %Henc_slices & Hsl)".
  wp_pures. wp_store.

  wp_apply (wp_slice_len).
  wp_load. wp_apply (wp_WriteInt with "[$Hsl]").
  iIntros (?) "Hsl". wp_store. wp_pures.

  wp_load.
  wp_apply (wp_WriteSlice _ _ args__c.(ints) completeInt.has_encoding completeInt.own with "[Hown_ints Hsl]").
  {
    iFrame.
    iIntros (????) "!>".
    iIntros (?) "[Hown' Hsl'] HΦ".
    wp_apply (completeInt.wp_Encode with "[$Hsl' $Hown']").
    iApply "HΦ".
  }
  iIntros (ints_enc ints_sl') "(Hpsl_ints & %Henc_ints & Hsl)".
  wp_pures. wp_store.


  wp_load. iApply "HΦ". iModIntro. rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding. split.
  {
  exists slices_enc, ints_enc. 
  rewrite ?string_bytes_length.
  rewrite Hargs_slices_sz.
  rewrite Hargs_ints_sz.
  rewrite ?w64_to_nat_id.

  repeat split.
  all: word || done.
  } done.
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : structslice_gk.structSlice.t) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    structslice_gk @ "Unmarshal" #enc_sl
  {{{
        suff_sl, RET (#args__c, suff_sl);
        own_slice suff_sl dq suffix
  }}}.

Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_ref_to; first done.
  iIntros (l__s) "Hs". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slices) "Hslices". wp_pures.
  
  wp_apply wp_ref_of_zero; first done.
  iIntros (l__ints) "Hints". wp_pures.
  
  unfold has_encoding in Henc.
  destruct Henc as ( slices_enc & ints_enc & Henc & Henc_slices & Hslices_sz & Henc_ints & Hints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__slicesLen) "HslicesLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ completeSlice.has_encoding completeSlice.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply completeSlice.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (completeSlice.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_slices Hsl]".
  wp_pures. wp_store. wp_store.

  wp_apply wp_ref_of_zero; first done.
  iIntros (l__intsLen) "HintsLen". wp_pures.

  wp_load. wp_apply (wp_ReadInt with "[Hsl]"); first simpl; iFrame.
  iIntros (?) "Hsl". wp_pures. wp_store. wp_store.

  wp_load. wp_load.
  wp_apply (wp_ReadSlice _ _ _ _ completeInt.has_encoding completeInt.own with "[Hsl]").
  {
    iIntros (???) "Hown'".
    iApply completeInt.own_val_ty.
    iFrame.
  } { done. }
  {
    iFrame.
    iSplit; first done.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl' Henc'] HΦ".
    wp_apply (completeInt.wp_Decode with "[$Hsl' $Henc']").
    iApply "HΦ".
  }
  iIntros (??) "[Hpsl_ints Hsl]".
  wp_pures. wp_store. wp_store.

  wp_load. wp_load. wp_load.
  wp_pures. iApply "HΦ". iModIntro. rewrite ?string_to_bytes_to_string. iFrame.
  iPureIntro. reflexivity.
Qed.

End structSlice_gk.
End structSlice_gk.

