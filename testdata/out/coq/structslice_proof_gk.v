(*****************************************)
(* This file is autogenerated by grackle *)
(*    DO NOT MANUALLY EDIT THIS FILE     *)
(*****************************************)

From New.proof Require Import proof_prelude.
From New.proof Require Import github_com.tchajed.marshal.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From New.generatedproof Require Import github_com.mjschwenne.grackle.testdata.out.go.structslice_gk.
From Grackle.test Require Import completeslice_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeslice_gk.
From Grackle.test Require Import completeint_proof_gk.
From New.code Require Import github_com.mjschwenne.grackle.testdata.out.go.completeint_gk.

Module structSlice_gk.
Section structSlice_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

#[global]
Program Instance : IsPkgInit structslice_gk :=
  ltac2:(build_pkg_init ()).

Record C :=
    mkC {
        slices' : list completeSlice_gk.C;
        ints' : list completeInt_gk.C;
        }.

Definition has_encoding (encoded:list u8) (args:C) : Prop :=
  ∃ (slices_enc ints_enc : list u8), 
  encoded = (u64_le $ length $ args.(slices')) ++ slices_enc ++
              (u64_le $ length $ args.(ints')) ++ ints_enc
  /\ encodes slices_enc args.(slices') completeSlice_gk.has_encoding
  /\ length args.(slices') < 2^64
  /\ encodes ints_enc args.(ints') completeInt_gk.has_encoding
  /\ length args.(ints') < 2^64.

Definition own (args__v: structslice_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  ∃ (l__slices : list completeslice_gk.S.t)(l__ints : list completeint_gk.S.t), 
  "Hown_slices_sl" ∷ own_slice args__v.(structslice_gk.S.Slices') dq l__slices ∗
  "Hown_slices_own" ∷ ([∗ list] x;c ∈ l__slices;args__c.(slices'), completeSlice_gk.own x c dq) ∗
  "%Hown_slices_len" ∷ ⌜ length l__slices < 2^64 ⌝ ∗
  "Hown_ints_sl" ∷ own_slice args__v.(structslice_gk.S.Ints') dq l__ints ∗
  "Hown_ints_own" ∷ ([∗ list] x;c ∈ l__ints;args__c.(ints'), completeInt_gk.own x c dq) ∗
  "%Hown_ints_len" ∷ ⌜ length l__ints < 2^64 ⌝.

Lemma wp_Encode (args__t : structslice_gk.S.t) (args__c : C) (pre_sl : slice.t) (prefix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        own args__t args__c dq ∗ 
        own_slice pre_sl (DfracOwn 1) prefix ∗
        own_slice_cap w8 pre_sl
  }}}
    structslice_gk @ "Marshal" #pre_sl #args__t
  {{{
        enc enc_sl, RET #enc_sl;
        ⌜ has_encoding enc args__c ⌝ ∗
        own args__t args__c dq ∗ 
        own_slice enc_sl (DfracOwn 1) (prefix ++ enc) ∗
        own_slice_cap w8 enc_sl
  }}}.

Proof.
  wp_start as "(Hown & Hsl & Hcap)". iNamed "Hown". wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_slices_sl") as "%Hown_slices_sz".
  iDestruct (big_sepL2_length with "Hown_slices_own") as "%Hown_slices_sz'".
  rewrite Hown_slices_sz' in Hown_slices_sz.
  wp_apply (wp_WriteSlice with "[$Hsl $Hown_slices_sl $Hown_slices_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    wp_apply (completeSlice_gk.wp_Encode with "[$Hown $Hsl $Hcap]").
    iApply "HΦ".
  }
  iIntros (slices_enc slices_sl') "(Hown_slices & Hown_slices_own & %Henc_slices & Hsl)".
  wp_auto.

  wp_apply (wp_WriteInt with "[$Hsl $Hcap]").
  iIntros (?) "[Hsl Hcap]". wp_auto.

  iDestruct (own_slice_len with "Hown_ints_sl") as "%Hown_ints_sz".
  iDestruct (big_sepL2_length with "Hown_ints_own") as "%Hown_ints_sz'".
  rewrite Hown_ints_sz' in Hown_ints_sz.
  wp_apply (wp_WriteSlice with "[$Hsl $Hown_ints_sl $Hown_ints_own]").
  {
    iIntros (????) "!>".
    iIntros (?) "(Hown & Hsl & Hcap) HΦ".
    wp_apply (completeInt_gk.wp_Encode with "[$Hown $Hsl $Hcap]").
    iApply "HΦ".
  }
  iIntros (ints_enc ints_sl') "(Hown_ints & Hown_ints_own & %Henc_ints & Hsl)".
  wp_auto.

  iApply "HΦ". rewrite -?app_assoc.
  iFrame. iPureIntro.

  unfold has_encoding.
  split; last done.
  exists slices_enc, ints_enc.
  split.
  {
     rewrite Hown_slices_sz.
     rewrite Hown_ints_sz.
     rewrite ?w64_to_nat_id.
     congruence.
  }
  rewrite <- Hown_slices_sz'.
  rewrite <- Hown_ints_sz'.
  done. 
Qed.

Lemma wp_Decode (enc : list u8) (enc_sl : slice.t) (args__c : C) (suffix : list u8) (dq : dfrac):
  {{{
        is_pkg_init structslice_gk ∗
        ⌜ has_encoding enc args__c ⌝ ∗
        own_slice enc_sl dq (enc ++ suffix)
  }}}
    structslice_gk @ "Unmarshal" #enc_sl
  {{{
        args__t suff_sl, RET (#args__t, #suff_sl);
        own args__t args__c (DfracOwn 1) ∗ 
        own_slice suff_sl dq suffix
  }}}.

Proof.
  wp_start as "[%Henc Hsl]". wp_auto.
  unfold has_encoding in Henc.
  destruct Henc as ( slices_enc & ints_enc & Henc & Henc_slices & Hslices_sz & Henc_ints & Hints_sz ).
  rewrite Henc. rewrite -?app_assoc.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    wp_apply (completeSlice_gk.wp_Decode with "[$Hsl $Henc]").
    iApply "HΦ".
  }
  iIntros (???) "(Hown_slices_sl & Hown_slices_own & Hsl)". wp_auto.

  wp_apply (wp_ReadInt with "[$Hsl]"). iIntros (?) "Hsl". wp_auto.
  wp_apply (wp_ReadSlice with "[$Hsl]").
  {
    iSplit; auto.
    iSplit; first word.
    iIntros (????) "!>".
    iIntros (?) "[Hsl Henc] HΦ".
    wp_apply (completeInt_gk.wp_Decode with "[$Hsl $Henc]").
    iApply "HΦ".
  }
  iIntros (???) "(Hown_ints_sl & Hown_ints_own & Hsl)". wp_auto.

  replace {|
    structslice_gk.S.Slices' := args__c.(structslice_gk.S.Slices');
    structslice_gk.S.Ints' := args__c.(structslice_gk.S.Ints')
  |} with args__c; last (destruct args__c; reflexivity).
  iApply "HΦ". iFrame.
  done.
Qed.

End structSlice_gk.
End structSlice_gk.

