(* autogenerated from example/example *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.

(* event.go *)

Definition Event := struct.decl [
  "id" :: uint32T;
  "start" :: ptrT;
  "end" :: ptrT
].

(* TimeStamp__maxSize from timestamp.go *)

Definition TimeStamp__maxSize: val :=
  rec: "TimeStamp__maxSize" "t" :=
    #12.

Definition Event__maxSize: val :=
  rec: "Event__maxSize" "e" :=
    (#4 + (TimeStamp__maxSize (struct.loadF Event "start" "e"))) + (TimeStamp__maxSize (struct.loadF Event "end" "e")).

Definition TimeStamp := struct.decl [
  "hour" :: uint32T;
  "minute" :: uint32T;
  "second" :: uint32T
].

Definition MarshalTimeStamp: val :=
  rec: "MarshalTimeStamp" "t" "prefix" :=
    let: "enc" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 (TimeStamp__maxSize "t")) in
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF TimeStamp "hour" "t"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF TimeStamp "minute" "t"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF TimeStamp "second" "t"));;
    SliceAppendSlice byteT "prefix" (![slice.T byteT] "enc").

Definition MarshalEvent: val :=
  rec: "MarshalEvent" "e" "prefix" :=
    let: "enc" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 (Event__maxSize "e")) in
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF Event "id" "e"));;
    "enc" <-[slice.T byteT] (MarshalTimeStamp (struct.loadF Event "start" "e") (![slice.T byteT] "enc"));;
    "enc" <-[slice.T byteT] (MarshalTimeStamp (struct.loadF Event "end" "e") (![slice.T byteT] "enc"));;
    SliceAppendSlice byteT "prefix" (![slice.T byteT] "enc").

Definition UnmarshalTimeStamp: val :=
  rec: "UnmarshalTimeStamp" "s" :=
    let: "t" := struct.alloc TimeStamp (zero_val (struct.t TimeStamp)) in
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF TimeStamp "hour" "t" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF TimeStamp "minute" "t" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF TimeStamp "second" "t" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    ("t", ![slice.T byteT] "enc").

Definition UnmarshalEvent: val :=
  rec: "UnmarshalEvent" "s" :=
    let: "e" := struct.alloc Event (zero_val (struct.t Event)) in
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF Event "id" "e" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := UnmarshalTimeStamp (SliceTake (![slice.T byteT] "enc") #12) in
    struct.storeF Event "start" "e" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := UnmarshalTimeStamp (SliceTake (![slice.T byteT] "enc") #12) in
    struct.storeF Event "end" "e" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    ("e", ![slice.T byteT] "enc").

(* timestamp.go *)

End code.
