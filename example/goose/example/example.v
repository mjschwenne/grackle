(* autogenerated from example/example *)
From Perennial.goose_lang Require Import prelude.
From Goose Require github_com.tchajed.marshal.

Section code.
Context `{ext_ty: ext_types}.
Local Coercion Var' s: expr := Var s.

Definition TimeStamp := struct.decl [
  "hour" :: uint32T;
  "minute" :: uint32T;
  "second" :: uint32T
].

Definition MarshalTimeStamp: val :=
  rec: "MarshalTimeStamp" "t" :=
    let: "enc" := ref_to (slice.T byteT) (NewSliceWithCap byteT #0 #12) in
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF TimeStamp "hour" "t"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF TimeStamp "minute" "t"));;
    "enc" <-[slice.T byteT] (marshal.WriteInt32 (![slice.T byteT] "enc") (struct.loadF TimeStamp "second" "t"));;
    ![slice.T byteT] "enc".

Definition UnmarshalTimeStamp: val :=
  rec: "UnmarshalTimeStamp" "s" :=
    let: "t" := struct.alloc TimeStamp (zero_val (struct.t TimeStamp)) in
    let: "enc" := ref_to (slice.T byteT) "s" in
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF TimeStamp "hour" "t" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF TimeStamp "minute" "t" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    let: ("0_ret", "1_ret") := marshal.ReadInt32 (![slice.T byteT] "enc") in
    struct.storeF TimeStamp "second" "t" "0_ret";;
    "enc" <-[slice.T byteT] "1_ret";;
    "t".

End code.
