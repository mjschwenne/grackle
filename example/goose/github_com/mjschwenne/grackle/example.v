(* autogenerated from github.com/mjschwenne/grackle/example *)
From New.golang Require Import defn.
Require Export New.code.github_com.goose_lang.primitive.
Require Export New.code.github_com.goose_lang.std.
Require Export New.code.github_com.tchajed.marshal.

Definition example : go_string := "github.com/mjschwenne/grackle/example".

Module example.
Section code.
Context `{ffi_syntax}.


Definition Calendarⁱᵈ : go_string := "github.com/mjschwenne/grackle/example.Calendar"%go.

Definition Calendar : go_type := structT [
  "hash" :: sliceT;
  "events" :: sliceT
].

Definition MarshalCalendar : go_string := "github.com/mjschwenne/grackle/example.MarshalCalendar"%go.

Definition TimeStamp : go_type := structT [
  "hour" :: uint32T;
  "minute" :: uint32T;
  "second" :: uint32T
].

Definition Event : go_type := structT [
  "id" :: uint32T;
  "name" :: stringT;
  "startTime" :: TimeStamp;
  "endTime" :: TimeStamp
].

Definition MarshalEvent : go_string := "github.com/mjschwenne/grackle/example.MarshalEvent"%go.

(* go: calendar.go:11:6 *)
Definition MarshalCalendarⁱᵐᵖˡ : val :=
  λ: "enc" "c",
    exception_do (let: "c" := (mem.alloc "c") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#sliceT] (struct.field_ref #Calendar #"hash"%go "c")) in
    (func_call #marshal.WriteLenPrefixedBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (s_to_w64 (let: "$a0" := (![#sliceT] (struct.field_ref #Calendar #"events"%go "c")) in
    slice.len "$a0")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (let: "$a0" := (![#sliceT] "enc") in
     let: "$a1" := (![#sliceT] (struct.field_ref #Calendar #"events"%go "c")) in
     let: "$a2" := (func_call #MarshalEvent) in
     (func_call #marshal.WriteSlice #Event) "$a0" "$a1" "$a2")).

Definition UnmarshalCalendar : go_string := "github.com/mjschwenne/grackle/example.UnmarshalCalendar"%go.

Definition UnmarshalEvent : go_string := "github.com/mjschwenne/grackle/example.UnmarshalEvent"%go.

(* go: calendar.go:17:6 *)
Definition UnmarshalCalendarⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "hash" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("hash" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "hash") in
    (func_call #std.BytesClone) "$a0") in
    do:  ("hash" <-[#sliceT] "$r0");;;
    let: "eventsLen" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("eventsLen" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "events" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    let: "$a1" := (![#uint64T] "eventsLen") in
    let: "$a2" := (func_call #UnmarshalEvent) in
    (func_call #marshal.ReadSlice #Event) "$a0" "$a1" "$a2") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("events" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$hash" := (![#sliceT] "hash") in
     let: "$events" := (![#sliceT] "events") in
     struct.make #Calendar [{
       "hash" ::= "$hash";
       "events" ::= "$events"
     }], ![#sliceT] "s")).

Definition Statusⁱᵈ : go_string := "github.com/mjschwenne/grackle/example.Status"%go.

Definition Status : go_type := uint64T.

Definition STATUS_UNSPECIFIED : expr := #(W64 0).

Definition STATUS_STUDENT : expr := #(W64 1).

Definition STATUS_STAFF : expr := #(W64 2).

Definition STATUS_PROFESSOR : expr := #(W64 3).

Definition Personⁱᵈ : go_string := "github.com/mjschwenne/grackle/example.Person"%go.

Definition Person : go_type := structT [
  "Name" :: stringT;
  "Status" :: Status
].

Definition MarshalPerson : go_string := "github.com/mjschwenne/grackle/example.MarshalPerson"%go.

(* go: enum.go:22:6 *)
Definition MarshalPersonⁱᵐᵖˡ : val :=
  λ: "enc" "p",
    exception_do (let: "p" := (mem.alloc "p") in
    let: "enc" := (mem.alloc "enc") in
    do:  (let: "$a0" := (![#stringT] (struct.field_ref #Person #"Name"%go "p")) in
    (func_call #primitive.AssumeNoStringOverflow) "$a0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (string.to_bytes (![#stringT] (struct.field_ref #Person #"Name"%go "p"))) in
    (func_call #marshal.WriteLenPrefixedBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#Status] (struct.field_ref #Person #"Status"%go "p")) in
    (func_call #marshal.WriteInt) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition UnmarshalPerson : go_string := "github.com/mjschwenne/grackle/example.UnmarshalPerson"%go.

(* go: enum.go:29:6 *)
Definition UnmarshalPersonⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "name" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("name" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "status_int" := (mem.alloc (type.zero_val #uint64T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("status_int" <-[#uint64T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "status" := (mem.alloc (type.zero_val #Status)) in
    let: "$r0" := (![#uint64T] "status_int") in
    do:  ("status" <-[#Status] "$r0");;;
    return: (let: "$Name" := (string.from_bytes (![#sliceT] "name")) in
     let: "$Status" := (![#Status] "status") in
     struct.make #Person [{
       "Name" ::= "$Name";
       "Status" ::= "$Status"
     }], ![#sliceT] "s")).

Definition Eventⁱᵈ : go_string := "github.com/mjschwenne/grackle/example.Event"%go.

Definition MarshalTimeStamp : go_string := "github.com/mjschwenne/grackle/example.MarshalTimeStamp"%go.

(* go: event.go:15:6 *)
Definition MarshalEventⁱᵐᵖˡ : val :=
  λ: "enc" "e",
    exception_do (let: "e" := (mem.alloc "e") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #Event #"id"%go "e")) in
    (func_call #marshal.WriteInt32) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    do:  (let: "$a0" := (![#stringT] (struct.field_ref #Event #"name"%go "e")) in
    (func_call #primitive.AssumeNoStringOverflow) "$a0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (string.to_bytes (![#stringT] (struct.field_ref #Event #"name"%go "e"))) in
    (func_call #marshal.WriteLenPrefixedBytes) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#TimeStamp] (struct.field_ref #Event #"startTime"%go "e")) in
    (func_call #MarshalTimeStamp) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#TimeStamp] (struct.field_ref #Event #"endTime"%go "e")) in
    (func_call #MarshalTimeStamp) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

Definition UnmarshalTimeStamp : go_string := "github.com/mjschwenne/grackle/example.UnmarshalTimeStamp"%go.

(* go: event.go:24:6 *)
Definition UnmarshalEventⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "id" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt32) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("id" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "nameBytes" := (mem.alloc (type.zero_val #sliceT)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadLenPrefixedBytes) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("nameBytes" <-[#sliceT] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "startTime" := (mem.alloc (type.zero_val #TimeStamp)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #UnmarshalTimeStamp) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("startTime" <-[#TimeStamp] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "endTime" := (mem.alloc (type.zero_val #TimeStamp)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #UnmarshalTimeStamp) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("endTime" <-[#TimeStamp] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$id" := (![#uint32T] "id") in
     let: "$name" := (string.from_bytes (![#sliceT] "nameBytes")) in
     let: "$startTime" := (![#TimeStamp] "startTime") in
     let: "$endTime" := (![#TimeStamp] "endTime") in
     struct.make #Event [{
       "id" ::= "$id";
       "name" ::= "$name";
       "startTime" ::= "$startTime";
       "endTime" ::= "$endTime"
     }], ![#sliceT] "s")).

Definition TimeStampⁱᵈ : go_string := "github.com/mjschwenne/grackle/example.TimeStamp"%go.

(* go: timestamp.go:11:6 *)
Definition MarshalTimeStampⁱᵐᵖˡ : val :=
  λ: "enc" "t",
    exception_do (let: "t" := (mem.alloc "t") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #TimeStamp #"hour"%go "t")) in
    (func_call #marshal.WriteInt32) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #TimeStamp #"minute"%go "t")) in
    (func_call #marshal.WriteInt32) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #TimeStamp #"second"%go "t")) in
    (func_call #marshal.WriteInt32) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

(* go: timestamp.go:18:6 *)
Definition UnmarshalTimeStampⁱᵐᵖˡ : val :=
  λ: "s",
    exception_do (let: "s" := (mem.alloc "s") in
    let: "hour" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt32) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("hour" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "minute" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt32) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("minute" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "second" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.ReadInt32) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("second" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$hour" := (![#uint32T] "hour") in
     let: "$minute" := (![#uint32T] "minute") in
     let: "$second" := (![#uint32T] "second") in
     struct.make #TimeStamp [{
       "hour" ::= "$hour";
       "minute" ::= "$minute";
       "second" ::= "$second"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [(MarshalCalendar, MarshalCalendarⁱᵐᵖˡ); (UnmarshalCalendar, UnmarshalCalendarⁱᵐᵖˡ); (MarshalPerson, MarshalPersonⁱᵐᵖˡ); (UnmarshalPerson, UnmarshalPersonⁱᵐᵖˡ); (MarshalEvent, MarshalEventⁱᵐᵖˡ); (UnmarshalEvent, UnmarshalEventⁱᵐᵖˡ); (MarshalTimeStamp, MarshalTimeStampⁱᵐᵖˡ); (UnmarshalTimeStamp, UnmarshalTimeStampⁱᵐᵖˡ)].

Definition msets' : list (go_string * (list (go_string * val))) := [(Calendarⁱᵈ, []); (ptrTⁱᵈ Calendarⁱᵈ, []); (Statusⁱᵈ, []); (ptrTⁱᵈ Statusⁱᵈ, []); (Personⁱᵈ, []); (ptrTⁱᵈ Personⁱᵈ, []); (Eventⁱᵈ, []); (ptrTⁱᵈ Eventⁱᵈ, []); (TimeStampⁱᵈ, []); (ptrTⁱᵈ TimeStampⁱᵈ, [])].

#[global] Instance info' : PkgInfo example.example :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [marshal.marshal; std.std; primitive.primitive];
  |}.

Definition initialize' : val :=
  λ: <>,
    package.init #example.example (λ: <>,
      exception_do (do:  (primitive.initialize' #());;;
      do:  (std.initialize' #());;;
      do:  (marshal.initialize' #());;;
      do:  (package.alloc example.example #()))
      ).

End code.
End example.
