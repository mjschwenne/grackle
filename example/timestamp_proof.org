#+PROPERTY: header-args coq :tangle timestamp_proof.v
#+title: Marshal Proof
#+author: Matt Schwennesen
#+date: [2024-09-13 Fri]

* File Annotations

This file is a literate file for =timestamp_proof.v=, containing information on both
what the proofs are doing and where each part of the (not annotated) file will
be generated from.

* File Structure

Eventually this whole file will need to be automatically generated. To do that,
we have to understand when and where are part needs to come from. This file
breaks the structure of =timestamp_proof.v= down into a hierarchical structure with
=org-mode= headlines.

** Coq Setup

There are several imports from perennial, grove, etc. that we have to import.
This should be universal to all marshaling proofs.

#+begin_src coq
From Perennial.program_proof Require Import grove_prelude.
From Grackle.example Require Import example.
From Perennial.program_proof Require Import marshal_stateless_proof.

(* Annotations and discussion for this file is in timestamp_proof.org *)

Module Timestamp.
Section Timestamp.

Context `{!heapGS Σ}.
#+end_src

** Marshaling Code

*** Coq Record

Each =go= struct will have a corresponding =coq= record. The structure of the =coq=
record should exactly mirror the structure of the =go= struct, but use the
corresponding =coq= types. These should be generated at the same time in grackle.

#+begin_src coq
Record Timestamp :=
  mkC {
      hour : u32 ;
      minute : u32 ;
      second : u32 ;
    }.
#+end_src


*** =has_encoding= definition

This definition returns a =Prop= stating the marshaled struct can be thought of as
a tuple of little-endian values. The first line of the definition will be the
same for all structs.

The tuple is built from the fields in the record =C= above. We can build the
operands of the tuple as we're processing and generating the definition for =C=.

#+begin_src coq
Definition has_encoding (encoded:list u8) (args:Timestamp) : Prop :=
  encoded = (u32_le args.(hour)) ++ (u32_le args.(minute)) ++ (u32_le args.(second)).
#+end_src

*** =own= definition

While =has_encoding= is a regular proposition about a list of binary bytes, the
literal wire format, we need a separation logic statement to help reason about
the marshaling process in iris / perennial.

The definition asserts that

- A field in =args_ptr= of type =TimeStamp::hour= with fractional ownership q has
  value #​args.hour
- A field in =args_ptr= of type =TimeStamp::minute= with ownership q has value
  #​args.minute
- A field in =args_ptr= of type =TimeStamp::second= with ownership q has value
  #​args.second

Thus, this =iProp= encodes the existence of the struct, and the correctness of the
values.

#+begin_src coq
Definition own args_ptr args q : iProp Σ :=
  "Hargs_hour" ∷ args_ptr ↦[TimeStamp :: "hour"]{q} #args.(hour) ∗
  "Hargs_minute" ∷ args_ptr ↦[TimeStamp :: "minute"]{q} #args.(minute) ∗
  "Hargs_second" ∷ args_ptr ↦[TimeStamp :: "second"]{q} #args.(second).
#+end_src

*** =wp_Encode= definition

The =wp_Encode= lemma states that the =MarshalTimeStamp= function in the =go= code
correctly marshals any =TimeStamp= struct, as according to =has_encoding= and =own=.
It is a 'Texan Triple', or separation logic triple. The =MarshalTimeStamp=
function uses the /stateless/ marshaling style where the marshaled timestamp is
appended to the end of a slice. That causes the lemma to be parameterized by the
=args_ptr=, a timestamp record =args= as well as some prefix slice =pre_sl= with value
=prefix=.

- The precondition asserts that we have read access to a struct containing the
  values in =args= as well as full ownership of the prefix (which is required to
  append to the prefix slice).
- The post-condition asserts that the =MarshalTimeStamp= function returns an
  encoding =enc= such that the encoding meets the byte list interpretation defined
  in =has_encoding= and that the =enc= has the correct slice value =prefex ++ enc_sl=.

#+begin_src coq
Lemma wp_Encode (args_ptr:loc) (args:Timestamp) (pre_sl:Slice.t) (prefix:list u8) :
  {{{
        own args_ptr args (DfracDiscarded) ∗
        own_slice pre_sl byteT (DfracOwn 1) prefix
  }}}
    MarshalTimeStamp #args_ptr (slice_val pre_sl)
  {{{
        enc enc_sl, RET (slice_val enc_sl);
        ⌜has_encoding enc args⌝ ∗
        own_slice enc_sl byteT (DfracOwn 1) (prefix ++ enc)
  }}}.
#+end_src

*** =wp_Encode= proof

There are 3 distinct parts of the proof for =wp_Encode=, a common setup for
creating the byte slice we'll encode the =TimeStamp= into, a sequence of arguments
for each of the fields of the struct and finally a common conclusion.

I've also included an explanation of what each tactic does as an exercise in my
understanding of iris.

**** Proof Setup

- Introduce the precondition has =H= and the weakest precondition for the
  post-condition as H\Phi.
- Since the precondition is a separated conjunction, we split the two halves
  into =Hown= and =Hpre= for the statements about ownership of the timestamp and the
  prefix slice respectively.
- Recall that =own= is a separating logic conjunction. Using the =iNamed= tactic we
  can destruct that into a hypothesis for each field in the struct. I believe
  that since we are using =DfraceDiscarded= (i.e. \varepsilon) for ownership, we can
  effectively treat this as a persistent hypothesis even though they stay in the
  spatial context.
- \beta-reduction
- Create a new slice with a capacity of 12 bytes. We have to then prove that the
  size of the slice (currently 0) is less than the capacity.
- Proving an unsigned integer is \leq 0 is trivial.
- The goal starts with \forall ptr : loc, so we have to introduce =ptr= of type
  location and that we own new slice of all zeros with 12 bytes which we just
  created with =wp_NewSliceWithCap=.
- Creates a new pointer which points to the value described in the goal,
  =(slice.T byte.T) (Slice.mk ptr (W64 0) (W64 12))=.
- The =wp_ref_to= creates an implication, \forall =l= : =loc=, if =l= is a new, empty byte
  slice we can assign to =enc=, so we introduce the =coq= variable of type =loc=
  and an iris spatial hypothesis =Hptr= describing that new, empty value of =l=.
- Pure reduction resolves the =let= clause.

#+begin_src coq
Proof.
  iIntros (?) "H HΦ". iDestruct "H" as "[Hown Hpre]". iNamed "Hown".
  wp_rec. unfold TimeStamp__approxSize. wp_pures.
  wp_apply (wp_NewSliceWithCap).
  { apply encoding.unsigned_64_nonneg. }
  iIntros (?) "Hsl".
  wp_apply (wp_ref_to); first by val_ty.
  iIntros (?) "Hptr".
  wp_pures.
#+end_src

**** Struct Fields

Now we have a sequence of 3 =WriteInt32= statements writing values from the struct
to the byte slice.

***** Hour

First, we resolve loading the field from the struct. From =Hargs_hour= we know
this value is #​args.hour.

- Next, load the value of the slice, the first argument of =marshal.WriteInt32=.
- Creates an implication ∀ s' : slice with values starting with #​args.hour. The
  =with "[$]"= tells iris to use whatever hypotheses it needs to solve the
  generated sub-goal with the =iFrame= rule.
- Slurp up the new slice value starting with #​args.hour as a hypothesis "Hsl"
  and place the slice in the =coq= context.
- Save the new slice =s'= to the encoding accumulator described by location =l=.

#+begin_src coq
  wp_loadField. wp_load. wp_apply (wp_WriteInt32 with "[$]").
  iIntros (?) "Hsl". wp_store.
#+end_src

***** Minute

This is the same as writing the =hour= field.

#+begin_src coq
  wp_loadField. wp_load. wp_apply (wp_WriteInt32 with "[$]").
  iIntros (?) "Hsl". wp_store.
#+end_src

***** Second

This is the same as writing the =hour= field.

#+begin_src coq
  wp_loadField. wp_load. wp_apply (wp_WriteInt32 with "[$]").
  iIntros (?) "Hsl". wp_store.
#+end_src

**** Proof Conclusion

We're done with the program analysis and have to show that \Phi is true for the
resulting slice.

- To start, load the slice from the heap so what we can reason about it
  directly.
- This is where we append the prefix slice, which can be done with
  =wp_SliceAppendSlice=. This creates a sub-goal where we have to show the type of
  the slice has a default zero value, then show that we own both slices.
  - In order to prove we own the slice containing the marshaled timestamp, we
    need to convert the =Hsl= hypothesis to use =own_slice_small= rather than the
    stronger property =own_slice= before the frame rule can take care of the rest.
- The result of =wp_SliceAppendSlice= is that we own both a new slice =prefix ++
  timestamp= and the old =timestamp= slice, so we introduce those hypotheses.
- Fortunately, H\Phi is of the form post-condition -* \Phi =enc_sl= so we can get
  the post-condition.
- Now we apply the frame rule with "Hsl" to recover the explicit slice value.
- With this tactic we can convert an iris goal that's ⌜pure⌝ into just a regular
  Coq goal.
- And the =done= tactic is an automatic solver capable to solving simple goals
  using
  - intros
  - reflexivity
  - symmetry
  - assumption
  - trivial
  - split
  - discriminate
  - contradiction

#+begin_src coq
  wp_load. wp_apply (wp_SliceAppendSlice with "[Hpre Hsl]"); first auto.
  { iApply own_slice_to_small in "Hsl". iFrame. }
  iIntros (?) "[Hs1 Hs2]". iApply "HΦ". iFrame. iPureIntro.
  done.
Qed.
#+end_src

*** =wp_Decode= definition

The =wp_Decode= lemma states that the =UnmarshalTimeStamp= function in the =go= code
correctly unmarshals any =TimeStamp= struct, as according to =has_encoding= and =own=.
It is also a separation logic triple. In the /stateless/ style of marshaling, we
read the timestamp off the start of some larger slice =enc ++ suffix=.

- The precondition asserts that we have an encoding =enc= who can be interpreted
  as a tuple representation of the struct =args= that has a correct binary value
  =enc_sl ++ suffix= as per the =own= definition.
- The post-condition asserts that the return value =args_ptr= with has the
  correct values per the =own= definition as well as the =suffix= slice.

#+begin_src coq
Lemma wp_Decode enc enc_sl (args:Timestamp) (suffix : list u8) (q : dfrac):
  {{{
        ⌜has_encoding enc args⌝ ∗
        own_slice_small enc_sl byteT q (enc ++ suffix)
  }}}
    UnmarshalTimeStamp (slice_val enc_sl)
  {{{
        args_ptr suff_sl, RET (#args_ptr, suff_sl); own args_ptr args (DfracOwn 1) ∗
                                                    own_slice_small suff_sl byteT q suffix
  }}}.
#+end_src

*** =wp_Decode= proof

Like the proof for =wp_Encode= we have the same three sections.

**** Proof Setup

The setup here is a bit more complicated than for =wp_Encode= since we have to
allocate the struct and break apart some of the statements have about the whole
struct to be used on individual fields.

- Introduce =Henc= as a Coq proposition and =Hsl= as an iris proposition. The
  split mirrors the separating conjunction in the precondition. Like above, we
  also get H\Phi to use with the post-condition.
- \beta-reduction
- The =go= method starts by allocating a =TimeStamp= struct with three =uint32=. This
  produces another small sub-goal which can be easily solved with =first by
  val_ty.= and then produces a implication about a new =TimeStamp= struct which is
  all zeros (the default value).
- Introduce the location =l= and the premise of the implication (that there is a
  all-zero =TimeStamp=).
- Reduce the =let=.
- Creates, as the premise of an implication, that there exists a location which
  points to =enc_sl= that we can reference with =enc=.
- Introduce the pointer created by =wp_ref_to=.
- Reduce the =let=.
- Destruct =Hs= which asserts that there is an all-zero =TimeStamp= struct into a
  hypothesis =HH= asserting that we own a =TimeStamp= struct that's all-zero.
- Break down =HH= into three hypothesis, one for each of the fields in the struct.
- Recall that =Henc= asserts that =⌜has_encoding enc args⌝=. This rewrites the =enc=
  in =Hsl= to the tuple from the has_encoding definition.

#+begin_src coq
Proof.
  iIntros (?) "[%Henc Hsl] HΦ". wp_rec.
  wp_apply wp_allocStruct; first by val_ty.
  iIntros (?) "Hs". wp_pures.
  wp_apply wp_ref_to; first done.
  iIntros (?) "Hptr". wp_pures.
  iDestruct (struct_fields_split with "Hs") as "HH".
  iNamed "HH". rewrite Henc.
#+end_src

**** Struct Fields

Now we have a sequence of 3 =ReadInt32= statements read values from the byte slice
and storing them into the struct.

***** Hour

- Load the slice that we're going to use with =ReadInt32=.
- Creates, as a premise, that after executing =ReadInt32= we have a slice with
  just #​args.minute and #​args.second.
- Consume the premise that =ReadInt32= just created.
- Simplify all of the directly nested =let= constructs.
- Write back to the struct.
- And then write that back to the encoding byte slice.

#+begin_src coq
  wp_load. wp_apply (wp_ReadInt32 with "[$]"). iIntros (?) "Hs".
  wp_pures. wp_storeField. wp_store.
#+end_src

***** Minute

Same as the =hour= field.

#+begin_src coq
  wp_load. wp_apply (wp_ReadInt32 with "[$]"). iIntros (?) "Hs".
  wp_pures. wp_storeField. wp_store.
#+end_src

***** Second

Same as the =hour= field.

#+begin_src coq
  wp_load. wp_apply (wp_ReadInt32 with "[$]"). iIntros (?) "Hs".
  wp_pures. wp_storeField. wp_store.
#+end_src

**** Proof Conclusion

- Load and reduce the =suffix= slice.
- Get the post-condition with H\Phi.
- The frame rule solves this bit by automatically expanding the =own=
  definition, which "hour", "minute" and "second" being joined via separating
  conjunction. This is trivially true, so we don't even need =done.= after this.

#+begin_src coq
  wp_load. wp_pures.
  iApply "HΦ". iModIntro. iFrame.
Qed.
#+end_src

*** File Conclusion

End the sections we created.

#+begin_src coq
End Timestamp.
End Timestamp.
#+end_src

#  LocalWords:  struct endian structs unmarshals args
