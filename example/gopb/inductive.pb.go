// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: inductive.proto

package gopb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Corpus int32

const (
	Corpus_CORPUS_UNSPECIFIED Corpus = 0
	Corpus_CORPUS_WEB         Corpus = 1
	Corpus_CORPUS_NEWS        Corpus = 2
)

// Enum value maps for Corpus.
var (
	Corpus_name = map[int32]string{
		0: "CORPUS_UNSPECIFIED",
		1: "CORPUS_WEB",
		2: "CORPUS_NEWS",
	}
	Corpus_value = map[string]int32{
		"CORPUS_UNSPECIFIED": 0,
		"CORPUS_WEB":         1,
		"CORPUS_NEWS":        2,
	}
)

func (x Corpus) Enum() *Corpus {
	p := new(Corpus)
	*p = x
	return p
}

func (x Corpus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Corpus) Descriptor() protoreflect.EnumDescriptor {
	return file_inductive_proto_enumTypes[0].Descriptor()
}

func (Corpus) Type() protoreflect.EnumType {
	return &file_inductive_proto_enumTypes[0]
}

func (x Corpus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Corpus.Descriptor instead.
func (Corpus) EnumDescriptor() ([]byte, []int) {
	return file_inductive_proto_rawDescGZIP(), []int{0}
}

type EQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Corpus        Corpus                 `protobuf:"varint,2,opt,name=corpus,proto3,enum=Corpus" json:"corpus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EQuery) Reset() {
	*x = EQuery{}
	mi := &file_inductive_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EQuery) ProtoMessage() {}

func (x *EQuery) ProtoReflect() protoreflect.Message {
	mi := &file_inductive_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EQuery.ProtoReflect.Descriptor instead.
func (*EQuery) Descriptor() ([]byte, []int) {
	return file_inductive_proto_rawDescGZIP(), []int{0}
}

func (x *EQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EQuery) GetCorpus() Corpus {
	if x != nil {
		return x.Corpus
	}
	return Corpus_CORPUS_UNSPECIFIED
}

type Address struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Line1         string                 `protobuf:"bytes,1,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2         string                 `protobuf:"bytes,2,opt,name=line2,proto3" json:"line2,omitempty"`
	City          string                 `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	State         string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	Zip           uint32                 `protobuf:"varint,5,opt,name=zip,proto3" json:"zip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Address) Reset() {
	*x = Address{}
	mi := &file_inductive_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_inductive_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_inductive_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetLine1() string {
	if x != nil {
		return x.Line1
	}
	return ""
}

func (x *Address) GetLine2() string {
	if x != nil {
		return x.Line2
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Address) GetZip() uint32 {
	if x != nil {
		return x.Zip
	}
	return 0
}

type OQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Query string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Types that are valid to be assigned to Corpus:
	//
	//	*OQuery_URL
	//	*OQuery_Addr
	Corpus        isOQuery_Corpus `protobuf_oneof:"corpus"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OQuery) Reset() {
	*x = OQuery{}
	mi := &file_inductive_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OQuery) ProtoMessage() {}

func (x *OQuery) ProtoReflect() protoreflect.Message {
	mi := &file_inductive_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OQuery.ProtoReflect.Descriptor instead.
func (*OQuery) Descriptor() ([]byte, []int) {
	return file_inductive_proto_rawDescGZIP(), []int{2}
}

func (x *OQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *OQuery) GetCorpus() isOQuery_Corpus {
	if x != nil {
		return x.Corpus
	}
	return nil
}

func (x *OQuery) GetURL() string {
	if x != nil {
		if x, ok := x.Corpus.(*OQuery_URL); ok {
			return x.URL
		}
	}
	return ""
}

func (x *OQuery) GetAddr() *Address {
	if x != nil {
		if x, ok := x.Corpus.(*OQuery_Addr); ok {
			return x.Addr
		}
	}
	return nil
}

type isOQuery_Corpus interface {
	isOQuery_Corpus()
}

type OQuery_URL struct {
	URL string `protobuf:"bytes,2,opt,name=URL,proto3,oneof"`
}

type OQuery_Addr struct {
	Addr *Address `protobuf:"bytes,3,opt,name=addr,proto3,oneof"`
}

func (*OQuery_URL) isOQuery_Corpus() {}

func (*OQuery_Addr) isOQuery_Corpus() {}

var File_inductive_proto protoreflect.FileDescriptor

const file_inductive_proto_rawDesc = "" +
	"\n" +
	"\x0finductive.proto\"?\n" +
	"\x06eQuery\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x1f\n" +
	"\x06corpus\x18\x02 \x01(\x0e2\a.CorpusR\x06corpus\"q\n" +
	"\aAddress\x12\x14\n" +
	"\x05line1\x18\x01 \x01(\tR\x05line1\x12\x14\n" +
	"\x05line2\x18\x02 \x01(\tR\x05line2\x12\x12\n" +
	"\x04city\x18\x03 \x01(\tR\x04city\x12\x14\n" +
	"\x05state\x18\x04 \x01(\tR\x05state\x12\x10\n" +
	"\x03zip\x18\x05 \x01(\rR\x03zip\"\\\n" +
	"\x06oQuery\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x12\n" +
	"\x03URL\x18\x02 \x01(\tH\x00R\x03URL\x12\x1e\n" +
	"\x04addr\x18\x03 \x01(\v2\b.AddressH\x00R\x04addrB\b\n" +
	"\x06corpus*A\n" +
	"\x06Corpus\x12\x16\n" +
	"\x12CORPUS_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"CORPUS_WEB\x10\x01\x12\x0f\n" +
	"\vCORPUS_NEWS\x10\x02B\bZ\x06./gopbb\x06proto3"

var (
	file_inductive_proto_rawDescOnce sync.Once
	file_inductive_proto_rawDescData []byte
)

func file_inductive_proto_rawDescGZIP() []byte {
	file_inductive_proto_rawDescOnce.Do(func() {
		file_inductive_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_inductive_proto_rawDesc), len(file_inductive_proto_rawDesc)))
	})
	return file_inductive_proto_rawDescData
}

var file_inductive_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_inductive_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_inductive_proto_goTypes = []any{
	(Corpus)(0),     // 0: Corpus
	(*EQuery)(nil),  // 1: eQuery
	(*Address)(nil), // 2: Address
	(*OQuery)(nil),  // 3: oQuery
}
var file_inductive_proto_depIdxs = []int32{
	0, // 0: eQuery.corpus:type_name -> Corpus
	2, // 1: oQuery.addr:type_name -> Address
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_inductive_proto_init() }
func file_inductive_proto_init() {
	if File_inductive_proto != nil {
		return
	}
	file_inductive_proto_msgTypes[2].OneofWrappers = []any{
		(*OQuery_URL)(nil),
		(*OQuery_Addr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_inductive_proto_rawDesc), len(file_inductive_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_inductive_proto_goTypes,
		DependencyIndexes: file_inductive_proto_depIdxs,
		EnumInfos:         file_inductive_proto_enumTypes,
		MessageInfos:      file_inductive_proto_msgTypes,
	}.Build()
	File_inductive_proto = out.File
	file_inductive_proto_goTypes = nil
	file_inductive_proto_depIdxs = nil
}
