name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-coq:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - uses: coq-community/docker-coq-action@v1
        with:
          coq_version: "9.0"
          ocaml_version: "default"
          install: ""
          before_script: |
            sudo chown -R rocq:rocq .
          script: |
            startGroup Build
              make -j4 -k vok
            endGroup
          uninstall: |
            make clean
      - name: Revert permissions
        if: ${{ always() }}
        run: sudo chown -R 1001:116 .

  build-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Check style
        run: |
          gofmt -w -s .
          git diff --exit-code

      - name: Install protoc
        run: sudo apt-get install protobuf-compiler -y
      - name: Install dependencies
        run: go get -t ./...
      - name: go test
        run: go test -vet=all -v ./...

      - name: Check goose output
        run: |
          go run github.com/goose-lang/goose/cmd/goose@new -out new_example/goose ./new_example
          git diff --exit-code

  build-nix:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v32
      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          # Do not collect garbage, it's purging too much...
          # gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never     
      - name: Build Grackle
        run: nix build -L
