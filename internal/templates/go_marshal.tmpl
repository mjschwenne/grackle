func Marshal(<<- param .Name >> S, prefix []byte) []byte {
    var enc = prefix

    << range .Fields ->>
    << if and (isMessage .) (not (isRepeatedType .)) ->>
    enc = << goModuleName . >>.Marshal(<< param $.Name ->>.<< goName .Name >>, enc)
    << else if isGoType . "enum" ->>
    enc = marshal.WriteInt32(enc, uint32(<< param $.Name >>.<< goName .Name >>))
    << else if isGoType . "string" ->>
    << lower .Name>>Bytes := []byte(<<- param $.Name ->>.<< goName .Name >>)
    enc = marshal.WriteInt(enc, uint64(len(<< lower .Name >>Bytes)))
    enc = marshal.WriteBytes(enc, << lower .Name >>Bytes)
    << else if (and (isGoType . "byte") (isSliceType .)) ->>
    enc = marshal.WriteInt(enc, uint64(len(<< param $.Name >>.<< goName .Name >>)))
    enc = marshal.WriteBytes(enc, << param $.Name >>.<< goName .Name >>)
    << else if isSliceType . >>
    enc = marshal.WriteInt(enc, uint64(len(<< param $.Name >>.<< goName .Name >>)))
    enc = marshal.WriteSlice(enc, << param $.Name >>.<< goName .Name >>, << goModuleName . >>.Marshal )
    << else ->>
    enc = marshal.Write<<- marshalType . ->>(enc, << param $.Name ->>.<< goName .Name >>)
    << end ->><<- end >>
    return enc
}
