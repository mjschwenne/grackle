<< template "coq_autogen_notice.tmpl" >>
From New.proof Require Import proof_prelude.
From New.code Require Import << cleanCoqName .GoPackage >>.<< lower .Name >>_gk.
From New.generatedproof Require Import << cleanCoqName .GoPackage >>.<< lower .Name >>_gk.

Module << .Name >>_gk.
Section << .Name >>_gk.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition name_map : gmap w32 go_string := list_to_map [
                                                << range $idx, $val := .Values ->>
                                                << if $idx >>;
                                                << end ->>
                                                ((W32 << .Number >>), "<< .Name >>"%go)
                                                <<- end >>
                                              ].
Definition value_map : gmap go_string w32 := list_to_map [
                                                 << range $idx, $val := .Values ->>
                                                 << if $idx >>;
                                                 << end ->>
                                                 ("<< .Name >>"%go, (W32 << .Number >>))
                                                 <<- end >>
                                               ].

Definition own_initialized `{!<< lower .Name >>_gk.GlobalAddrs} : iProp Σ :=
  "HglobalName" ∷ << lower .Name >>_gk.Name ↦${DfracDiscarded} name_map ∗
  "HglobalValue" ∷ << lower .Name >>_gk.Value ↦${DfracDiscarded} value_map.

Inductive I :=
<<- range .Values >>
| << .Name >> 
<<- end >>.

Definition to_tag i : w32 :=
  match i with
  <<- range .Values >>
  | << .Name >> => W32 << .Number >>
  <<- end >>
  end.

End << .Name >>_gk.
End << .Name >>_gk.
