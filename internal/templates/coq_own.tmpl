Definition own (args_ptr: loc) (args: C) (dq: dfrac) : iProp Σ :=
  <<- $refs := (refFields .Fields) ->>
  <<- $bytes := (filterByCoqType .Fields "list u8") ->>
  <<- if or (gt (len $refs) 0) (gt (len $bytes) 0)  >>
  ∃ << end ->>
  << if len $refs ->>
  (<<- range $idx, $field := $refs ->>
  <<- $field.Name ->>_l << end ->>: loc) << end ->>
  <<- if len $bytes ->>
  (<<- range $idx, $field := $bytes ->>
  <<- $field.Name ->>_sl << end ->>: Slice.t)
  <<- end ->>
  <<- if or (gt (len $refs) 0) (gt (len $bytes) 0) ->>
  , << end >>
  << range $idx, $field := .Fields ->>
  << if $idx >> ∗
  << end ->>
  <<- if isMessage . ->>
  "Hargs_<<- .Name ->>" ∷ args_ptr ↦[<<- lower $.Name >>_gk.S :: "<<- goName .Name ->>"]{dq} #<<- .Name ->>_l ∗
  "Hargs_<<- .Name ->>_enc" ∷ << coqType . ->>.own << .Name ->>_l args.(<<- .Name ->>) dq
  <<- else if or (isCoqType . "string") (isCoqType . "list u8") ->>
  "Hargs_<<- .Name ->>" ∷ args_ptr ↦[<<- lower $.Name >>_gk.S :: "<<- goName .Name ->>"]{dq}
  <<- if isCoqType . "string" >> #(str args.(<< .Name >>))
  <<- else >> (slice_val << .Name >>_sl) ∗
  "Hargs_<<- .Name ->>_sl" ∷ own_slice_small << .Name >>_sl byteT dq args.(<< .Name >>)
  << end >>
  <<- else ->>
  "Hargs_<<- .Name ->>" ∷ args_ptr ↦[<<- lower $.Name >>_gk.S :: "<<- goName .Name ->>"]{dq} #args.(<<- .Name ->>)
  <<- end ->><<- end ->>.
