<<- define "coq_own_struct" ->>
  <<- if eq (len .) 0 ->>
  #()
  <<- else ->>
  (<<- with $valF := index . 0 ->>
  <<- if valFunc $valF ->>
  <<- if not (or (isExtValType .) (isSliceType .)) >>#(<< end >><< valFunc $valF >> << else >>#<< end >><< if isSliceType . >><< .Name >>_sl<< else >>args__c.(<<- $valF.Name ->>)<< end >>
  <<- if and (not (or (isExtValType .) (isSliceType .))) (valFunc $valF) >>)<< end >>, << end ->>
  << template "coq_own_struct" (slice . 1) ->>)
  <<- end ->>
<<- end ->>
Definition own (args__v: val) (args__c: C) (dq: dfrac) : iProp Σ :=
  <<- $extval := (extValFields .Fields) ->>
  <<- $lists := (sliceFields .Fields) ->>
  <<- if or (gt (len $extval) 0) (gt (len $lists) 0)  >>
  ∃ << if len $extval ->>
  (<<- range $idx, $field := $extval ->>
  <<- $field.Name ->>__v << end ->>: val) << end ->>
  <<- if len $lists ->>
  (<<- range $idx, $field := $lists ->>
  <<- $field.Name ->>_sl << end ->>: Slice.t)
  <<- end ->>
  , << end >>
  "%Hown_struct" ∷ ⌜ args__v = << template "coq_own_struct" .Fields >>%V ⌝
  <<- range $lists >> ∗
  "Hown_<< .Name >>" ∷ own_slice_small << .Name >>_sl << goType . >>T dq args__c.(<< .Name >>)
  <<- end >>
  <<- range $extval >> ∗
  "Hown_<< .Name >>" ∷ << .TypeName >>.own << .Name >>__v args__c.(<< .Name >>) dq
  <<- end >>.
