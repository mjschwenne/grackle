<< define "rocq_own_field_name" >>
<<- if .Simple ->>
<< lower .Name >>_gk.S.<< goName .Field.Name >>'
<<- else ->>
<< .Field.Name >>'
<<- end ->>
<<- end ->>

Definition own (args__v: << lower .Name >>_gk.S.t) (args__c: C) (dq: dfrac) : iProp Σ :=
  <<- $reps := (repeatedFields .Fields) ->>
  <<- if (len $reps) >>
  ∃ << range $idx, $field := $reps ->>
  (l__<< $field.Name >> : list << goType . >>.t)
    <<- end ->>
  , << end >>
  <<- range $idx, $field := .Fields >>
  <<- if $idx >> ∗<< end ->>
  <<- if isRepeatedType . >>
  "Hown_<< .Name >>_sl" ∷ own_slice args__v.(<< lower $.Name >>_gk.S.<< goName .Name >>') dq args__c.(<< template "rocq_own_field_name" dict "Name" $.Name "Simple" $.Simple "Field" $field >>) ∗
  "Hown_<< .Name >>_own" ∷ ([∗ list] x;c ∈ l__<< .Name >>;args__c.(<< .Name >>'), << .TypeName >>_gk.own x c dq)
  <<- else if isCoqType . "u8" >>
  "Hown_<< .Name >>" ∷ own_slice args__v.(<< lower $.Name >>_gk.S.<< goName .Name >>') dq args__c.(<< template "rocq_own_field_name" dict "Name" $.Name "Simple" $.Simple "Field" $field >>)
  <<- else if isCoqType . "message" >>
  "Hown_<< .Name >>" ∷ << .TypeName >>_gk.own args__v.(<< lower $.Name >>_gk.S.<< goName .Name >>') args__c.(<< template "rocq_own_field_name" dict "Name" $.Name "Simple" $.Simple "Field" $field >>) dq
  <<- else >>
  "Hown_<< .Name >>" ∷ ⌜ args__v.(<< lower $.Name >>_gk.S.<< goName .Name >>') = args__c.(<< template "rocq_own_field_name" dict "Name" $.Name "Simple" $.Simple "Field" $field >>) ⌝
  <<- end >>
  <<- end >>.
