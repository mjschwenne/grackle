func Unmarshal(s []byte) (S, []byte) {
    var enc = s // Needed for goose compatibility
    << range .Fields ->>
    var << .Name >> << goType . >>
    << end >>
    << range .Fields ->>
    <<- if isMessage . >>
    << .Name >>, enc = << goModuleName . >>.Unmarshal(enc)
    <<- else if isGoType . "enum" >>
    << .Name >>, enc = marshal.ReadInt32(enc)
    <<- else if or (isGoType . "string") (isGoType . "[]byte") >>
    var << .Name >>Len uint64
    var << .Name >>Bytes []byte
    << .Name >>Len, enc = marshal.ReadInt(enc)
    << .Name >>Bytes, enc = marshal.ReadBytesCopy(enc, << .Name >>Len)
    << .Name >> = << if isGoType . "string" >>string(<< end >><< .Name >>Bytes<< if isGoType . "string" >>)<< end >>
    <<- else >>
    << .Name >>, enc = marshal.Read<<- marshalType . ->>(enc)
    <<- end ->> <<- end >>

    return S{
        << range .Fields ->>
        << goName .Name >>: << .Name >>,
        << end >>
    }, enc
}
