func Unmarshal(s []byte) (S, []byte) {
    << range .Fields ->>
    <<- if and (isMessage .) (not (isRepeatedType .)) >>
    << .Name >>, s := << goModuleName . >>.Unmarshal(s)
    <<- else if isGoType . "enum" >>
    << .Name >>_int, s := marshal.ReadInt32(s)
    << .Name >> := << goType . >>(<< .Name >>_int)
    <<- else if or (isGoType . "string") (and (isSliceType . ) (isGoType . "byte")) >>
    << .Name >>Bytes, s := marshal.ReadLenPrefixedBytes(s)
    << .Name >> := << if isGoType . "string" >>string(<< end >>std.BytesClone(<< .Name >>Bytes)<< if isGoType . "string" >>)<< end >>
    <<- else if isSliceType . >>
    << .Name >>Len, s := marshal.ReadInt(s)
    << .Name >>, s := marshal.ReadSlice[<< goType . >>](s, << .Name >>Len, << if isMessage . >><< goModuleName . >>.Unmarshal<< else >>marshal.Read<< marshalType . >><< end >>)
    <<- else >>
    << .Name >>, s := marshal.Read<<- marshalType . ->>(s)
    <<- end ->> <<- end >>

    return S{
        << range .Fields ->>
        << goName .Name >>: << .Name >>,
        << end >>
    }, s
}
