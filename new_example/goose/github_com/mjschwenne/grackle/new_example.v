(* autogenerated from github.com/mjschwenne/grackle/new_example *)
From New.golang Require Import defn.
Require Export New.code.github_com.tchajed.marshal.

Definition main : go_string := "github.com/mjschwenne/grackle/new_example".

Module main.
Section code.
Context `{ffi_syntax}.


Definition TimeStamp : go_type := structT [
  "hour" :: uint32T;
  "minute" :: uint32T;
  "second" :: uint32T
].

(* go: timestamp.go:11:6 *)
Definition MarshalTimeStamp : val :=
  rec: "MarshalTimeStamp" "enc" "t" :=
    exception_do (let: "t" := (mem.alloc "t") in
    let: "enc" := (mem.alloc "enc") in
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #TimeStamp #"hour"%go "t")) in
    (func_call #marshal.marshal #"WriteInt32"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #TimeStamp #"minute"%go "t")) in
    (func_call #marshal.marshal #"WriteInt32"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    let: "$r0" := (let: "$a0" := (![#sliceT] "enc") in
    let: "$a1" := (![#uint32T] (struct.field_ref #TimeStamp #"second"%go "t")) in
    (func_call #marshal.marshal #"WriteInt32"%go) "$a0" "$a1") in
    do:  ("enc" <-[#sliceT] "$r0");;;
    return: (![#sliceT] "enc")).

(* go: timestamp.go:18:6 *)
Definition UnmarshalTimeStamp : val :=
  rec: "UnmarshalTimeStamp" "s" :=
    exception_do (let: "s" := (mem.alloc "s") in
    let: "hour" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadInt32"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("hour" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "minute" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadInt32"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("minute" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    let: "second" := (mem.alloc (type.zero_val #uint32T)) in
    let: ("$ret0", "$ret1") := (let: "$a0" := (![#sliceT] "s") in
    (func_call #marshal.marshal #"ReadInt32"%go) "$a0") in
    let: "$r0" := "$ret0" in
    let: "$r1" := "$ret1" in
    do:  ("second" <-[#uint32T] "$r0");;;
    do:  ("s" <-[#sliceT] "$r1");;;
    return: (let: "$hour" := (![#uint32T] "hour") in
     let: "$minute" := (![#uint32T] "minute") in
     let: "$second" := (![#uint32T] "second") in
     struct.make #TimeStamp [{
       "hour" ::= "$hour";
       "minute" ::= "$minute";
       "second" ::= "$second"
     }], ![#sliceT] "s")).

Definition vars' : list (go_string * go_type) := [].

Definition functions' : list (go_string * val) := [("MarshalTimeStamp"%go, MarshalTimeStamp); ("UnmarshalTimeStamp"%go, UnmarshalTimeStamp)].

Definition msets' : list (go_string * (list (go_string * val))) := [("TimeStamp"%go, []); ("TimeStamp'ptr"%go, [])].

#[global] Instance info' : PkgInfo new_example.main :=
  {|
    pkg_vars := vars';
    pkg_functions := functions';
    pkg_msets := msets';
    pkg_imported_pkgs := [marshal.marshal];
  |}.

Definition initialize' : val :=
  rec: "initialize'" <> :=
    globals.package_init new_example.main (Î»: <>,
      exception_do (do:  marshal.initialize')
      ).

End code.
End main.
