(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.generatedproof.github_com.goose_lang.std.
Require Export New.generatedproof.github_com.goose_lang.primitive.
Require Export New.golang.theory.

Require Export New.code.github_com.mjschwenne.grackle.new_example.

Set Default Proof Using "Type".

Module example.

(* type example.Calendar *)
Module Calendar.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  hash' : slice.t;
  events' : slice.t;
}.
End def.
End Calendar.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Calendar : Settable Calendar.t :=
  settable! Calendar.mk < Calendar.hash'; Calendar.events' >.
Global Instance into_val_Calendar : IntoVal Calendar.t :=
  {| to_val_def v :=
    struct.val_aux example.Calendar [
    "hash" ::= #(Calendar.hash' v);
    "events" ::= #(Calendar.events' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Calendar : IntoValTyped Calendar.t example.Calendar :=
{|
  default_val := Calendar.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Calendar_hash : IntoValStructField "hash" example.Calendar Calendar.hash'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Calendar_events : IntoValStructField "events" example.Calendar Calendar.events'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Calendar hash' events':
  PureWp True
    (struct.make #example.Calendar (alist_val [
      "hash" ::= #hash';
      "events" ::= #events'
    ]))%struct
    #(Calendar.mk hash' events').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Calendar_struct_fields_split dq l (v : Calendar.t) :
  StructFieldsSplit dq l v (
    "Hhash" ∷ l ↦s[example.Calendar :: "hash"]{dq} v.(Calendar.hash') ∗
    "Hevents" ∷ l ↦s[example.Calendar :: "events"]{dq} v.(Calendar.events')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Calendar.hash' v)) (example.Calendar) "hash"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type example.Status *)
Module Status.
Section def.
Context `{ffi_syntax}.
Definition t := w64.
End def.
End Status.

(* type example.Person *)
Module Person.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  Name' : go_string;
  Status' : Status.t;
}.
End def.
End Person.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Person : Settable Person.t :=
  settable! Person.mk < Person.Name'; Person.Status' >.
Global Instance into_val_Person : IntoVal Person.t :=
  {| to_val_def v :=
    struct.val_aux example.Person [
    "Name" ::= #(Person.Name' v);
    "Status" ::= #(Person.Status' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Person : IntoValTyped Person.t example.Person :=
{|
  default_val := Person.mk (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Person_Name : IntoValStructField "Name" example.Person Person.Name'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Person_Status : IntoValStructField "Status" example.Person Person.Status'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Person Name' Status':
  PureWp True
    (struct.make #example.Person (alist_val [
      "Name" ::= #Name';
      "Status" ::= #Status'
    ]))%struct
    #(Person.mk Name' Status').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Person_struct_fields_split dq l (v : Person.t) :
  StructFieldsSplit dq l v (
    "HName" ∷ l ↦s[example.Person :: "Name"]{dq} v.(Person.Name') ∗
    "HStatus" ∷ l ↦s[example.Person :: "Status"]{dq} v.(Person.Status')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Person.Name' v)) (example.Person) "Name"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type example.TimeStamp *)
Module TimeStamp.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  hour' : w32;
  minute' : w32;
  second' : w32;
}.
End def.
End TimeStamp.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_TimeStamp : Settable TimeStamp.t :=
  settable! TimeStamp.mk < TimeStamp.hour'; TimeStamp.minute'; TimeStamp.second' >.
Global Instance into_val_TimeStamp : IntoVal TimeStamp.t :=
  {| to_val_def v :=
    struct.val_aux example.TimeStamp [
    "hour" ::= #(TimeStamp.hour' v);
    "minute" ::= #(TimeStamp.minute' v);
    "second" ::= #(TimeStamp.second' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_TimeStamp : IntoValTyped TimeStamp.t example.TimeStamp :=
{|
  default_val := TimeStamp.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_TimeStamp_hour : IntoValStructField "hour" example.TimeStamp TimeStamp.hour'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_TimeStamp_minute : IntoValStructField "minute" example.TimeStamp TimeStamp.minute'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_TimeStamp_second : IntoValStructField "second" example.TimeStamp TimeStamp.second'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_TimeStamp hour' minute' second':
  PureWp True
    (struct.make #example.TimeStamp (alist_val [
      "hour" ::= #hour';
      "minute" ::= #minute';
      "second" ::= #second'
    ]))%struct
    #(TimeStamp.mk hour' minute' second').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance TimeStamp_struct_fields_split dq l (v : TimeStamp.t) :
  StructFieldsSplit dq l v (
    "Hhour" ∷ l ↦s[example.TimeStamp :: "hour"]{dq} v.(TimeStamp.hour') ∗
    "Hminute" ∷ l ↦s[example.TimeStamp :: "minute"]{dq} v.(TimeStamp.minute') ∗
    "Hsecond" ∷ l ↦s[example.TimeStamp :: "second"]{dq} v.(TimeStamp.second')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (TimeStamp.hour' v)) (example.TimeStamp) "hour"%go.
  simpl_one_flatten_struct (# (TimeStamp.minute' v)) (example.TimeStamp) "minute"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type example.Event *)
Module Event.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  id' : w32;
  name' : go_string;
  startTime' : TimeStamp.t;
  endTime' : TimeStamp.t;
}.
End def.
End Event.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Event : Settable Event.t :=
  settable! Event.mk < Event.id'; Event.name'; Event.startTime'; Event.endTime' >.
Global Instance into_val_Event : IntoVal Event.t :=
  {| to_val_def v :=
    struct.val_aux example.Event [
    "id" ::= #(Event.id' v);
    "name" ::= #(Event.name' v);
    "startTime" ::= #(Event.startTime' v);
    "endTime" ::= #(Event.endTime' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Event : IntoValTyped Event.t example.Event :=
{|
  default_val := Event.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Event_id : IntoValStructField "id" example.Event Event.id'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Event_name : IntoValStructField "name" example.Event Event.name'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Event_startTime : IntoValStructField "startTime" example.Event Event.startTime'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Event_endTime : IntoValStructField "endTime" example.Event Event.endTime'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Event id' name' startTime' endTime':
  PureWp True
    (struct.make #example.Event (alist_val [
      "id" ::= #id';
      "name" ::= #name';
      "startTime" ::= #startTime';
      "endTime" ::= #endTime'
    ]))%struct
    #(Event.mk id' name' startTime' endTime').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Event_struct_fields_split dq l (v : Event.t) :
  StructFieldsSplit dq l v (
    "Hid" ∷ l ↦s[example.Event :: "id"]{dq} v.(Event.id') ∗
    "Hname" ∷ l ↦s[example.Event :: "name"]{dq} v.(Event.name') ∗
    "HstartTime" ∷ l ↦s[example.Event :: "startTime"]{dq} v.(Event.startTime') ∗
    "HendTime" ∷ l ↦s[example.Event :: "endTime"]{dq} v.(Event.endTime')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Event.id' v)) (example.Event) "id"%go.
  simpl_one_flatten_struct (# (Event.name' v)) (example.Event) "name"%go.
  simpl_one_flatten_struct (# (Event.startTime' v)) (example.Event) "startTime"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!globalsGS Σ}.
Context `{!GoContext}.

Global Instance wp_func_call_MarshalCalendar :
  WpFuncCall example.MarshalCalendar _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UnmarshalCalendar :
  WpFuncCall example.UnmarshalCalendar _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MarshalPerson :
  WpFuncCall example.MarshalPerson _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UnmarshalPerson :
  WpFuncCall example.UnmarshalPerson _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MarshalEvent :
  WpFuncCall example.MarshalEvent _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UnmarshalEvent :
  WpFuncCall example.UnmarshalEvent _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MarshalTimeStamp :
  WpFuncCall example.MarshalTimeStamp _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UnmarshalTimeStamp :
  WpFuncCall example.UnmarshalTimeStamp _ (is_pkg_defined example) :=
  ltac:(apply wp_func_call'; reflexivity).

End names.
End example.
