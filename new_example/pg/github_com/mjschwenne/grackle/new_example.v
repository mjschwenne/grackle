(* autogenerated by goose proofgen; do not modify *)
Require Export New.proof.proof_prelude.
Require Export New.generatedproof.github_com.tchajed.marshal.
Require Export New.golang.theory.

Require Export Grackle.new_ex.goose.github_com.mjschwenne.grackle.new_example.

Set Default Proof Using "Type".

Module main.

(* type main.TimeStamp *)
Module TimeStamp.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  hour' : w32;
  minute' : w32;
  second' : w32;
}.
End def.
End TimeStamp.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_TimeStamp : Settable TimeStamp.t :=
  settable! TimeStamp.mk < TimeStamp.hour'; TimeStamp.minute'; TimeStamp.second' >.
Global Instance into_val_TimeStamp : IntoVal TimeStamp.t :=
  {| to_val_def v :=
    struct.val_aux main.TimeStamp [
    "hour" ::= #(TimeStamp.hour' v);
    "minute" ::= #(TimeStamp.minute' v);
    "second" ::= #(TimeStamp.second' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_TimeStamp : IntoValTyped TimeStamp.t main.TimeStamp :=
{|
  default_val := TimeStamp.mk (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_TimeStamp_hour : IntoValStructField "hour" main.TimeStamp TimeStamp.hour'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_TimeStamp_minute : IntoValStructField "minute" main.TimeStamp TimeStamp.minute'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_TimeStamp_second : IntoValStructField "second" main.TimeStamp TimeStamp.second'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_TimeStamp hour' minute' second':
  PureWp True
    (struct.make #main.TimeStamp (alist_val [
      "hour" ::= #hour';
      "minute" ::= #minute';
      "second" ::= #second'
    ]))%struct
    #(TimeStamp.mk hour' minute' second').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance TimeStamp_struct_fields_split dq l (v : TimeStamp.t) :
  StructFieldsSplit dq l v (
    "Hhour" ∷ l ↦s[main.TimeStamp :: "hour"]{dq} v.(TimeStamp.hour') ∗
    "Hminute" ∷ l ↦s[main.TimeStamp :: "minute"]{dq} v.(TimeStamp.minute') ∗
    "Hsecond" ∷ l ↦s[main.TimeStamp :: "second"]{dq} v.(TimeStamp.second')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (TimeStamp.hour' v)) main.TimeStamp "hour"%go.
  simpl_one_flatten_struct (# (TimeStamp.minute' v)) main.TimeStamp "minute"%go.

  solve_field_ref_f.
Qed.

End instances.

(* type main.Event *)
Module Event.
Section def.
Context `{ffi_syntax}.
Record t := mk {
  id' : w32;
  name' : go_string;
  startTime' : TimeStamp.t;
  endTime' : TimeStamp.t;
}.
End def.
End Event.

Section instances.
Context `{ffi_syntax}.

Global Instance settable_Event : Settable Event.t :=
  settable! Event.mk < Event.id'; Event.name'; Event.startTime'; Event.endTime' >.
Global Instance into_val_Event : IntoVal Event.t :=
  {| to_val_def v :=
    struct.val_aux main.Event [
    "id" ::= #(Event.id' v);
    "name" ::= #(Event.name' v);
    "startTime" ::= #(Event.startTime' v);
    "endTime" ::= #(Event.endTime' v)
    ]%struct
  |}.

Global Program Instance into_val_typed_Event : IntoValTyped Event.t main.Event :=
{|
  default_val := Event.mk (default_val _) (default_val _) (default_val _) (default_val _);
|}.
Next Obligation. solve_to_val_type. Qed.
Next Obligation. solve_zero_val. Qed.
Next Obligation. solve_to_val_inj. Qed.
Final Obligation. solve_decision. Qed.

Global Instance into_val_struct_field_Event_id : IntoValStructField "id" main.Event Event.id'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Event_name : IntoValStructField "name" main.Event Event.name'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Event_startTime : IntoValStructField "startTime" main.Event Event.startTime'.
Proof. solve_into_val_struct_field. Qed.

Global Instance into_val_struct_field_Event_endTime : IntoValStructField "endTime" main.Event Event.endTime'.
Proof. solve_into_val_struct_field. Qed.


Context `{!ffi_model, !ffi_semantics _ _, !ffi_interp _, !heapGS Σ}.
Global Instance wp_struct_make_Event id' name' startTime' endTime':
  PureWp True
    (struct.make #main.Event (alist_val [
      "id" ::= #id';
      "name" ::= #name';
      "startTime" ::= #startTime';
      "endTime" ::= #endTime'
    ]))%struct
    #(Event.mk id' name' startTime' endTime').
Proof. solve_struct_make_pure_wp. Qed.


Global Instance Event_struct_fields_split dq l (v : Event.t) :
  StructFieldsSplit dq l v (
    "Hid" ∷ l ↦s[main.Event :: "id"]{dq} v.(Event.id') ∗
    "Hname" ∷ l ↦s[main.Event :: "name"]{dq} v.(Event.name') ∗
    "HstartTime" ∷ l ↦s[main.Event :: "startTime"]{dq} v.(Event.startTime') ∗
    "HendTime" ∷ l ↦s[main.Event :: "endTime"]{dq} v.(Event.endTime')
  ).
Proof.
  rewrite /named.
  apply struct_fields_split_intro.
  unfold_typed_pointsto; split_pointsto_app.

  rewrite -!/(typed_pointsto_def _ _ _) -!typed_pointsto_unseal.
  simpl_one_flatten_struct (# (Event.id' v)) main.Event "id"%go.
  simpl_one_flatten_struct (# (Event.name' v)) main.Event "name"%go.
  simpl_one_flatten_struct (# (Event.startTime' v)) main.Event "startTime"%go.

  solve_field_ref_f.
Qed.

End instances.

Section names.

Class GlobalAddrs :=
{
}.

Context `{!GlobalAddrs}.
Context `{hG: heapGS Σ, !ffi_semantics _ _}.
Context `{!goGlobalsGS Σ}.

Definition var_addrs : list (go_string * loc) := [
  ].

Global Instance is_pkg_defined_instance : IsPkgDefined main :=
{|
  is_pkg_defined := is_global_definitions main var_addrs;
|}.

Definition own_allocated : iProp Σ :=
True.

Global Instance wp_func_call_MarshalEvent :
  WpFuncCall main "MarshalEvent" _ (is_pkg_defined main) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UnmarshalEvent :
  WpFuncCall main "UnmarshalEvent" _ (is_pkg_defined main) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_MarshalTimeStamp :
  WpFuncCall main "MarshalTimeStamp" _ (is_pkg_defined main) :=
  ltac:(apply wp_func_call'; reflexivity).

Global Instance wp_func_call_UnmarshalTimeStamp :
  WpFuncCall main "UnmarshalTimeStamp" _ (is_pkg_defined main) :=
  ltac:(apply wp_func_call'; reflexivity).

End names.
End main.
