#+title: Ideas
#+author: Matt Schwennesen
#+date: <2024-08-27 Tue>

The existing marshaling code ([[https://github.com/tchajed/marshal/blob/master/marshal.go][here]]) makes use of the [[https://github.com/goose-lang/primitive/tree/main][goose primitive module]] to
encode a sequence of data fields into a little endian byte array.

* Workflow

Using this as a template, and some design philosophy from protobuf itself, I
would expect a workflow like this.

** Protobuf file

We'll start with a protobuf specification (of which only a subset of the proto 3
language will be supported). That might look like this:

#+begin_src proto3
syntax = "proto3"

message TimeStamp {
    int32 hour = 1;
    int32 minute = 2;
    int32 second = 3;
}
#+end_src

This protobuf spec defines one message with three 32-bit integers. The numbers
represent tags and are primarily used to ensure backwards and forward
compatibility. That's not a goal for this project (yet) but we will have to at
least accommodate their presence in the protobuf definition.

The grackle compiler can parse the =.proto= with [[https://github.com/yoheimuta/go-protoparser][go-protoparser]] and outputs code
which contains a struct definition for each message.

#+begin_src go
type TimeStamp struct{
	hour   uint32
	minute uint32
	second uint32
}
#+end_src

and the struct would have a =marhsal= and an =unmarshal= constructor function would
be generated as well.

#+begin_src go
func (t TimeStamp) marshal() []byte {
    // marhsaling code
	enc := make([]byte, 12)
	var off uint8 = 0
	primitive.UInt32Put(enc[off:], t.hour)
	off += 4
	primitive.UInt32Put(enc[off:], t.minute)
	off += 4
	primitive.UInt32Put(enc[off:], t.second)

	return enc
}
#+end_src

#+begin_src go
func UnmarshalTimeStamp(enc []byte) *TimeStamp {
	// unmarshaling code
	var ts TimeStamp

	var off uint32
	ts.hour = primitive.UInt32Get(enc[off:])
	off += 4
	ts.minute = primitive.UInt32Get(enc[off:])
	off += 4
	ts.second = primitive.UInt32Get(enc[off:])

	return &ts
}
#+end_src

I'm not sure if these struct methods are idiomatic go. Go isn't really
object-oriented and doesn't really have constructors, so I'm thinking that the
=unmarshal= function will overwrite the values in the struct it is being called
on. Create a new, empty =TimeStamp= before calling =unmarshal= to populate it.

Then we can use these structs in the code we're interested in verifying.

#+begin_src go
func main() {
	hours, minutes, seconds := time.Now().Clock()
	fmt.Printf("True Time:   %02d:%02d:%02d\n", hours, minutes, seconds)
	timeStamp := TimeStamp{hour: uint32(hours), minute: uint32(minutes), second: uint32(seconds)}
	enc := timeStamp.marshal()

	var newTime *TimeStamp
	newTime = UnmarshalTimeStamp(enc)

	fmt.Printf("Struct Time: %02d:%02d:%02d\n", newTime.hour, newTime.minute, newTime.second)
}
#+end_src

* Wire Format

After reviewing the [[https://protobuf.dev/programming-guides/encoding/][encoding documentation]] for protobuf, I now have a much
better understanding of where the flexibility of protobufs come from. Also, it
turns out that this is much simpler than I though.

Overall, I like the record structure of a tag containing the field label and
type of payload. This remove the requirement that each field in the struct /
message is strictly ordered.

** Remaining Questions

1. How to handle =optional= fields. Both the protobuf implementation and the go
   programming language have default values for every field, which I believe
   align. This is probably most useful during the de-serialization process
   where a field can have the inferred correct value even if it is missing from
   the encoded message. However, there is really no way to tell the different
   between a field left as zero (the default go value) or a missing field. It
   doesn't impact the user experience since the de-serialization process is
   agnostic towards it but it would effect binary size. At this point, I'm
   unsure how difficult it would be to implement this. Probably not that
   difficult.

   Do we care about stripping optional fields with a default value out of the
   serialized message at this stage or is using a few extra bytes for now
   acceptable.

2. Merging fields and "Last One Wins". If an encoded message contains the same
   field multiple times, the last occurrence of the field is what becomes the
   value. That part should be easy. But for =LEN= fields, we have to track and
   merge multiple occurrences of the same field. To borrow the [[https://github.com/protocolbuffers/protoscope][protoscope]]
   language, if we see

   #+begin_src protoscope
6: {3 270}
6: {86942}
   #+end_src

   we should be able to reconstruct this as =6: {3 270 86942}= by merging the two
   fields. But if field 6 isn't a repeated (packed) field, such as a string,
   then the older value would just win even though it's a =LEN= field.

3. Negative numbers. It appears that the current [[https://github.com/goose-lang/primitive/blob/main/prims.go][goose primitives]] only support
   unsigned integers out of the box, although I suppose you could manually
   calculate the 2's complement encoding and treat that as an unsigned integer.
   On the other hand, the protobuf specification definitely supports both signed
   and unsigned integers explicitly. It can do this with both the =s=-prefixed
   types like =sint64= which use the more space efficient [[https://en.wikipedia.org/wiki/Variable-length_quantity#Zigzag_encoding][zigzag encoding]] as
   opposed to a =varint= encoding (which will always use the maximum number of
   bytes since a 2's complement encoding will start with a 1).

   Should we add explicit support negative numbers?

4. Variable length integers. The protobuf =varint='s don't seem to be that
   complex. Then encode a 64 bit unsigned integer into between 1 and 10 bytes by
   using the most significant bit to mark if the next byte is also part of the
   same =varint= followed by 7 bits of payload. The bytes use little-edian order.

   Is this something that we're interested in? We could choose to support only
   fixed width types (i.e. =fixed64= and =fixed32=) but protobuf uses =varint= as part
   of the record header, so we will never be compatible with protobuf wire
   format without some support for variable width integers. Assuming that goose
   supports go bit-wise operators this format seems doable.

* Reasoning About Marshaling Code

So, the primary motivation here is that we want to use this code as part of a
verified system which has been formally proved to be correct using the Coq proof
assistant. In order to know what Coq code grackle needs to produce, we must
first digest what it means for marshaling code to be correct. Looking at code
which imports =marshal_stateless_proof.v= in the perennial source tree, we find
files such as =src/program_proof/vrsm/paxos/marshal_proof.v= which contains some
proofs that are so repetitive that yesterday I scrolled down to a different
section of the file, glanced away from my computer and when I looked back I
thought that I hadn't actually scrolled down at all.

The file is structured into a module and section for each of the functions
listed [[https://github.com/mit-pdos/gokv/blob/main/vrsm/paxos/0_marshal.go][here]]. Each section contains these definitions and theorems:

- =has_encoding=: A proposition asserting that a list of bytes matches the binary
  concatenation of the fields in the struct.
- =own=: An iris proposition asserting that there exists a byte slice with the
  correct binary value that's own by the encoding/decoding function.
- =wp_Encode=: Defines the behavior of the marshaling function with the separating
  logic triple stating if the marshaling function owns the input struct then it
  will return a new byte slice those value meets the =has_encoding= definition.
- =wp_Decode=: Defines the behavior of the unmarshaling function with a
  separating logic triple asserting that if given a byte slice meeting the
  definition =has_encoding=, the unmarshaling function will return a pointer to a
  struct =args= containing the correct values per the =own= definition

The primary difference between the sections is the structure of the struct =C=,
which roughly matches the corresponding struct in the go code.

* Meta

#  LocalWords:  endian protobuf struct unmarshaling
